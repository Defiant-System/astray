const Maze = {
	generate(dimension) {
		// Initialize the field.
		var field = new Array(dimension);
		field.dimension = dimension;
		for(var i = 0; i < dimension; i++) {
			field[i] = new Array(dimension);
			for (var j = 0; j < dimension; j++) {
				field[i][j] = true;
			}
		}

		// Gnerate the maze recursively.
		field = this.iterate(field, 1, 1);
		
		return field;
	},
	iterate(field, x, y) {
		field[x][y] = false;
		while (true) {
			let directions = [];
			if (x > 1 && field[x - 2][y] == true) {
				directions.push([-1, 0]);
			}
			if (x < field.dimension - 2 && field[x + 2][y] == true) {
				directions.push([1, 0]);
			}
			if (y > 1 && field[x][y - 2] == true) {
				directions.push([0, -1]);
			}
			if (y < field.dimension - 2 && field[x][y + 2] == true) {
				directions.push([0, 1]);
			}
			if (directions.length == 0) {
				return field;
			}
			let dir = directions[Math.floor(Math.random() * directions.length)];
			field[x + dir[0]][y + dir[1]] = false;
			field = this.iterate(field, x + dir[0] * 2, y + dir[1] * 2);
		}
	}
};

/*
* Copyright (c) 2006-2007 Erin Catto http://www.gphysics.com
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/
var Box2D = {};

(function (a2j, undefined$1) {

   if(!(Object.prototype.defineProperty instanceof Function)
      && Object.prototype.__defineGetter__ instanceof Function
      && Object.prototype.__defineSetter__ instanceof Function)
   {
      Object.defineProperty = function(obj, p, cfg) {
         if(cfg.get instanceof Function)
            obj.__defineGetter__(p, cfg.get);
         if(cfg.set instanceof Function)
            obj.__defineSetter__(p, cfg.set);
      };
   }
   
   function emptyFn() {};
   a2j.inherit = function(cls, base) {
      var tmpCtr = cls;
      emptyFn.prototype = base.prototype;
      cls.prototype = new emptyFn;
      cls.prototype.constructor = tmpCtr;
   };
   
   a2j.generateCallback = function generateCallback(context, cb) {
      return function () {
         cb.apply(context, arguments);
      };
   };
   
   a2j.NVector = function NVector(length) {
      if (length === undefined$1) length = 0;
      var tmp = new Array(length || 0);
      for (var i = 0; i < length; ++i)
      tmp[i] = 0;
      return tmp;
   };
   
   a2j.is = function is(o1, o2) {
      if (o1 === null) return false;
      if ((o2 instanceof Function) && (o1 instanceof o2)) return true;
      if ((o1.constructor.__implements != undefined$1) && (o1.constructor.__implements[o2])) return true;
      return false;
   };
   
   a2j.parseUInt = function(v) {
      return Math.abs(parseInt(v));
   };
   
})(Box2D);

//#TODO remove assignments from global namespace
var Vector = Array;
var Vector_a2j_Number = Box2D.NVector;
//package structure
if (typeof(Box2D) === "undefined") Box2D = {};
if (typeof(Box2D.Collision) === "undefined") Box2D.Collision = {};
if (typeof(Box2D.Collision.Shapes) === "undefined") Box2D.Collision.Shapes = {};
if (typeof(Box2D.Common) === "undefined") Box2D.Common = {};
if (typeof(Box2D.Common.Math) === "undefined") Box2D.Common.Math = {};
if (typeof(Box2D.Dynamics) === "undefined") Box2D.Dynamics = {};
if (typeof(Box2D.Dynamics.Contacts) === "undefined") Box2D.Dynamics.Contacts = {};
if (typeof(Box2D.Dynamics.Controllers) === "undefined") Box2D.Dynamics.Controllers = {};
if (typeof(Box2D.Dynamics.Joints) === "undefined") Box2D.Dynamics.Joints = {};
//pre-definitions
(function () {
   Box2D.Collision.IBroadPhase = 'Box2D.Collision.IBroadPhase';

   function b2AABB() {
      b2AABB.b2AABB.apply(this, arguments);
   };
   Box2D.Collision.b2AABB = b2AABB;

   function b2Bound() {
      b2Bound.b2Bound.apply(this, arguments);
   };
   Box2D.Collision.b2Bound = b2Bound;

   function b2BoundValues() {
      b2BoundValues.b2BoundValues.apply(this, arguments);
      if (this.constructor === b2BoundValues) this.b2BoundValues.apply(this, arguments);
   };
   Box2D.Collision.b2BoundValues = b2BoundValues;

   function b2Collision() {
      b2Collision.b2Collision.apply(this, arguments);
   };
   Box2D.Collision.b2Collision = b2Collision;

   function b2ContactID() {
      b2ContactID.b2ContactID.apply(this, arguments);
      if (this.constructor === b2ContactID) this.b2ContactID.apply(this, arguments);
   };
   Box2D.Collision.b2ContactID = b2ContactID;

   function b2ContactPoint() {
      b2ContactPoint.b2ContactPoint.apply(this, arguments);
   };
   Box2D.Collision.b2ContactPoint = b2ContactPoint;

   function b2Distance() {
      b2Distance.b2Distance.apply(this, arguments);
   };
   Box2D.Collision.b2Distance = b2Distance;

   function b2DistanceInput() {
      b2DistanceInput.b2DistanceInput.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceInput = b2DistanceInput;

   function b2DistanceOutput() {
      b2DistanceOutput.b2DistanceOutput.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceOutput = b2DistanceOutput;

   function b2DistanceProxy() {
      b2DistanceProxy.b2DistanceProxy.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceProxy = b2DistanceProxy;

   function b2DynamicTree() {
      b2DynamicTree.b2DynamicTree.apply(this, arguments);
      if (this.constructor === b2DynamicTree) this.b2DynamicTree.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTree = b2DynamicTree;

   function b2DynamicTreeBroadPhase() {
      b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreeBroadPhase = b2DynamicTreeBroadPhase;

   function b2DynamicTreeNode() {
      b2DynamicTreeNode.b2DynamicTreeNode.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreeNode = b2DynamicTreeNode;

   function b2DynamicTreePair() {
      b2DynamicTreePair.b2DynamicTreePair.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreePair = b2DynamicTreePair;

   function b2Manifold() {
      b2Manifold.b2Manifold.apply(this, arguments);
      if (this.constructor === b2Manifold) this.b2Manifold.apply(this, arguments);
   };
   Box2D.Collision.b2Manifold = b2Manifold;

   function b2ManifoldPoint() {
      b2ManifoldPoint.b2ManifoldPoint.apply(this, arguments);
      if (this.constructor === b2ManifoldPoint) this.b2ManifoldPoint.apply(this, arguments);
   };
   Box2D.Collision.b2ManifoldPoint = b2ManifoldPoint;

   function b2Point() {
      b2Point.b2Point.apply(this, arguments);
   };
   Box2D.Collision.b2Point = b2Point;

   function b2RayCastInput() {
      b2RayCastInput.b2RayCastInput.apply(this, arguments);
      if (this.constructor === b2RayCastInput) this.b2RayCastInput.apply(this, arguments);
   };
   Box2D.Collision.b2RayCastInput = b2RayCastInput;

   function b2RayCastOutput() {
      b2RayCastOutput.b2RayCastOutput.apply(this, arguments);
   };
   Box2D.Collision.b2RayCastOutput = b2RayCastOutput;

   function b2Segment() {
      b2Segment.b2Segment.apply(this, arguments);
   };
   Box2D.Collision.b2Segment = b2Segment;

   function b2SeparationFunction() {
      b2SeparationFunction.b2SeparationFunction.apply(this, arguments);
   };
   Box2D.Collision.b2SeparationFunction = b2SeparationFunction;

   function b2Simplex() {
      b2Simplex.b2Simplex.apply(this, arguments);
      if (this.constructor === b2Simplex) this.b2Simplex.apply(this, arguments);
   };
   Box2D.Collision.b2Simplex = b2Simplex;

   function b2SimplexCache() {
      b2SimplexCache.b2SimplexCache.apply(this, arguments);
   };
   Box2D.Collision.b2SimplexCache = b2SimplexCache;

   function b2SimplexVertex() {
      b2SimplexVertex.b2SimplexVertex.apply(this, arguments);
   };
   Box2D.Collision.b2SimplexVertex = b2SimplexVertex;

   function b2TimeOfImpact() {
      b2TimeOfImpact.b2TimeOfImpact.apply(this, arguments);
   };
   Box2D.Collision.b2TimeOfImpact = b2TimeOfImpact;

   function b2TOIInput() {
      b2TOIInput.b2TOIInput.apply(this, arguments);
   };
   Box2D.Collision.b2TOIInput = b2TOIInput;

   function b2WorldManifold() {
      b2WorldManifold.b2WorldManifold.apply(this, arguments);
      if (this.constructor === b2WorldManifold) this.b2WorldManifold.apply(this, arguments);
   };
   Box2D.Collision.b2WorldManifold = b2WorldManifold;

   function ClipVertex() {
      ClipVertex.ClipVertex.apply(this, arguments);
   };
   Box2D.Collision.ClipVertex = ClipVertex;

   function Features() {
      Features.Features.apply(this, arguments);
   };
   Box2D.Collision.Features = Features;

   function b2CircleShape() {
      b2CircleShape.b2CircleShape.apply(this, arguments);
      if (this.constructor === b2CircleShape) this.b2CircleShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2CircleShape = b2CircleShape;

   function b2EdgeChainDef() {
      b2EdgeChainDef.b2EdgeChainDef.apply(this, arguments);
      if (this.constructor === b2EdgeChainDef) this.b2EdgeChainDef.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2EdgeChainDef = b2EdgeChainDef;

   function b2EdgeShape() {
      b2EdgeShape.b2EdgeShape.apply(this, arguments);
      if (this.constructor === b2EdgeShape) this.b2EdgeShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2EdgeShape = b2EdgeShape;

   function b2MassData() {
      b2MassData.b2MassData.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2MassData = b2MassData;

   function b2PolygonShape() {
      b2PolygonShape.b2PolygonShape.apply(this, arguments);
      if (this.constructor === b2PolygonShape) this.b2PolygonShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2PolygonShape = b2PolygonShape;

   function b2Shape() {
      b2Shape.b2Shape.apply(this, arguments);
      if (this.constructor === b2Shape) this.b2Shape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2Shape = b2Shape;
   Box2D.Common.b2internal = 'Box2D.Common.b2internal';

   function b2Color() {
      b2Color.b2Color.apply(this, arguments);
      if (this.constructor === b2Color) this.b2Color.apply(this, arguments);
   };
   Box2D.Common.b2Color = b2Color;

   function b2Settings() {
      b2Settings.b2Settings.apply(this, arguments);
   };
   Box2D.Common.b2Settings = b2Settings;

   function b2Mat22() {
      b2Mat22.b2Mat22.apply(this, arguments);
      if (this.constructor === b2Mat22) this.b2Mat22.apply(this, arguments);
   };
   Box2D.Common.Math.b2Mat22 = b2Mat22;

   function b2Mat33() {
      b2Mat33.b2Mat33.apply(this, arguments);
      if (this.constructor === b2Mat33) this.b2Mat33.apply(this, arguments);
   };
   Box2D.Common.Math.b2Mat33 = b2Mat33;

   function b2Math() {
      b2Math.b2Math.apply(this, arguments);
   };
   Box2D.Common.Math.b2Math = b2Math;

   function b2Sweep() {
      b2Sweep.b2Sweep.apply(this, arguments);
   };
   Box2D.Common.Math.b2Sweep = b2Sweep;

   function b2Transform() {
      b2Transform.b2Transform.apply(this, arguments);
      if (this.constructor === b2Transform) this.b2Transform.apply(this, arguments);
   };
   Box2D.Common.Math.b2Transform = b2Transform;

   function b2Vec2() {
      b2Vec2.b2Vec2.apply(this, arguments);
      if (this.constructor === b2Vec2) this.b2Vec2.apply(this, arguments);
   };
   Box2D.Common.Math.b2Vec2 = b2Vec2;

   function b2Vec3() {
      b2Vec3.b2Vec3.apply(this, arguments);
      if (this.constructor === b2Vec3) this.b2Vec3.apply(this, arguments);
   };
   Box2D.Common.Math.b2Vec3 = b2Vec3;

   function b2Body() {
      b2Body.b2Body.apply(this, arguments);
      if (this.constructor === b2Body) this.b2Body.apply(this, arguments);
   };
   Box2D.Dynamics.b2Body = b2Body;

   function b2BodyDef() {
      b2BodyDef.b2BodyDef.apply(this, arguments);
      if (this.constructor === b2BodyDef) this.b2BodyDef.apply(this, arguments);
   };
   Box2D.Dynamics.b2BodyDef = b2BodyDef;

   function b2ContactFilter() {
      b2ContactFilter.b2ContactFilter.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactFilter = b2ContactFilter;

   function b2ContactImpulse() {
      b2ContactImpulse.b2ContactImpulse.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactImpulse = b2ContactImpulse;

   function b2ContactListener() {
      b2ContactListener.b2ContactListener.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactListener = b2ContactListener;

   function b2ContactManager() {
      b2ContactManager.b2ContactManager.apply(this, arguments);
      if (this.constructor === b2ContactManager) this.b2ContactManager.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactManager = b2ContactManager;

   function b2DebugDraw() {
      b2DebugDraw.b2DebugDraw.apply(this, arguments);
      if (this.constructor === b2DebugDraw) this.b2DebugDraw.apply(this, arguments);
   };
   Box2D.Dynamics.b2DebugDraw = b2DebugDraw;

   function b2DestructionListener() {
      b2DestructionListener.b2DestructionListener.apply(this, arguments);
   };
   Box2D.Dynamics.b2DestructionListener = b2DestructionListener;

   function b2FilterData() {
      b2FilterData.b2FilterData.apply(this, arguments);
   };
   Box2D.Dynamics.b2FilterData = b2FilterData;

   function b2Fixture() {
      b2Fixture.b2Fixture.apply(this, arguments);
      if (this.constructor === b2Fixture) this.b2Fixture.apply(this, arguments);
   };
   Box2D.Dynamics.b2Fixture = b2Fixture;

   function b2FixtureDef() {
      b2FixtureDef.b2FixtureDef.apply(this, arguments);
      if (this.constructor === b2FixtureDef) this.b2FixtureDef.apply(this, arguments);
   };
   Box2D.Dynamics.b2FixtureDef = b2FixtureDef;

   function b2Island() {
      b2Island.b2Island.apply(this, arguments);
      if (this.constructor === b2Island) this.b2Island.apply(this, arguments);
   };
   Box2D.Dynamics.b2Island = b2Island;

   function b2TimeStep() {
      b2TimeStep.b2TimeStep.apply(this, arguments);
   };
   Box2D.Dynamics.b2TimeStep = b2TimeStep;

   function b2World() {
      b2World.b2World.apply(this, arguments);
      if (this.constructor === b2World) this.b2World.apply(this, arguments);
   };
   Box2D.Dynamics.b2World = b2World;

   function b2CircleContact() {
      b2CircleContact.b2CircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2CircleContact = b2CircleContact;

   function b2Contact() {
      b2Contact.b2Contact.apply(this, arguments);
      if (this.constructor === b2Contact) this.b2Contact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2Contact = b2Contact;

   function b2ContactConstraint() {
      b2ContactConstraint.b2ContactConstraint.apply(this, arguments);
      if (this.constructor === b2ContactConstraint) this.b2ContactConstraint.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactConstraint = b2ContactConstraint;

   function b2ContactConstraintPoint() {
      b2ContactConstraintPoint.b2ContactConstraintPoint.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactConstraintPoint = b2ContactConstraintPoint;

   function b2ContactEdge() {
      b2ContactEdge.b2ContactEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactEdge = b2ContactEdge;

   function b2ContactFactory() {
      b2ContactFactory.b2ContactFactory.apply(this, arguments);
      if (this.constructor === b2ContactFactory) this.b2ContactFactory.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactFactory = b2ContactFactory;

   function b2ContactRegister() {
      b2ContactRegister.b2ContactRegister.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactRegister = b2ContactRegister;

   function b2ContactResult() {
      b2ContactResult.b2ContactResult.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactResult = b2ContactResult;

   function b2ContactSolver() {
      b2ContactSolver.b2ContactSolver.apply(this, arguments);
      if (this.constructor === b2ContactSolver) this.b2ContactSolver.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactSolver = b2ContactSolver;

   function b2EdgeAndCircleContact() {
      b2EdgeAndCircleContact.b2EdgeAndCircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = b2EdgeAndCircleContact;

   function b2NullContact() {
      b2NullContact.b2NullContact.apply(this, arguments);
      if (this.constructor === b2NullContact) this.b2NullContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2NullContact = b2NullContact;

   function b2PolyAndCircleContact() {
      b2PolyAndCircleContact.b2PolyAndCircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolyAndCircleContact = b2PolyAndCircleContact;

   function b2PolyAndEdgeContact() {
      b2PolyAndEdgeContact.b2PolyAndEdgeContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = b2PolyAndEdgeContact;

   function b2PolygonContact() {
      b2PolygonContact.b2PolygonContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolygonContact = b2PolygonContact;

   function b2PositionSolverManifold() {
      b2PositionSolverManifold.b2PositionSolverManifold.apply(this, arguments);
      if (this.constructor === b2PositionSolverManifold) this.b2PositionSolverManifold.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PositionSolverManifold = b2PositionSolverManifold;

   function b2BuoyancyController() {
      b2BuoyancyController.b2BuoyancyController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2BuoyancyController = b2BuoyancyController;

   function b2ConstantAccelController() {
      b2ConstantAccelController.b2ConstantAccelController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ConstantAccelController = b2ConstantAccelController;

   function b2ConstantForceController() {
      b2ConstantForceController.b2ConstantForceController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ConstantForceController = b2ConstantForceController;

   function b2Controller() {
      b2Controller.b2Controller.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2Controller = b2Controller;

   function b2ControllerEdge() {
      b2ControllerEdge.b2ControllerEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ControllerEdge = b2ControllerEdge;

   function b2GravityController() {
      b2GravityController.b2GravityController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2GravityController = b2GravityController;

   function b2TensorDampingController() {
      b2TensorDampingController.b2TensorDampingController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2TensorDampingController = b2TensorDampingController;

   function b2DistanceJoint() {
      b2DistanceJoint.b2DistanceJoint.apply(this, arguments);
      if (this.constructor === b2DistanceJoint) this.b2DistanceJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2DistanceJoint = b2DistanceJoint;

   function b2DistanceJointDef() {
      b2DistanceJointDef.b2DistanceJointDef.apply(this, arguments);
      if (this.constructor === b2DistanceJointDef) this.b2DistanceJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2DistanceJointDef = b2DistanceJointDef;

   function b2FrictionJoint() {
      b2FrictionJoint.b2FrictionJoint.apply(this, arguments);
      if (this.constructor === b2FrictionJoint) this.b2FrictionJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2FrictionJoint = b2FrictionJoint;

   function b2FrictionJointDef() {
      b2FrictionJointDef.b2FrictionJointDef.apply(this, arguments);
      if (this.constructor === b2FrictionJointDef) this.b2FrictionJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2FrictionJointDef = b2FrictionJointDef;

   function b2GearJoint() {
      b2GearJoint.b2GearJoint.apply(this, arguments);
      if (this.constructor === b2GearJoint) this.b2GearJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2GearJoint = b2GearJoint;

   function b2GearJointDef() {
      b2GearJointDef.b2GearJointDef.apply(this, arguments);
      if (this.constructor === b2GearJointDef) this.b2GearJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2GearJointDef = b2GearJointDef;

   function b2Jacobian() {
      b2Jacobian.b2Jacobian.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2Jacobian = b2Jacobian;

   function b2Joint() {
      b2Joint.b2Joint.apply(this, arguments);
      if (this.constructor === b2Joint) this.b2Joint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2Joint = b2Joint;

   function b2JointDef() {
      b2JointDef.b2JointDef.apply(this, arguments);
      if (this.constructor === b2JointDef) this.b2JointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2JointDef = b2JointDef;

   function b2JointEdge() {
      b2JointEdge.b2JointEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2JointEdge = b2JointEdge;

   function b2LineJoint() {
      b2LineJoint.b2LineJoint.apply(this, arguments);
      if (this.constructor === b2LineJoint) this.b2LineJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2LineJoint = b2LineJoint;

   function b2LineJointDef() {
      b2LineJointDef.b2LineJointDef.apply(this, arguments);
      if (this.constructor === b2LineJointDef) this.b2LineJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2LineJointDef = b2LineJointDef;

   function b2MouseJoint() {
      b2MouseJoint.b2MouseJoint.apply(this, arguments);
      if (this.constructor === b2MouseJoint) this.b2MouseJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2MouseJoint = b2MouseJoint;

   function b2MouseJointDef() {
      b2MouseJointDef.b2MouseJointDef.apply(this, arguments);
      if (this.constructor === b2MouseJointDef) this.b2MouseJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2MouseJointDef = b2MouseJointDef;

   function b2PrismaticJoint() {
      b2PrismaticJoint.b2PrismaticJoint.apply(this, arguments);
      if (this.constructor === b2PrismaticJoint) this.b2PrismaticJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PrismaticJoint = b2PrismaticJoint;

   function b2PrismaticJointDef() {
      b2PrismaticJointDef.b2PrismaticJointDef.apply(this, arguments);
      if (this.constructor === b2PrismaticJointDef) this.b2PrismaticJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PrismaticJointDef = b2PrismaticJointDef;

   function b2PulleyJoint() {
      b2PulleyJoint.b2PulleyJoint.apply(this, arguments);
      if (this.constructor === b2PulleyJoint) this.b2PulleyJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PulleyJoint = b2PulleyJoint;

   function b2PulleyJointDef() {
      b2PulleyJointDef.b2PulleyJointDef.apply(this, arguments);
      if (this.constructor === b2PulleyJointDef) this.b2PulleyJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PulleyJointDef = b2PulleyJointDef;

   function b2RevoluteJoint() {
      b2RevoluteJoint.b2RevoluteJoint.apply(this, arguments);
      if (this.constructor === b2RevoluteJoint) this.b2RevoluteJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2RevoluteJoint = b2RevoluteJoint;

   function b2RevoluteJointDef() {
      b2RevoluteJointDef.b2RevoluteJointDef.apply(this, arguments);
      if (this.constructor === b2RevoluteJointDef) this.b2RevoluteJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2RevoluteJointDef = b2RevoluteJointDef;

   function b2WeldJoint() {
      b2WeldJoint.b2WeldJoint.apply(this, arguments);
      if (this.constructor === b2WeldJoint) this.b2WeldJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2WeldJoint = b2WeldJoint;

   function b2WeldJointDef() {
      b2WeldJointDef.b2WeldJointDef.apply(this, arguments);
      if (this.constructor === b2WeldJointDef) this.b2WeldJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2WeldJointDef = b2WeldJointDef;
})(); //definitions
Box2D.postDefs = [];
(function () {
   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   b2AABB.b2AABB = function () {
      this.lowerBound = new b2Vec2();
      this.upperBound = new b2Vec2();
   };
   b2AABB.prototype.IsValid = function () {
      var dX = this.upperBound.x - this.lowerBound.x;
      var dY = this.upperBound.y - this.lowerBound.y;
      var valid = dX >= 0.0 && dY >= 0.0;
      valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();
      return valid;
   };
   b2AABB.prototype.GetCenter = function () {
      return new b2Vec2((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);
   };
   b2AABB.prototype.GetExtents = function () {
      return new b2Vec2((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);
   };
   b2AABB.prototype.Contains = function (aabb) {
      var result = true;
      result = result && this.lowerBound.x <= aabb.lowerBound.x;
      result = result && this.lowerBound.y <= aabb.lowerBound.y;
      result = result && aabb.upperBound.x <= this.upperBound.x;
      result = result && aabb.upperBound.y <= this.upperBound.y;
      return result;
   };
   b2AABB.prototype.RayCast = function (output, input) {
      var tmin = (-Number.MAX_VALUE);
      var tmax = Number.MAX_VALUE;
      var pX = input.p1.x;
      var pY = input.p1.y;
      var dX = input.p2.x - input.p1.x;
      var dY = input.p2.y - input.p1.y;
      var absDX = Math.abs(dX);
      var absDY = Math.abs(dY);
      var normal = output.normal;
      var inv_d = 0;
      var t1 = 0;
      var t2 = 0;
      var t3 = 0;
      var s = 0; {
         if (absDX < Number.MIN_VALUE) {
            if (pX < this.lowerBound.x || this.upperBound.x < pX) return false;
         }
         else {
            inv_d = 1.0 / dX;
            t1 = (this.lowerBound.x - pX) * inv_d;
            t2 = (this.upperBound.x - pX) * inv_d;
            s = (-1.0);
            if (t1 > t2) {
               t3 = t1;
               t1 = t2;
               t2 = t3;
               s = 1.0;
            }
            if (t1 > tmin) {
               normal.x = s;
               normal.y = 0;
               tmin = t1;
            }
            tmax = Math.min(tmax, t2);
            if (tmin > tmax) return false;
         }
      } {
         if (absDY < Number.MIN_VALUE) {
            if (pY < this.lowerBound.y || this.upperBound.y < pY) return false;
         }
         else {
            inv_d = 1.0 / dY;
            t1 = (this.lowerBound.y - pY) * inv_d;
            t2 = (this.upperBound.y - pY) * inv_d;
            s = (-1.0);
            if (t1 > t2) {
               t3 = t1;
               t1 = t2;
               t2 = t3;
               s = 1.0;
            }
            if (t1 > tmin) {
               normal.y = s;
               normal.x = 0;
               tmin = t1;
            }
            tmax = Math.min(tmax, t2);
            if (tmin > tmax) return false;
         }
      }
      output.fraction = tmin;
      return true;
   };
   b2AABB.prototype.TestOverlap = function (other) {
      var d1X = other.lowerBound.x - this.upperBound.x;
      var d1Y = other.lowerBound.y - this.upperBound.y;
      var d2X = this.lowerBound.x - other.upperBound.x;
      var d2Y = this.lowerBound.y - other.upperBound.y;
      if (d1X > 0.0 || d1Y > 0.0) return false;
      if (d2X > 0.0 || d2Y > 0.0) return false;
      return true;
   };
   b2AABB.Combine = function (aabb1, aabb2) {
      var aabb = new b2AABB();
      aabb.Combine(aabb1, aabb2);
      return aabb;
   };
   b2AABB.prototype.Combine = function (aabb1, aabb2) {
      this.lowerBound.x = Math.min(aabb1.lowerBound.x, aabb2.lowerBound.x);
      this.lowerBound.y = Math.min(aabb1.lowerBound.y, aabb2.lowerBound.y);
      this.upperBound.x = Math.max(aabb1.upperBound.x, aabb2.upperBound.x);
      this.upperBound.y = Math.max(aabb1.upperBound.y, aabb2.upperBound.y);
   };
   b2Bound.b2Bound = function () {};
   b2Bound.prototype.IsLower = function () {
      return (this.value & 1) == 0;
   };
   b2Bound.prototype.IsUpper = function () {
      return (this.value & 1) == 1;
   };
   b2Bound.prototype.Swap = function (b) {
      var tempValue = this.value;
      var tempProxy = this.proxy;
      var tempStabbingCount = this.stabbingCount;
      this.value = b.value;
      this.proxy = b.proxy;
      this.stabbingCount = b.stabbingCount;
      b.value = tempValue;
      b.proxy = tempProxy;
      b.stabbingCount = tempStabbingCount;
   };
   b2BoundValues.b2BoundValues = function () {};
   b2BoundValues.prototype.b2BoundValues = function () {
      this.lowerValues = new Vector_a2j_Number();
      this.lowerValues[0] = 0.0;
      this.lowerValues[1] = 0.0;
      this.upperValues = new Vector_a2j_Number();
      this.upperValues[0] = 0.0;
      this.upperValues[1] = 0.0;
   };
   b2Collision.b2Collision = function () {};
   b2Collision.ClipSegmentToLine = function (vOut, vIn, normal, offset) {
      if (offset === undefined) offset = 0;
      var cv;
      var numOut = 0;
      cv = vIn[0];
      var vIn0 = cv.v;
      cv = vIn[1];
      var vIn1 = cv.v;
      var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;
      var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;
      if (distance0 <= 0.0) vOut[numOut++].Set(vIn[0]);
      if (distance1 <= 0.0) vOut[numOut++].Set(vIn[1]);
      if (distance0 * distance1 < 0.0) {
         var interp = distance0 / (distance0 - distance1);
         cv = vOut[numOut];
         var tVec = cv.v;
         tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);
         tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);
         cv = vOut[numOut];
         var cv2;
         if (distance0 > 0.0) {
            cv2 = vIn[0];
            cv.id = cv2.id;
         }
         else {
            cv2 = vIn[1];
            cv.id = cv2.id;
         }++numOut;
      }
      return numOut;
   };
   b2Collision.EdgeSeparation = function (poly1, xf1, edge1, poly2, xf2) {
      if (edge1 === undefined) edge1 = 0;
      var count1 = parseInt(poly1.m_vertexCount);
      var vertices1 = poly1.m_vertices;
      var normals1 = poly1.m_normals;
      var count2 = parseInt(poly2.m_vertexCount);
      var vertices2 = poly2.m_vertices;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = normals1[edge1];
      var normal1WorldX = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var normal1WorldY = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      var normal1X = (tMat.col1.x * normal1WorldX + tMat.col1.y * normal1WorldY);
      var normal1Y = (tMat.col2.x * normal1WorldX + tMat.col2.y * normal1WorldY);
      var index = 0;
      var minDot = Number.MAX_VALUE;
      for (var i = 0; i < count2; ++i) {
         tVec = vertices2[i];
         var dot = tVec.x * normal1X + tVec.y * normal1Y;
         if (dot < minDot) {
            minDot = dot;
            index = i;
         }
      }
      tVec = vertices1[edge1];
      tMat = xf1.R;
      var v1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var v1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tVec = vertices2[index];
      tMat = xf2.R;
      var v2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var v2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      v2X -= v1X;
      v2Y -= v1Y;
      var separation = v2X * normal1WorldX + v2Y * normal1WorldY;
      return separation;
   };
   b2Collision.FindMaxSeparation = function (edgeIndex, poly1, xf1, poly2, xf2) {
      var count1 = parseInt(poly1.m_vertexCount);
      var normals1 = poly1.m_normals;
      var tVec;
      var tMat;
      tMat = xf2.R;
      tVec = poly2.m_centroid;
      var dX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var dY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf1.R;
      tVec = poly1.m_centroid;
      dX -= xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      dY -= xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var dLocal1X = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);
      var dLocal1Y = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);
      var edge = 0;
      var maxDot = (-Number.MAX_VALUE);
      for (var i = 0; i < count1; ++i) {
         tVec = normals1[i];
         var dot = (tVec.x * dLocal1X + tVec.y * dLocal1Y);
         if (dot > maxDot) {
            maxDot = dot;
            edge = i;
         }
      }
      var s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
      var prevEdge = parseInt(edge - 1 >= 0 ? edge - 1 : count1 - 1);
      var sPrev = b2Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);
      var nextEdge = parseInt(edge + 1 < count1 ? edge + 1 : 0);
      var sNext = b2Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);
      var bestEdge = 0;
      var bestSeparation = 0;
      var increment = 0;
      if (sPrev > s && sPrev > sNext) {
         increment = (-1);
         bestEdge = prevEdge;
         bestSeparation = sPrev;
      }
      else if (sNext > s) {
         increment = 1;
         bestEdge = nextEdge;
         bestSeparation = sNext;
      }
      else {
         edgeIndex[0] = edge;
         return s;
      }
      while (true) {
         if (increment == (-1)) edge = bestEdge - 1 >= 0 ? bestEdge - 1 : count1 - 1;
         else edge = bestEdge + 1 < count1 ? bestEdge + 1 : 0;s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
         if (s > bestSeparation) {
            bestEdge = edge;
            bestSeparation = s;
         }
         else {
            break;
         }
      }
      edgeIndex[0] = bestEdge;
      return bestSeparation;
   };
   b2Collision.FindIncidentEdge = function (c, poly1, xf1, edge1, poly2, xf2) {
      if (edge1 === undefined) edge1 = 0;
      var count1 = parseInt(poly1.m_vertexCount);
      var normals1 = poly1.m_normals;
      var count2 = parseInt(poly2.m_vertexCount);
      var vertices2 = poly2.m_vertices;
      var normals2 = poly2.m_normals;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = normals1[edge1];
      var normal1X = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var normal1Y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      var tX = (tMat.col1.x * normal1X + tMat.col1.y * normal1Y);
      normal1Y = (tMat.col2.x * normal1X + tMat.col2.y * normal1Y);
      normal1X = tX;
      var index = 0;
      var minDot = Number.MAX_VALUE;
      for (var i = 0; i < count2; ++i) {
         tVec = normals2[i];
         var dot = (normal1X * tVec.x + normal1Y * tVec.y);
         if (dot < minDot) {
            minDot = dot;
            index = i;
         }
      }
      var tClip;
      var i1 = parseInt(index);
      var i2 = parseInt(i1 + 1 < count2 ? i1 + 1 : 0);
      tClip = c[0];
      tVec = vertices2[i1];
      tMat = xf2.R;
      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tClip.id.features.referenceEdge = edge1;
      tClip.id.features.incidentEdge = i1;
      tClip.id.features.incidentVertex = 0;
      tClip = c[1];
      tVec = vertices2[i2];
      tMat = xf2.R;
      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tClip.id.features.referenceEdge = edge1;
      tClip.id.features.incidentEdge = i2;
      tClip.id.features.incidentVertex = 1;
   };
   b2Collision.MakeClipPointVector = function () {
      var r = new Vector(2);
      r[0] = new ClipVertex();
      r[1] = new ClipVertex();
      return r;
   };
   b2Collision.CollidePolygons = function (manifold, polyA, xfA, polyB, xfB) {
      var cv;
      manifold.m_pointCount = 0;
      var totalRadius = polyA.m_radius + polyB.m_radius;
      var edgeA = 0;
      b2Collision.s_edgeAO[0] = edgeA;
      var separationA = b2Collision.FindMaxSeparation(b2Collision.s_edgeAO, polyA, xfA, polyB, xfB);
      edgeA = b2Collision.s_edgeAO[0];
      if (separationA > totalRadius) return;
      var edgeB = 0;
      b2Collision.s_edgeBO[0] = edgeB;
      var separationB = b2Collision.FindMaxSeparation(b2Collision.s_edgeBO, polyB, xfB, polyA, xfA);
      edgeB = b2Collision.s_edgeBO[0];
      if (separationB > totalRadius) return;
      var poly1;
      var poly2;
      var xf1;
      var xf2;
      var edge1 = 0;
      var flip = 0;
      var k_relativeTol = 0.98;
      var k_absoluteTol = 0.001;
      var tMat;
      if (separationB > k_relativeTol * separationA + k_absoluteTol) {
         poly1 = polyB;
         poly2 = polyA;
         xf1 = xfB;
         xf2 = xfA;
         edge1 = edgeB;
         manifold.m_type = b2Manifold.e_faceB;
         flip = 1;
      }
      else {
         poly1 = polyA;
         poly2 = polyB;
         xf1 = xfA;
         xf2 = xfB;
         edge1 = edgeA;
         manifold.m_type = b2Manifold.e_faceA;
         flip = 0;
      }
      var incidentEdge = b2Collision.s_incidentEdge;
      b2Collision.FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);
      var count1 = parseInt(poly1.m_vertexCount);
      var vertices1 = poly1.m_vertices;
      var local_v11 = vertices1[edge1];
      var local_v12;
      if (edge1 + 1 < count1) {
         local_v12 = vertices1[parseInt(edge1 + 1)];
      }
      else {
         local_v12 = vertices1[0];
      }
      var localTangent = b2Collision.s_localTangent;
      localTangent.Set(local_v12.x - local_v11.x, local_v12.y - local_v11.y);
      localTangent.Normalize();
      var localNormal = b2Collision.s_localNormal;
      localNormal.x = localTangent.y;
      localNormal.y = (-localTangent.x);
      var planePoint = b2Collision.s_planePoint;
      planePoint.Set(0.5 * (local_v11.x + local_v12.x), 0.5 * (local_v11.y + local_v12.y));
      var tangent = b2Collision.s_tangent;
      tMat = xf1.R;
      tangent.x = (tMat.col1.x * localTangent.x + tMat.col2.x * localTangent.y);
      tangent.y = (tMat.col1.y * localTangent.x + tMat.col2.y * localTangent.y);
      var tangent2 = b2Collision.s_tangent2;
      tangent2.x = (-tangent.x);
      tangent2.y = (-tangent.y);
      var normal = b2Collision.s_normal;
      normal.x = tangent.y;
      normal.y = (-tangent.x);
      var v11 = b2Collision.s_v11;
      var v12 = b2Collision.s_v12;
      v11.x = xf1.position.x + (tMat.col1.x * local_v11.x + tMat.col2.x * local_v11.y);
      v11.y = xf1.position.y + (tMat.col1.y * local_v11.x + tMat.col2.y * local_v11.y);
      v12.x = xf1.position.x + (tMat.col1.x * local_v12.x + tMat.col2.x * local_v12.y);
      v12.y = xf1.position.y + (tMat.col1.y * local_v12.x + tMat.col2.y * local_v12.y);
      var frontOffset = normal.x * v11.x + normal.y * v11.y;
      var sideOffset1 = (-tangent.x * v11.x) - tangent.y * v11.y + totalRadius;
      var sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius;
      var clipPoints1 = b2Collision.s_clipPoints1;
      var clipPoints2 = b2Collision.s_clipPoints2;
      var np = 0;
      np = b2Collision.ClipSegmentToLine(clipPoints1, incidentEdge, tangent2, sideOffset1);
      if (np < 2) return;
      np = b2Collision.ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2);
      if (np < 2) return;
      manifold.m_localPlaneNormal.SetV(localNormal);
      manifold.m_localPoint.SetV(planePoint);
      var pointCount = 0;
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; ++i) {
         cv = clipPoints2[i];
         var separation = normal.x * cv.v.x + normal.y * cv.v.y - frontOffset;
         if (separation <= totalRadius) {
            var cp = manifold.m_points[pointCount];
            tMat = xf2.R;
            var tX = cv.v.x - xf2.position.x;
            var tY = cv.v.y - xf2.position.y;
            cp.m_localPoint.x = (tX * tMat.col1.x + tY * tMat.col1.y);
            cp.m_localPoint.y = (tX * tMat.col2.x + tY * tMat.col2.y);
            cp.m_id.Set(cv.id);
            cp.m_id.features.flip = flip;
            ++pointCount;
         }
      }
      manifold.m_pointCount = pointCount;
   };
   b2Collision.CollideCircles = function (manifold, circle1, xf1, circle2, xf2) {
      manifold.m_pointCount = 0;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = circle1.m_p;
      var p1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var p1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      tVec = circle2.m_p;
      var p2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var p2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var distSqr = dX * dX + dY * dY;
      var radius = circle1.m_radius + circle2.m_radius;
      if (distSqr > radius * radius) {
         return;
      }
      manifold.m_type = b2Manifold.e_circles;
      manifold.m_localPoint.SetV(circle1.m_p);
      manifold.m_localPlaneNormal.SetZero();
      manifold.m_pointCount = 1;
      manifold.m_points[0].m_localPoint.SetV(circle2.m_p);
      manifold.m_points[0].m_id.key = 0;
   };
   b2Collision.CollidePolygonAndCircle = function (manifold, polygon, xf1, circle, xf2) {
      manifold.m_pointCount = 0;
      var tPoint;
      var dX = 0;
      var dY = 0;
      var positionX = 0;
      var positionY = 0;
      var tVec;
      var tMat;
      tMat = xf2.R;
      tVec = circle.m_p;
      var cX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var cY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      dX = cX - xf1.position.x;
      dY = cY - xf1.position.y;
      tMat = xf1.R;
      var cLocalX = (dX * tMat.col1.x + dY * tMat.col1.y);
      var cLocalY = (dX * tMat.col2.x + dY * tMat.col2.y);
      var dist = 0;
      var normalIndex = 0;
      var separation = (-Number.MAX_VALUE);
      var radius = polygon.m_radius + circle.m_radius;
      var vertexCount = parseInt(polygon.m_vertexCount);
      var vertices = polygon.m_vertices;
      var normals = polygon.m_normals;
      for (var i = 0; i < vertexCount; ++i) {
         tVec = vertices[i];
         dX = cLocalX - tVec.x;
         dY = cLocalY - tVec.y;
         tVec = normals[i];
         var s = tVec.x * dX + tVec.y * dY;
         if (s > radius) {
            return;
         }
         if (s > separation) {
            separation = s;
            normalIndex = i;
         }
      }
      var vertIndex1 = parseInt(normalIndex);
      var vertIndex2 = parseInt(vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0);
      var v1 = vertices[vertIndex1];
      var v2 = vertices[vertIndex2];
      if (separation < Number.MIN_VALUE) {
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.SetV(normals[normalIndex]);
         manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);
         manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
         return;
      }
      var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);
      var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);
      if (u1 <= 0.0) {
         if ((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = cLocalX - v1.x;
         manifold.m_localPlaneNormal.y = cLocalY - v1.y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.SetV(v1);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
      else if (u2 <= 0) {
         if ((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = cLocalX - v2.x;
         manifold.m_localPlaneNormal.y = cLocalY - v2.y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.SetV(v2);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
      else {
         var faceCenterX = 0.5 * (v1.x + v2.x);
         var faceCenterY = 0.5 * (v1.y + v2.y);
         separation = (cLocalX - faceCenterX) * normals[vertIndex1].x + (cLocalY - faceCenterY) * normals[vertIndex1].y;
         if (separation > radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = normals[vertIndex1].x;
         manifold.m_localPlaneNormal.y = normals[vertIndex1].y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.Set(faceCenterX, faceCenterY);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
   };
   b2Collision.TestOverlap = function (a, b) {
      var t1 = b.lowerBound;
      var t2 = a.upperBound;
      var d1X = t1.x - t2.x;
      var d1Y = t1.y - t2.y;
      t1 = a.lowerBound;
      t2 = b.upperBound;
      var d2X = t1.x - t2.x;
      var d2Y = t1.y - t2.y;
      if (d1X > 0.0 || d1Y > 0.0) return false;
      if (d2X > 0.0 || d2Y > 0.0) return false;
      return true;
   };
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Collision.s_incidentEdge = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints1 = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints2 = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_edgeAO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_edgeBO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_localTangent = new b2Vec2();
      Box2D.Collision.b2Collision.s_localNormal = new b2Vec2();
      Box2D.Collision.b2Collision.s_planePoint = new b2Vec2();
      Box2D.Collision.b2Collision.s_normal = new b2Vec2();
      Box2D.Collision.b2Collision.s_tangent = new b2Vec2();
      Box2D.Collision.b2Collision.s_tangent2 = new b2Vec2();
      Box2D.Collision.b2Collision.s_v11 = new b2Vec2();
      Box2D.Collision.b2Collision.s_v12 = new b2Vec2();
      Box2D.Collision.b2Collision.b2CollidePolyTempVec = new b2Vec2();
      Box2D.Collision.b2Collision.b2_nullFeature = 0x000000ff;
   });
   b2ContactID.b2ContactID = function () {
      this.features = new Features();
   };
   b2ContactID.prototype.b2ContactID = function () {
      this.features._m_id = this;
   };
   b2ContactID.prototype.Set = function (id) {
      this.key = id._key;
   };
   b2ContactID.prototype.Copy = function () {
      var id = new b2ContactID();
      id.key = this.key;
      return id;
   };
   Object.defineProperty(b2ContactID.prototype, 'key', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._key;
      }
   });
   Object.defineProperty(b2ContactID.prototype, 'key', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._key = value;
         this.features._referenceEdge = this._key & 0x000000ff;
         this.features._incidentEdge = ((this._key & 0x0000ff00) >> 8) & 0x000000ff;
         this.features._incidentVertex = ((this._key & 0x00ff0000) >> 16) & 0x000000ff;
         this.features._flip = ((this._key & 0xff000000) >> 24) & 0x000000ff;
      }
   });
   b2ContactPoint.b2ContactPoint = function () {
      this.position = new b2Vec2();
      this.velocity = new b2Vec2();
      this.normal = new b2Vec2();
      this.id = new b2ContactID();
   };
   b2Distance.b2Distance = function () {};
   b2Distance.Distance = function (output, cache, input) {
      ++b2Distance.b2_gjkCalls;
      var proxyA = input.proxyA;
      var proxyB = input.proxyB;
      var transformA = input.transformA;
      var transformB = input.transformB;
      var simplex = b2Distance.s_simplex;
      simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);
      var vertices = simplex.m_vertices;
      var k_maxIters = 20;
      var saveA = b2Distance.s_saveA;
      var saveB = b2Distance.s_saveB;
      var saveCount = 0;
      var closestPoint = simplex.GetClosestPoint();
      var distanceSqr1 = closestPoint.LengthSquared();
      var distanceSqr2 = distanceSqr1;
      var i = 0;
      var p;
      var iter = 0;
      while (iter < k_maxIters) {
         saveCount = simplex.m_count;
         for (i = 0;
         i < saveCount; i++) {
            saveA[i] = vertices[i].indexA;
            saveB[i] = vertices[i].indexB;
         }
         switch (simplex.m_count) {
         case 1:
            break;
         case 2:
            simplex.Solve2();
            break;
         case 3:
            simplex.Solve3();
            break;
         default:
            b2Settings.b2Assert(false);
         }
         if (simplex.m_count == 3) {
            break;
         }
         p = simplex.GetClosestPoint();
         distanceSqr2 = p.LengthSquared();
         if (distanceSqr2 > distanceSqr1) {}
         distanceSqr1 = distanceSqr2;
         var d = simplex.GetSearchDirection();
         if (d.LengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) {
            break;
         }
         var vertex = vertices[simplex.m_count];
         vertex.indexA = proxyA.GetSupport(b2Math.MulTMV(transformA.R, d.GetNegative()));
         vertex.wA = b2Math.MulX(transformA, proxyA.GetVertex(vertex.indexA));
         vertex.indexB = proxyB.GetSupport(b2Math.MulTMV(transformB.R, d));
         vertex.wB = b2Math.MulX(transformB, proxyB.GetVertex(vertex.indexB));
         vertex.w = b2Math.SubtractVV(vertex.wB, vertex.wA);
         ++iter;
         ++b2Distance.b2_gjkIters;
         var duplicate = false;
         for (i = 0;
         i < saveCount; i++) {
            if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {
               duplicate = true;
               break;
            }
         }
         if (duplicate) {
            break;
         }++simplex.m_count;
      }
      b2Distance.b2_gjkMaxIters = b2Math.Max(b2Distance.b2_gjkMaxIters, iter);
      simplex.GetWitnessPoints(output.pointA, output.pointB);
      output.distance = b2Math.SubtractVV(output.pointA, output.pointB).Length();
      output.iterations = iter;
      simplex.WriteCache(cache);
      if (input.useRadii) {
         var rA = proxyA.m_radius;
         var rB = proxyB.m_radius;
         if (output.distance > rA + rB && output.distance > Number.MIN_VALUE) {
            output.distance -= rA + rB;
            var normal = b2Math.SubtractVV(output.pointB, output.pointA);
            normal.Normalize();
            output.pointA.x += rA * normal.x;
            output.pointA.y += rA * normal.y;
            output.pointB.x -= rB * normal.x;
            output.pointB.y -= rB * normal.y;
         }
         else {
            p = new b2Vec2();
            p.x = .5 * (output.pointA.x + output.pointB.x);
            p.y = .5 * (output.pointA.y + output.pointB.y);
            output.pointA.x = output.pointB.x = p.x;
            output.pointA.y = output.pointB.y = p.y;
            output.distance = 0.0;
         }
      }
   };
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Distance.s_simplex = new b2Simplex();
      Box2D.Collision.b2Distance.s_saveA = new Vector_a2j_Number(3);
      Box2D.Collision.b2Distance.s_saveB = new Vector_a2j_Number(3);
   });
   b2DistanceInput.b2DistanceInput = function () {};
   b2DistanceOutput.b2DistanceOutput = function () {
      this.pointA = new b2Vec2();
      this.pointB = new b2Vec2();
   };
   b2DistanceProxy.b2DistanceProxy = function () {};
   b2DistanceProxy.prototype.Set = function (shape) {
      switch (shape.GetType()) {
      case b2Shape.e_circleShape:
         {
            var circle = (shape instanceof b2CircleShape ? shape : null);
            this.m_vertices = new Vector(1, true);
            this.m_vertices[0] = circle.m_p;
            this.m_count = 1;
            this.m_radius = circle.m_radius;
         }
         break;
      case b2Shape.e_polygonShape:
         {
            var polygon = (shape instanceof b2PolygonShape ? shape : null);
            this.m_vertices = polygon.m_vertices;
            this.m_count = polygon.m_vertexCount;
            this.m_radius = polygon.m_radius;
         }
         break;
      default:
         b2Settings.b2Assert(false);
      }
   };
   b2DistanceProxy.prototype.GetSupport = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_count; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return bestIndex;
   };
   b2DistanceProxy.prototype.GetSupportVertex = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_count; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return this.m_vertices[bestIndex];
   };
   b2DistanceProxy.prototype.GetVertexCount = function () {
      return this.m_count;
   };
   b2DistanceProxy.prototype.GetVertex = function (index) {
      if (index === undefined) index = 0;
      b2Settings.b2Assert(0 <= index && index < this.m_count);
      return this.m_vertices[index];
   };
   b2DynamicTree.b2DynamicTree = function () {};
   b2DynamicTree.prototype.b2DynamicTree = function () {
      this.m_root = null;
      this.m_freeList = null;
      this.m_path = 0;
      this.m_insertionCount = 0;
   };
   b2DynamicTree.prototype.CreateProxy = function (aabb, userData) {
      var node = this.AllocateNode();
      var extendX = b2Settings.b2_aabbExtension;
      var extendY = b2Settings.b2_aabbExtension;
      node.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
      node.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
      node.aabb.upperBound.x = aabb.upperBound.x + extendX;
      node.aabb.upperBound.y = aabb.upperBound.y + extendY;
      node.userData = userData;
      this.InsertLeaf(node);
      return node;
   };
   b2DynamicTree.prototype.DestroyProxy = function (proxy) {
      this.RemoveLeaf(proxy);
      this.FreeNode(proxy);
   };
   b2DynamicTree.prototype.MoveProxy = function (proxy, aabb, displacement) {
      b2Settings.b2Assert(proxy.IsLeaf());
      if (proxy.aabb.Contains(aabb)) {
         return false;
      }
      this.RemoveLeaf(proxy);
      var extendX = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : (-displacement.x));
      var extendY = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : (-displacement.y));
      proxy.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
      proxy.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
      proxy.aabb.upperBound.x = aabb.upperBound.x + extendX;
      proxy.aabb.upperBound.y = aabb.upperBound.y + extendY;
      this.InsertLeaf(proxy);
      return true;
   };
   b2DynamicTree.prototype.Rebalance = function (iterations) {
      if (iterations === undefined) iterations = 0;
      if (this.m_root == null) return;
      for (var i = 0; i < iterations; i++) {
         var node = this.m_root;
         var bit = 0;
         while (node.IsLeaf() == false) {
            node = (this.m_path >> bit) & 1 ? node.child2 : node.child1;
            bit = (bit + 1) & 31;
         }++this.m_path;
         this.RemoveLeaf(node);
         this.InsertLeaf(node);
      }
   };
   b2DynamicTree.prototype.GetFatAABB = function (proxy) {
      return proxy.aabb;
   };
   b2DynamicTree.prototype.GetUserData = function (proxy) {
      return proxy.userData;
   };
   b2DynamicTree.prototype.Query = function (callback, aabb) {
      if (this.m_root == null) return;
      var stack = new Vector();
      var count = 0;
      stack[count++] = this.m_root;
      while (count > 0) {
         var node = stack[--count];
         if (node.aabb.TestOverlap(aabb)) {
            if (node.IsLeaf()) {
               var proceed = callback(node);
               if (!proceed) return;
            }
            else {
               stack[count++] = node.child1;
               stack[count++] = node.child2;
            }
         }
      }
   };
   b2DynamicTree.prototype.RayCast = function (callback, input) {
      if (this.m_root == null) return;
      var p1 = input.p1;
      var p2 = input.p2;
      var r = b2Math.SubtractVV(p1, p2);
      r.Normalize();
      var v = b2Math.CrossFV(1.0, r);
      var abs_v = b2Math.AbsV(v);
      var maxFraction = input.maxFraction;
      var segmentAABB = new b2AABB();
      var tX = 0;
      var tY = 0; {
         tX = p1.x + maxFraction * (p2.x - p1.x);
         tY = p1.y + maxFraction * (p2.y - p1.y);
         segmentAABB.lowerBound.x = Math.min(p1.x, tX);
         segmentAABB.lowerBound.y = Math.min(p1.y, tY);
         segmentAABB.upperBound.x = Math.max(p1.x, tX);
         segmentAABB.upperBound.y = Math.max(p1.y, tY);
      }
      var stack = new Vector();
      var count = 0;
      stack[count++] = this.m_root;
      while (count > 0) {
         var node = stack[--count];
         if (node.aabb.TestOverlap(segmentAABB) == false) {
            continue;
         }
         var c = node.aabb.GetCenter();
         var h = node.aabb.GetExtents();
         var separation = Math.abs(v.x * (p1.x - c.x) + v.y * (p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;
         if (separation > 0.0) continue;
         if (node.IsLeaf()) {
            var subInput = new b2RayCastInput();
            subInput.p1 = input.p1;
            subInput.p2 = input.p2;
            subInput.maxFraction = input.maxFraction;
            maxFraction = callback(subInput, node);
            if (maxFraction == 0.0) return;
            if (maxFraction > 0.0) {
               tX = p1.x + maxFraction * (p2.x - p1.x);
               tY = p1.y + maxFraction * (p2.y - p1.y);
               segmentAABB.lowerBound.x = Math.min(p1.x, tX);
               segmentAABB.lowerBound.y = Math.min(p1.y, tY);
               segmentAABB.upperBound.x = Math.max(p1.x, tX);
               segmentAABB.upperBound.y = Math.max(p1.y, tY);
            }
         }
         else {
            stack[count++] = node.child1;
            stack[count++] = node.child2;
         }
      }
   };
   b2DynamicTree.prototype.AllocateNode = function () {
      if (this.m_freeList) {
         var node = this.m_freeList;
         this.m_freeList = node.parent;
         node.parent = null;
         node.child1 = null;
         node.child2 = null;
         return node;
      }
      return new b2DynamicTreeNode();
   };
   b2DynamicTree.prototype.FreeNode = function (node) {
      node.parent = this.m_freeList;
      this.m_freeList = node;
   };
   b2DynamicTree.prototype.InsertLeaf = function (leaf) {
      ++this.m_insertionCount;
      if (this.m_root == null) {
         this.m_root = leaf;
         this.m_root.parent = null;
         return;
      }
      var center = leaf.aabb.GetCenter();
      var sibling = this.m_root;
      if (sibling.IsLeaf() == false) {
         do {
            var child1 = sibling.child1;
            var child2 = sibling.child2;
            var norm1 = Math.abs((child1.aabb.lowerBound.x + child1.aabb.upperBound.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound.y + child1.aabb.upperBound.y) / 2 - center.y);
            var norm2 = Math.abs((child2.aabb.lowerBound.x + child2.aabb.upperBound.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound.y + child2.aabb.upperBound.y) / 2 - center.y);
            if (norm1 < norm2) {
               sibling = child1;
            }
            else {
               sibling = child2;
            }
         }
         while (sibling.IsLeaf() == false)
      }
      var node1 = sibling.parent;
      var node2 = this.AllocateNode();
      node2.parent = node1;
      node2.userData = null;
      node2.aabb.Combine(leaf.aabb, sibling.aabb);
      if (node1) {
         if (sibling.parent.child1 == sibling) {
            node1.child1 = node2;
         }
         else {
            node1.child2 = node2;
         }
         node2.child1 = sibling;
         node2.child2 = leaf;
         sibling.parent = node2;
         leaf.parent = node2;
         do {
            if (node1.aabb.Contains(node2.aabb)) break;
            node1.aabb.Combine(node1.child1.aabb, node1.child2.aabb);
            node2 = node1;
            node1 = node1.parent;
         }
         while (node1)
      }
      else {
         node2.child1 = sibling;
         node2.child2 = leaf;
         sibling.parent = node2;
         leaf.parent = node2;
         this.m_root = node2;
      }
   };
   b2DynamicTree.prototype.RemoveLeaf = function (leaf) {
      if (leaf == this.m_root) {
         this.m_root = null;
         return;
      }
      var node2 = leaf.parent;
      var node1 = node2.parent;
      var sibling;
      if (node2.child1 == leaf) {
         sibling = node2.child2;
      }
      else {
         sibling = node2.child1;
      }
      if (node1) {
         if (node1.child1 == node2) {
            node1.child1 = sibling;
         }
         else {
            node1.child2 = sibling;
         }
         sibling.parent = node1;
         this.FreeNode(node2);
         while (node1) {
            var oldAABB = node1.aabb;
            node1.aabb = b2AABB.Combine(node1.child1.aabb, node1.child2.aabb);
            if (oldAABB.Contains(node1.aabb)) break;
            node1 = node1.parent;
         }
      }
      else {
         this.m_root = sibling;
         sibling.parent = null;
         this.FreeNode(node2);
      }
   };
   b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase = function () {
      this.m_tree = new b2DynamicTree();
      this.m_moveBuffer = new Vector();
      this.m_pairBuffer = new Vector();
      this.m_pairCount = 0;
   };
   b2DynamicTreeBroadPhase.prototype.CreateProxy = function (aabb, userData) {
      var proxy = this.m_tree.CreateProxy(aabb, userData);
      ++this.m_proxyCount;
      this.BufferMove(proxy);
      return proxy;
   };
   b2DynamicTreeBroadPhase.prototype.DestroyProxy = function (proxy) {
      this.UnBufferMove(proxy);
      --this.m_proxyCount;
      this.m_tree.DestroyProxy(proxy);
   };
   b2DynamicTreeBroadPhase.prototype.MoveProxy = function (proxy, aabb, displacement) {
      var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);
      if (buffer) {
         this.BufferMove(proxy);
      }
   };
   b2DynamicTreeBroadPhase.prototype.TestOverlap = function (proxyA, proxyB) {
      var aabbA = this.m_tree.GetFatAABB(proxyA);
      var aabbB = this.m_tree.GetFatAABB(proxyB);
      return aabbA.TestOverlap(aabbB);
   };
   b2DynamicTreeBroadPhase.prototype.GetUserData = function (proxy) {
      return this.m_tree.GetUserData(proxy);
   };
   b2DynamicTreeBroadPhase.prototype.GetFatAABB = function (proxy) {
      return this.m_tree.GetFatAABB(proxy);
   };
   b2DynamicTreeBroadPhase.prototype.GetProxyCount = function () {
      return this.m_proxyCount;
   };
   b2DynamicTreeBroadPhase.prototype.UpdatePairs = function (callback) {
      var __this = this;
      __this.m_pairCount = 0;
      var i = 0,
         queryProxy;
      for (i = 0;
      i < __this.m_moveBuffer.length; ++i) {
         queryProxy = __this.m_moveBuffer[i];

         function QueryCallback(proxy) {
            if (proxy == queryProxy) return true;
            if (__this.m_pairCount == __this.m_pairBuffer.length) {
               __this.m_pairBuffer[__this.m_pairCount] = new b2DynamicTreePair();
            }
            var pair = __this.m_pairBuffer[__this.m_pairCount];
            pair.proxyA = proxy < queryProxy ? proxy : queryProxy;
            pair.proxyB = proxy >= queryProxy ? proxy : queryProxy;++__this.m_pairCount;
            return true;
         };
         var fatAABB = __this.m_tree.GetFatAABB(queryProxy);
         __this.m_tree.Query(QueryCallback, fatAABB);
      }
      __this.m_moveBuffer.length = 0;
      for (var i = 0; i < __this.m_pairCount;) {
         var primaryPair = __this.m_pairBuffer[i];
         var userDataA = __this.m_tree.GetUserData(primaryPair.proxyA);
         var userDataB = __this.m_tree.GetUserData(primaryPair.proxyB);
         callback(userDataA, userDataB);
         ++i;
         while (i < __this.m_pairCount) {
            var pair = __this.m_pairBuffer[i];
            if (pair.proxyA != primaryPair.proxyA || pair.proxyB != primaryPair.proxyB) {
               break;
            }++i;
         }
      }
   };
   b2DynamicTreeBroadPhase.prototype.Query = function (callback, aabb) {
      this.m_tree.Query(callback, aabb);
   };
   b2DynamicTreeBroadPhase.prototype.RayCast = function (callback, input) {
      this.m_tree.RayCast(callback, input);
   };
   b2DynamicTreeBroadPhase.prototype.Validate = function () {};
   b2DynamicTreeBroadPhase.prototype.Rebalance = function (iterations) {
      if (iterations === undefined) iterations = 0;
      this.m_tree.Rebalance(iterations);
   };
   b2DynamicTreeBroadPhase.prototype.BufferMove = function (proxy) {
      this.m_moveBuffer[this.m_moveBuffer.length] = proxy;
   };
   b2DynamicTreeBroadPhase.prototype.UnBufferMove = function (proxy) {
      var i = parseInt(this.m_moveBuffer.indexOf(proxy));
      this.m_moveBuffer.splice(i, 1);
   };
   b2DynamicTreeBroadPhase.prototype.ComparePairs = function (pair1, pair2) {
      return 0;
   };
   b2DynamicTreeBroadPhase.__implements = {};
   b2DynamicTreeBroadPhase.__implements[IBroadPhase] = true;
   b2DynamicTreeNode.b2DynamicTreeNode = function () {
      this.aabb = new b2AABB();
   };
   b2DynamicTreeNode.prototype.IsLeaf = function () {
      return this.child1 == null;
   };
   b2DynamicTreePair.b2DynamicTreePair = function () {};
   b2Manifold.b2Manifold = function () {
      this.m_pointCount = 0;
   };
   b2Manifold.prototype.b2Manifold = function () {
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2ManifoldPoint();
      }
      this.m_localPlaneNormal = new b2Vec2();
      this.m_localPoint = new b2Vec2();
   };
   b2Manifold.prototype.Reset = function () {
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Reset();
      }
      this.m_localPlaneNormal.SetZero();
      this.m_localPoint.SetZero();
      this.m_type = 0;
      this.m_pointCount = 0;
   };
   b2Manifold.prototype.Set = function (m) {
      this.m_pointCount = m.m_pointCount;
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Set(m.m_points[i]);
      }
      this.m_localPlaneNormal.SetV(m.m_localPlaneNormal);
      this.m_localPoint.SetV(m.m_localPoint);
      this.m_type = m.m_type;
   };
   b2Manifold.prototype.Copy = function () {
      var copy = new b2Manifold();
      copy.Set(this);
      return copy;
   };
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Manifold.e_circles = 0x0001;
      Box2D.Collision.b2Manifold.e_faceA = 0x0002;
      Box2D.Collision.b2Manifold.e_faceB = 0x0004;
   });
   b2ManifoldPoint.b2ManifoldPoint = function () {
      this.m_localPoint = new b2Vec2();
      this.m_id = new b2ContactID();
   };
   b2ManifoldPoint.prototype.b2ManifoldPoint = function () {
      this.Reset();
   };
   b2ManifoldPoint.prototype.Reset = function () {
      this.m_localPoint.SetZero();
      this.m_normalImpulse = 0.0;
      this.m_tangentImpulse = 0.0;
      this.m_id.key = 0;
   };
   b2ManifoldPoint.prototype.Set = function (m) {
      this.m_localPoint.SetV(m.m_localPoint);
      this.m_normalImpulse = m.m_normalImpulse;
      this.m_tangentImpulse = m.m_tangentImpulse;
      this.m_id.Set(m.m_id);
   };
   b2Point.b2Point = function () {
      this.p = new b2Vec2();
   };
   b2Point.prototype.Support = function (xf, vX, vY) {
      if (vX === undefined) vX = 0;
      if (vY === undefined) vY = 0;
      return this.p;
   };
   b2Point.prototype.GetFirstVertex = function (xf) {
      return this.p;
   };
   b2RayCastInput.b2RayCastInput = function () {
      this.p1 = new b2Vec2();
      this.p2 = new b2Vec2();
   };
   b2RayCastInput.prototype.b2RayCastInput = function (p1, p2, maxFraction) {
      if (p1 === undefined) p1 = null;
      if (p2 === undefined) p2 = null;
      if (maxFraction === undefined) maxFraction = 1;
      if (p1) this.p1.SetV(p1);
      if (p2) this.p2.SetV(p2);
      this.maxFraction = maxFraction;
   };
   b2RayCastOutput.b2RayCastOutput = function () {
      this.normal = new b2Vec2();
   };
   b2Segment.b2Segment = function () {
      this.p1 = new b2Vec2();
      this.p2 = new b2Vec2();
   };
   b2Segment.prototype.TestSegment = function (lambda, normal, segment, maxLambda) {
      if (maxLambda === undefined) maxLambda = 0;
      var s = segment.p1;
      var rX = segment.p2.x - s.x;
      var rY = segment.p2.y - s.y;
      var dX = this.p2.x - this.p1.x;
      var dY = this.p2.y - this.p1.y;
      var nX = dY;
      var nY = (-dX);
      var k_slop = 100.0 * Number.MIN_VALUE;
      var denom = (-(rX * nX + rY * nY));
      if (denom > k_slop) {
         var bX = s.x - this.p1.x;
         var bY = s.y - this.p1.y;
         var a = (bX * nX + bY * nY);
         if (0.0 <= a && a <= maxLambda * denom) {
            var mu2 = (-rX * bY) + rY * bX;
            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
               a /= denom;
               var nLen = Math.sqrt(nX * nX + nY * nY);
               nX /= nLen;
               nY /= nLen;
               lambda[0] = a;
               normal.Set(nX, nY);
               return true;
            }
         }
      }
      return false;
   };
   b2Segment.prototype.Extend = function (aabb) {
      this.ExtendForward(aabb);
      this.ExtendBackward(aabb);
   };
   b2Segment.prototype.ExtendForward = function (aabb) {
      var dX = this.p2.x - this.p1.x;
      var dY = this.p2.y - this.p1.y;
      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p1.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p1.x) / dX : Number.POSITIVE_INFINITY,
      dY > 0 ? (aabb.upperBound.y - this.p1.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p1.y) / dY : Number.POSITIVE_INFINITY);
      this.p2.x = this.p1.x + dX * lambda;
      this.p2.y = this.p1.y + dY * lambda;
   };
   b2Segment.prototype.ExtendBackward = function (aabb) {
      var dX = (-this.p2.x) + this.p1.x;
      var dY = (-this.p2.y) + this.p1.y;
      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p2.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p2.x) / dX : Number.POSITIVE_INFINITY,
      dY > 0 ? (aabb.upperBound.y - this.p2.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p2.y) / dY : Number.POSITIVE_INFINITY);
      this.p1.x = this.p2.x + dX * lambda;
      this.p1.y = this.p2.y + dY * lambda;
   };
   b2SeparationFunction.b2SeparationFunction = function () {
      this.m_localPoint = new b2Vec2();
      this.m_axis = new b2Vec2();
   };
   b2SeparationFunction.prototype.Initialize = function (cache, proxyA, transformA, proxyB, transformB) {
      this.m_proxyA = proxyA;
      this.m_proxyB = proxyB;
      var count = parseInt(cache.count);
      b2Settings.b2Assert(0 < count && count < 3);
      var localPointA;
      var localPointA1;
      var localPointA2;
      var localPointB;
      var localPointB1;
      var localPointB2;
      var pointAX = 0;
      var pointAY = 0;
      var pointBX = 0;
      var pointBY = 0;
      var normalX = 0;
      var normalY = 0;
      var tMat;
      var tVec;
      var s = 0;
      var sgn = 0;
      if (count == 1) {
         this.m_type = b2SeparationFunction.e_points;
         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
         tVec = localPointA;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointB;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         this.m_axis.x = pointBX - pointAX;
         this.m_axis.y = pointBY - pointAY;
         this.m_axis.Normalize();
      }
      else if (cache.indexB[0] == cache.indexB[1]) {
         this.m_type = b2SeparationFunction.e_faceA;
         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
         this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);
         this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);
         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
         this.m_axis.Normalize();
         tVec = this.m_axis;
         tMat = transformA.R;
         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tVec = this.m_localPoint;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointB;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
         if (s < 0.0) {
            this.m_axis.NegativeSelf();
         }
      }
      else if (cache.indexA[0] == cache.indexA[0]) {
         this.m_type = b2SeparationFunction.e_faceB;
         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
         this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);
         this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);
         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
         this.m_axis.Normalize();
         tVec = this.m_axis;
         tMat = transformB.R;
         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tVec = this.m_localPoint;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointA;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
         if (s < 0.0) {
            this.m_axis.NegativeSelf();
         }
      }
      else {
         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
         var pA = b2Math.MulX(transformA, localPointA);
         var dA = b2Math.MulMV(transformA.R, b2Math.SubtractVV(localPointA2, localPointA1));
         var pB = b2Math.MulX(transformB, localPointB);
         var dB = b2Math.MulMV(transformB.R, b2Math.SubtractVV(localPointB2, localPointB1));
         var a = dA.x * dA.x + dA.y * dA.y;
         var e = dB.x * dB.x + dB.y * dB.y;
         var r = b2Math.SubtractVV(dB, dA);
         var c = dA.x * r.x + dA.y * r.y;
         var f = dB.x * r.x + dB.y * r.y;
         var b = dA.x * dB.x + dA.y * dB.y;
         var denom = a * e - b * b;
         s = 0.0;
         if (denom != 0.0) {
            s = b2Math.Clamp((b * f - c * e) / denom, 0.0, 1.0);
         }
         var t = (b * s + f) / e;
         if (t < 0.0) {
            t = 0.0;
            s = b2Math.Clamp((b - c) / a, 0.0, 1.0);
         }
         localPointA = new b2Vec2();
         localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);
         localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);
         localPointB = new b2Vec2();
         localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);
         localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);
         if (s == 0.0 || s == 1.0) {
            this.m_type = b2SeparationFunction.e_faceB;
            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
            this.m_axis.Normalize();
            this.m_localPoint = localPointB;
            tVec = this.m_axis;
            tMat = transformB.R;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tVec = this.m_localPoint;
            tMat = transformB.R;
            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tVec = localPointA;
            tMat = transformA.R;
            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
            if (s < 0.0) {
               this.m_axis.NegativeSelf();
            }
         }
         else {
            this.m_type = b2SeparationFunction.e_faceA;
            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
            this.m_localPoint = localPointA;
            tVec = this.m_axis;
            tMat = transformA.R;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tVec = this.m_localPoint;
            tMat = transformA.R;
            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tVec = localPointB;
            tMat = transformB.R;
            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
            if (s < 0.0) {
               this.m_axis.NegativeSelf();
            }
         }
      }
   };
   b2SeparationFunction.prototype.Evaluate = function (transformA, transformB) {
      var axisA;
      var axisB;
      var localPointA;
      var localPointB;
      var pointA;
      var pointB;
      var seperation = 0;
      var normal;
      switch (this.m_type) {
      case b2SeparationFunction.e_points:
         {
            axisA = b2Math.MulTMV(transformA.R, this.m_axis);
            axisB = b2Math.MulTMV(transformB.R, this.m_axis.GetNegative());
            localPointA = this.m_proxyA.GetSupportVertex(axisA);
            localPointB = this.m_proxyB.GetSupportVertex(axisB);
            pointA = b2Math.MulX(transformA, localPointA);
            pointB = b2Math.MulX(transformB, localPointB);
            seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;
            return seperation;
         }
      case b2SeparationFunction.e_faceA:
         {
            normal = b2Math.MulMV(transformA.R, this.m_axis);
            pointA = b2Math.MulX(transformA, this.m_localPoint);
            axisB = b2Math.MulTMV(transformB.R, normal.GetNegative());
            localPointB = this.m_proxyB.GetSupportVertex(axisB);
            pointB = b2Math.MulX(transformB, localPointB);
            seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;
            return seperation;
         }
      case b2SeparationFunction.e_faceB:
         {
            normal = b2Math.MulMV(transformB.R, this.m_axis);
            pointB = b2Math.MulX(transformB, this.m_localPoint);
            axisA = b2Math.MulTMV(transformA.R, normal.GetNegative());
            localPointA = this.m_proxyA.GetSupportVertex(axisA);
            pointA = b2Math.MulX(transformA, localPointA);
            seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;
            return seperation;
         }
      default:
         b2Settings.b2Assert(false);
         return 0.0;
      }
   };
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2SeparationFunction.e_points = 0x01;
      Box2D.Collision.b2SeparationFunction.e_faceA = 0x02;
      Box2D.Collision.b2SeparationFunction.e_faceB = 0x04;
   });
   b2Simplex.b2Simplex = function () {
      this.m_v1 = new b2SimplexVertex();
      this.m_v2 = new b2SimplexVertex();
      this.m_v3 = new b2SimplexVertex();
      this.m_vertices = new Vector(3);
   };
   b2Simplex.prototype.b2Simplex = function () {
      this.m_vertices[0] = this.m_v1;
      this.m_vertices[1] = this.m_v2;
      this.m_vertices[2] = this.m_v3;
   };
   b2Simplex.prototype.ReadCache = function (cache, proxyA, transformA, proxyB, transformB) {
      b2Settings.b2Assert(0 <= cache.count && cache.count <= 3);
      var wALocal;
      var wBLocal;
      this.m_count = cache.count;
      var vertices = this.m_vertices;
      for (var i = 0; i < this.m_count; i++) {
         var v = vertices[i];
         v.indexA = cache.indexA[i];
         v.indexB = cache.indexB[i];
         wALocal = proxyA.GetVertex(v.indexA);
         wBLocal = proxyB.GetVertex(v.indexB);
         v.wA = b2Math.MulX(transformA, wALocal);
         v.wB = b2Math.MulX(transformB, wBLocal);
         v.w = b2Math.SubtractVV(v.wB, v.wA);
         v.a = 0;
      }
      if (this.m_count > 1) {
         var metric1 = cache.metric;
         var metric2 = this.GetMetric();
         if (metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {
            this.m_count = 0;
         }
      }
      if (this.m_count == 0) {
         v = vertices[0];
         v.indexA = 0;
         v.indexB = 0;
         wALocal = proxyA.GetVertex(0);
         wBLocal = proxyB.GetVertex(0);
         v.wA = b2Math.MulX(transformA, wALocal);
         v.wB = b2Math.MulX(transformB, wBLocal);
         v.w = b2Math.SubtractVV(v.wB, v.wA);
         this.m_count = 1;
      }
   };
   b2Simplex.prototype.WriteCache = function (cache) {
      cache.metric = this.GetMetric();
      cache.count = Box2D.parseUInt(this.m_count);
      var vertices = this.m_vertices;
      for (var i = 0; i < this.m_count; i++) {
         cache.indexA[i] = Box2D.parseUInt(vertices[i].indexA);
         cache.indexB[i] = Box2D.parseUInt(vertices[i].indexB);
      }
   };
   b2Simplex.prototype.GetSearchDirection = function () {
      switch (this.m_count) {
      case 1:
         return this.m_v1.w.GetNegative();
      case 2:
         {
            var e12 = b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);
            var sgn = b2Math.CrossVV(e12, this.m_v1.w.GetNegative());
            if (sgn > 0.0) {
               return b2Math.CrossFV(1.0, e12);
            }
            else {
               return b2Math.CrossVF(e12, 1.0);
            }
         }
      default:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      }
   };
   b2Simplex.prototype.GetClosestPoint = function () {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      case 1:
         return this.m_v1.w;
      case 2:
         return new b2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
      default:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      }
   };
   b2Simplex.prototype.GetWitnessPoints = function (pA, pB) {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         break;
      case 1:
         pA.SetV(this.m_v1.wA);
         pB.SetV(this.m_v1.wB);
         break;
      case 2:
         pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
         pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
         pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
         pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
         break;
      case 3:
         pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
         pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
         break;
      default:
         b2Settings.b2Assert(false);
         break;
      }
   };
   b2Simplex.prototype.GetMetric = function () {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         return 0.0;
      case 1:
         return 0.0;
      case 2:
         return b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
      case 3:
         return b2Math.CrossVV(b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));
      default:
         b2Settings.b2Assert(false);
         return 0.0;
      }
   };
   b2Simplex.prototype.Solve2 = function () {
      var w1 = this.m_v1.w;
      var w2 = this.m_v2.w;
      var e12 = b2Math.SubtractVV(w2, w1);
      var d12_2 = (-(w1.x * e12.x + w1.y * e12.y));
      if (d12_2 <= 0.0) {
         this.m_v1.a = 1.0;
         this.m_count = 1;
         return;
      }
      var d12_1 = (w2.x * e12.x + w2.y * e12.y);
      if (d12_1 <= 0.0) {
         this.m_v2.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v2);
         return;
      }
      var inv_d12 = 1.0 / (d12_1 + d12_2);
      this.m_v1.a = d12_1 * inv_d12;
      this.m_v2.a = d12_2 * inv_d12;
      this.m_count = 2;
   };
   b2Simplex.prototype.Solve3 = function () {
      var w1 = this.m_v1.w;
      var w2 = this.m_v2.w;
      var w3 = this.m_v3.w;
      var e12 = b2Math.SubtractVV(w2, w1);
      var w1e12 = b2Math.Dot(w1, e12);
      var w2e12 = b2Math.Dot(w2, e12);
      var d12_1 = w2e12;
      var d12_2 = (-w1e12);
      var e13 = b2Math.SubtractVV(w3, w1);
      var w1e13 = b2Math.Dot(w1, e13);
      var w3e13 = b2Math.Dot(w3, e13);
      var d13_1 = w3e13;
      var d13_2 = (-w1e13);
      var e23 = b2Math.SubtractVV(w3, w2);
      var w2e23 = b2Math.Dot(w2, e23);
      var w3e23 = b2Math.Dot(w3, e23);
      var d23_1 = w3e23;
      var d23_2 = (-w2e23);
      var n123 = b2Math.CrossVV(e12, e13);
      var d123_1 = n123 * b2Math.CrossVV(w2, w3);
      var d123_2 = n123 * b2Math.CrossVV(w3, w1);
      var d123_3 = n123 * b2Math.CrossVV(w1, w2);
      if (d12_2 <= 0.0 && d13_2 <= 0.0) {
         this.m_v1.a = 1.0;
         this.m_count = 1;
         return;
      }
      if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
         var inv_d12 = 1.0 / (d12_1 + d12_2);
         this.m_v1.a = d12_1 * inv_d12;
         this.m_v2.a = d12_2 * inv_d12;
         this.m_count = 2;
         return;
      }
      if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
         var inv_d13 = 1.0 / (d13_1 + d13_2);
         this.m_v1.a = d13_1 * inv_d13;
         this.m_v3.a = d13_2 * inv_d13;
         this.m_count = 2;
         this.m_v2.Set(this.m_v3);
         return;
      }
      if (d12_1 <= 0.0 && d23_2 <= 0.0) {
         this.m_v2.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v2);
         return;
      }
      if (d13_1 <= 0.0 && d23_1 <= 0.0) {
         this.m_v3.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v3);
         return;
      }
      if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
         var inv_d23 = 1.0 / (d23_1 + d23_2);
         this.m_v2.a = d23_1 * inv_d23;
         this.m_v3.a = d23_2 * inv_d23;
         this.m_count = 2;
         this.m_v1.Set(this.m_v3);
         return;
      }
      var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
      this.m_v1.a = d123_1 * inv_d123;
      this.m_v2.a = d123_2 * inv_d123;
      this.m_v3.a = d123_3 * inv_d123;
      this.m_count = 3;
   };
   b2SimplexCache.b2SimplexCache = function () {
      this.indexA = new Vector_a2j_Number(3);
      this.indexB = new Vector_a2j_Number(3);
   };
   b2SimplexVertex.b2SimplexVertex = function () {};
   b2SimplexVertex.prototype.Set = function (other) {
      this.wA.SetV(other.wA);
      this.wB.SetV(other.wB);
      this.w.SetV(other.w);
      this.a = other.a;
      this.indexA = other.indexA;
      this.indexB = other.indexB;
   };
   b2TimeOfImpact.b2TimeOfImpact = function () {};
   b2TimeOfImpact.TimeOfImpact = function (input) {
      ++b2TimeOfImpact.b2_toiCalls;
      var proxyA = input.proxyA;
      var proxyB = input.proxyB;
      var sweepA = input.sweepA;
      var sweepB = input.sweepB;
      b2Settings.b2Assert(sweepA.t0 == sweepB.t0);
      b2Settings.b2Assert(1.0 - sweepA.t0 > Number.MIN_VALUE);
      var radius = proxyA.m_radius + proxyB.m_radius;
      var tolerance = input.tolerance;
      var alpha = 0.0;
      var k_maxIterations = 1000;
      var iter = 0;
      var target = 0.0;
      b2TimeOfImpact.s_cache.count = 0;
      b2TimeOfImpact.s_distanceInput.useRadii = false;
      for (;;) {
         sweepA.GetTransform(b2TimeOfImpact.s_xfA, alpha);
         sweepB.GetTransform(b2TimeOfImpact.s_xfB, alpha);
         b2TimeOfImpact.s_distanceInput.proxyA = proxyA;
         b2TimeOfImpact.s_distanceInput.proxyB = proxyB;
         b2TimeOfImpact.s_distanceInput.transformA = b2TimeOfImpact.s_xfA;
         b2TimeOfImpact.s_distanceInput.transformB = b2TimeOfImpact.s_xfB;
         b2Distance.Distance(b2TimeOfImpact.s_distanceOutput, b2TimeOfImpact.s_cache, b2TimeOfImpact.s_distanceInput);
         if (b2TimeOfImpact.s_distanceOutput.distance <= 0.0) {
            alpha = 1.0;
            break;
         }
         b2TimeOfImpact.s_fcn.Initialize(b2TimeOfImpact.s_cache, proxyA, b2TimeOfImpact.s_xfA, proxyB, b2TimeOfImpact.s_xfB);
         var separation = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
         if (separation <= 0.0) {
            alpha = 1.0;
            break;
         }
         if (iter == 0) {
            if (separation > radius) {
               target = b2Math.Max(radius - tolerance, 0.75 * radius);
            }
            else {
               target = b2Math.Max(separation - tolerance, 0.02 * radius);
            }
         }
         if (separation - target < 0.5 * tolerance) {
            if (iter == 0) {
               alpha = 1.0;
               break;
            }
            break;
         }
         var newAlpha = alpha; {
            var x1 = alpha;
            var x2 = 1.0;
            var f1 = separation;
            sweepA.GetTransform(b2TimeOfImpact.s_xfA, x2);
            sweepB.GetTransform(b2TimeOfImpact.s_xfB, x2);
            var f2 = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
            if (f2 >= target) {
               alpha = 1.0;
               break;
            }
            var rootIterCount = 0;
            for (;;) {
               var x = 0;
               if (rootIterCount & 1) {
                  x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);
               }
               else {
                  x = 0.5 * (x1 + x2);
               }
               sweepA.GetTransform(b2TimeOfImpact.s_xfA, x);
               sweepB.GetTransform(b2TimeOfImpact.s_xfB, x);
               var f = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
               if (b2Math.Abs(f - target) < 0.025 * tolerance) {
                  newAlpha = x;
                  break;
               }
               if (f > target) {
                  x1 = x;
                  f1 = f;
               }
               else {
                  x2 = x;
                  f2 = f;
               }++rootIterCount;
               ++b2TimeOfImpact.b2_toiRootIters;
               if (rootIterCount == 50) {
                  break;
               }
            }
            b2TimeOfImpact.b2_toiMaxRootIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxRootIters, rootIterCount);
         }
         if (newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) {
            break;
         }
         alpha = newAlpha;
         iter++;
         ++b2TimeOfImpact.b2_toiIters;
         if (iter == k_maxIterations) {
            break;
         }
      }
      b2TimeOfImpact.b2_toiMaxIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxIters, iter);
      return alpha;
   };
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2TimeOfImpact.b2_toiCalls = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.s_cache = new b2SimplexCache();
      Box2D.Collision.b2TimeOfImpact.s_distanceInput = new b2DistanceInput();
      Box2D.Collision.b2TimeOfImpact.s_xfA = new b2Transform();
      Box2D.Collision.b2TimeOfImpact.s_xfB = new b2Transform();
      Box2D.Collision.b2TimeOfImpact.s_fcn = new b2SeparationFunction();
      Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new b2DistanceOutput();
   });
   b2TOIInput.b2TOIInput = function () {
      this.proxyA = new b2DistanceProxy();
      this.proxyB = new b2DistanceProxy();
      this.sweepA = new b2Sweep();
      this.sweepB = new b2Sweep();
   };
   b2WorldManifold.b2WorldManifold = function () {
      this.m_normal = new b2Vec2();
   };
   b2WorldManifold.prototype.b2WorldManifold = function () {
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2Vec2();
      }
   };
   b2WorldManifold.prototype.Initialize = function (manifold, xfA, radiusA, xfB, radiusB) {
      if (radiusA === undefined) radiusA = 0;
      if (radiusB === undefined) radiusB = 0;
      if (manifold.m_pointCount == 0) {
         return;
      }
      var i = 0;
      var tVec;
      var tMat;
      var normalX = 0;
      var normalY = 0;
      var planePointX = 0;
      var planePointY = 0;
      var clipPointX = 0;
      var clipPointY = 0;
      switch (manifold.m_type) {
      case b2Manifold.e_circles:
         {
            tMat = xfA.R;
            tVec = manifold.m_localPoint;
            var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfB.R;
            tVec = manifold.m_points[0].m_localPoint;
            var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            var dX = pointBX - pointAX;
            var dY = pointBY - pointAY;
            var d2 = dX * dX + dY * dY;
            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
               var d = Math.sqrt(d2);
               this.m_normal.x = dX / d;
               this.m_normal.y = dY / d;
            }
            else {
               this.m_normal.x = 1;
               this.m_normal.y = 0;
            }
            var cAX = pointAX + radiusA * this.m_normal.x;
            var cAY = pointAY + radiusA * this.m_normal.y;
            var cBX = pointBX - radiusB * this.m_normal.x;
            var cBY = pointBY - radiusB * this.m_normal.y;
            this.m_points[0].x = 0.5 * (cAX + cBX);
            this.m_points[0].y = 0.5 * (cAY + cBY);
         }
         break;
      case b2Manifold.e_faceA:
         {
            tMat = xfA.R;
            tVec = manifold.m_localPlaneNormal;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfA.R;
            tVec = manifold.m_localPoint;
            planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            this.m_normal.x = normalX;
            this.m_normal.y = normalY;
            for (i = 0;
            i < manifold.m_pointCount; i++) {
               tMat = xfB.R;
               tVec = manifold.m_points[i].m_localPoint;
               clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
               clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
               this.m_points[i].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;
               this.m_points[i].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;
            }
         }
         break;
      case b2Manifold.e_faceB:
         {
            tMat = xfB.R;
            tVec = manifold.m_localPlaneNormal;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfB.R;
            tVec = manifold.m_localPoint;
            planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            this.m_normal.x = (-normalX);
            this.m_normal.y = (-normalY);
            for (i = 0;
            i < manifold.m_pointCount; i++) {
               tMat = xfA.R;
               tVec = manifold.m_points[i].m_localPoint;
               clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
               clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
               this.m_points[i].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;
               this.m_points[i].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;
            }
         }
         break;
      }
   };
   ClipVertex.ClipVertex = function () {
      this.v = new b2Vec2();
      this.id = new b2ContactID();
   };
   ClipVertex.prototype.Set = function (other) {
      this.v.SetV(other.v);
      this.id.Set(other.id);
   };
   Features.Features = function () {};
   Object.defineProperty(Features.prototype, 'referenceEdge', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._referenceEdge;
      }
   });
   Object.defineProperty(Features.prototype, 'referenceEdge', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._referenceEdge = value;
         this._m_id._key = (this._m_id._key & 0xffffff00) | (this._referenceEdge & 0x000000ff);
      }
   });
   Object.defineProperty(Features.prototype, 'incidentEdge', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._incidentEdge;
      }
   });
   Object.defineProperty(Features.prototype, 'incidentEdge', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._incidentEdge = value;
         this._m_id._key = (this._m_id._key & 0xffff00ff) | ((this._incidentEdge << 8) & 0x0000ff00);
      }
   });
   Object.defineProperty(Features.prototype, 'incidentVertex', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._incidentVertex;
      }
   });
   Object.defineProperty(Features.prototype, 'incidentVertex', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._incidentVertex = value;
         this._m_id._key = (this._m_id._key & 0xff00ffff) | ((this._incidentVertex << 16) & 0x00ff0000);
      }
   });
   Object.defineProperty(Features.prototype, 'flip', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._flip;
      }
   });
   Object.defineProperty(Features.prototype, 'flip', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._flip = value;
         this._m_id._key = (this._m_id._key & 0x00ffffff) | ((this._flip << 24) & 0xff000000);
      }
   });
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   Box2D.inherit(b2CircleShape, Box2D.Collision.Shapes.b2Shape);
   b2CircleShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2CircleShape.b2CircleShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.m_p = new b2Vec2();
   };
   b2CircleShape.prototype.Copy = function () {
      var s = new b2CircleShape();
      s.Set(this);
      return s;
   };
   b2CircleShape.prototype.Set = function (other) {
      this.__super.Set.call(this, other);
      if (Box2D.is(other, b2CircleShape)) {
         var other2 = (other instanceof b2CircleShape ? other : null);
         this.m_p.SetV(other2.m_p);
      }
   };
   b2CircleShape.prototype.TestPoint = function (transform, p) {
      var tMat = transform.R;
      var dX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var dY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      dX = p.x - dX;
      dY = p.y - dY;
      return (dX * dX + dY * dY) <= this.m_radius * this.m_radius;
   };
   b2CircleShape.prototype.RayCast = function (output, input, transform) {
      var tMat = transform.R;
      var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      var sX = input.p1.x - positionX;
      var sY = input.p1.y - positionY;
      var b = (sX * sX + sY * sY) - this.m_radius * this.m_radius;
      var rX = input.p2.x - input.p1.x;
      var rY = input.p2.y - input.p1.y;
      var c = (sX * rX + sY * rY);
      var rr = (rX * rX + rY * rY);
      var sigma = c * c - rr * b;
      if (sigma < 0.0 || rr < Number.MIN_VALUE) {
         return false;
      }
      var a = (-(c + Math.sqrt(sigma)));
      if (0.0 <= a && a <= input.maxFraction * rr) {
         a /= rr;
         output.fraction = a;
         output.normal.x = sX + a * rX;
         output.normal.y = sY + a * rY;
         output.normal.Normalize();
         return true;
      }
      return false;
   };
   b2CircleShape.prototype.ComputeAABB = function (aabb, transform) {
      var tMat = transform.R;
      var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      aabb.lowerBound.Set(pX - this.m_radius, pY - this.m_radius);
      aabb.upperBound.Set(pX + this.m_radius, pY + this.m_radius);
   };
   b2CircleShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      massData.mass = density * b2Settings.b2_pi * this.m_radius * this.m_radius;
      massData.center.SetV(this.m_p);
      massData.I = massData.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
   };
   b2CircleShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var p = b2Math.MulX(xf, this.m_p);
      var l = (-(b2Math.Dot(normal, p) - offset));
      if (l < (-this.m_radius) + Number.MIN_VALUE) {
         return 0;
      }
      if (l > this.m_radius) {
         c.SetV(p);
         return Math.PI * this.m_radius * this.m_radius;
      }
      var r2 = this.m_radius * this.m_radius;
      var l2 = l * l;
      var area = r2 * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(r2 - l2);
      var com = (-2 / 3 * Math.pow(r2 - l2, 1.5) / area);
      c.x = p.x + normal.x * com;
      c.y = p.y + normal.y * com;
      return area;
   };
   b2CircleShape.prototype.GetLocalPosition = function () {
      return this.m_p;
   };
   b2CircleShape.prototype.SetLocalPosition = function (position) {
      this.m_p.SetV(position);
   };
   b2CircleShape.prototype.GetRadius = function () {
      return this.m_radius;
   };
   b2CircleShape.prototype.SetRadius = function (radius) {
      if (radius === undefined) radius = 0;
      this.m_radius = radius;
   };
   b2CircleShape.prototype.b2CircleShape = function (radius) {
      if (radius === undefined) radius = 0;
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_circleShape;
      this.m_radius = radius;
   };
   b2EdgeChainDef.b2EdgeChainDef = function () {};
   b2EdgeChainDef.prototype.b2EdgeChainDef = function () {
      this.vertexCount = 0;
      this.isALoop = true;
      this.vertices = [];
   };
   Box2D.inherit(b2EdgeShape, Box2D.Collision.Shapes.b2Shape);
   b2EdgeShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2EdgeShape.b2EdgeShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.s_supportVec = new b2Vec2();
      this.m_v1 = new b2Vec2();
      this.m_v2 = new b2Vec2();
      this.m_coreV1 = new b2Vec2();
      this.m_coreV2 = new b2Vec2();
      this.m_normal = new b2Vec2();
      this.m_direction = new b2Vec2();
      this.m_cornerDir1 = new b2Vec2();
      this.m_cornerDir2 = new b2Vec2();
   };
   b2EdgeShape.prototype.TestPoint = function (transform, p) {
      return false;
   };
   b2EdgeShape.prototype.RayCast = function (output, input, transform) {
      var tMat;
      var rX = input.p2.x - input.p1.x;
      var rY = input.p2.y - input.p1.y;
      tMat = transform.R;
      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
      var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;
      var nY = (-(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X));
      var k_slop = 100.0 * Number.MIN_VALUE;
      var denom = (-(rX * nX + rY * nY));
      if (denom > k_slop) {
         var bX = input.p1.x - v1X;
         var bY = input.p1.y - v1Y;
         var a = (bX * nX + bY * nY);
         if (0.0 <= a && a <= input.maxFraction * denom) {
            var mu2 = (-rX * bY) + rY * bX;
            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
               a /= denom;
               output.fraction = a;
               var nLen = Math.sqrt(nX * nX + nY * nY);
               output.normal.x = nX / nLen;
               output.normal.y = nY / nLen;
               return true;
            }
         }
      }
      return false;
   };
   b2EdgeShape.prototype.ComputeAABB = function (aabb, transform) {
      var tMat = transform.R;
      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
      var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);
      var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);
      if (v1X < v2X) {
         aabb.lowerBound.x = v1X;
         aabb.upperBound.x = v2X;
      }
      else {
         aabb.lowerBound.x = v2X;
         aabb.upperBound.x = v1X;
      }
      if (v1Y < v2Y) {
         aabb.lowerBound.y = v1Y;
         aabb.upperBound.y = v2Y;
      }
      else {
         aabb.lowerBound.y = v2Y;
         aabb.upperBound.y = v1Y;
      }
   };
   b2EdgeShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      massData.mass = 0;
      massData.center.SetV(this.m_v1);
      massData.I = 0;
   };
   b2EdgeShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var v0 = new b2Vec2(normal.x * offset, normal.y * offset);
      var v1 = b2Math.MulX(xf, this.m_v1);
      var v2 = b2Math.MulX(xf, this.m_v2);
      var d1 = b2Math.Dot(normal, v1) - offset;
      var d2 = b2Math.Dot(normal, v2) - offset;
      if (d1 > 0) {
         if (d2 > 0) {
            return 0;
         }
         else {
            v1.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
            v1.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
         }
      }
      else {
         if (d2 > 0) {
            v2.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
            v2.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
         }
         else {}
      }
      c.x = (v0.x + v1.x + v2.x) / 3;
      c.y = (v0.y + v1.y + v2.y) / 3;
      return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));
   };
   b2EdgeShape.prototype.GetLength = function () {
      return this.m_length;
   };
   b2EdgeShape.prototype.GetVertex1 = function () {
      return this.m_v1;
   };
   b2EdgeShape.prototype.GetVertex2 = function () {
      return this.m_v2;
   };
   b2EdgeShape.prototype.GetCoreVertex1 = function () {
      return this.m_coreV1;
   };
   b2EdgeShape.prototype.GetCoreVertex2 = function () {
      return this.m_coreV2;
   };
   b2EdgeShape.prototype.GetNormalVector = function () {
      return this.m_normal;
   };
   b2EdgeShape.prototype.GetDirectionVector = function () {
      return this.m_direction;
   };
   b2EdgeShape.prototype.GetCorner1Vector = function () {
      return this.m_cornerDir1;
   };
   b2EdgeShape.prototype.GetCorner2Vector = function () {
      return this.m_cornerDir2;
   };
   b2EdgeShape.prototype.Corner1IsConvex = function () {
      return this.m_cornerConvex1;
   };
   b2EdgeShape.prototype.Corner2IsConvex = function () {
      return this.m_cornerConvex2;
   };
   b2EdgeShape.prototype.GetFirstVertex = function (xf) {
      var tMat = xf.R;
      return new b2Vec2(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y), xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));
   };
   b2EdgeShape.prototype.GetNextEdge = function () {
      return this.m_nextEdge;
   };
   b2EdgeShape.prototype.GetPrevEdge = function () {
      return this.m_prevEdge;
   };
   b2EdgeShape.prototype.Support = function (xf, dX, dY) {
      if (dX === undefined) dX = 0;
      if (dY === undefined) dY = 0;
      var tMat = xf.R;
      var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);
      var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);
      var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);
      var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);
      if ((v1X * dX + v1Y * dY) > (v2X * dX + v2Y * dY)) {
         this.s_supportVec.x = v1X;
         this.s_supportVec.y = v1Y;
      }
      else {
         this.s_supportVec.x = v2X;
         this.s_supportVec.y = v2Y;
      }
      return this.s_supportVec;
   };
   b2EdgeShape.prototype.b2EdgeShape = function (v1, v2) {
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_edgeShape;
      this.m_prevEdge = null;
      this.m_nextEdge = null;
      this.m_v1 = v1;
      this.m_v2 = v2;
      this.m_direction.Set(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);
      this.m_length = this.m_direction.Normalize();
      this.m_normal.Set(this.m_direction.y, (-this.m_direction.x));
      this.m_coreV1.Set((-b2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x)) + this.m_v1.x, (-b2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y)) + this.m_v1.y);
      this.m_coreV2.Set((-b2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x)) + this.m_v2.x, (-b2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y)) + this.m_v2.y);
      this.m_cornerDir1 = this.m_normal;
      this.m_cornerDir2.Set((-this.m_normal.x), (-this.m_normal.y));
   };
   b2EdgeShape.prototype.SetPrevEdge = function (edge, core, cornerDir, convex) {
      this.m_prevEdge = edge;
      this.m_coreV1 = core;
      this.m_cornerDir1 = cornerDir;
      this.m_cornerConvex1 = convex;
   };
   b2EdgeShape.prototype.SetNextEdge = function (edge, core, cornerDir, convex) {
      this.m_nextEdge = edge;
      this.m_coreV2 = core;
      this.m_cornerDir2 = cornerDir;
      this.m_cornerConvex2 = convex;
   };
   b2MassData.b2MassData = function () {
      this.mass = 0.0;
      this.center = new b2Vec2(0, 0);
      this.I = 0.0;
   };
   Box2D.inherit(b2PolygonShape, Box2D.Collision.Shapes.b2Shape);
   b2PolygonShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2PolygonShape.b2PolygonShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
   };
   b2PolygonShape.prototype.Copy = function () {
      var s = new b2PolygonShape();
      s.Set(this);
      return s;
   };
   b2PolygonShape.prototype.Set = function (other) {
      this.__super.Set.call(this, other);
      if (Box2D.is(other, b2PolygonShape)) {
         var other2 = (other instanceof b2PolygonShape ? other : null);
         this.m_centroid.SetV(other2.m_centroid);
         this.m_vertexCount = other2.m_vertexCount;
         this.Reserve(this.m_vertexCount);
         for (var i = 0; i < this.m_vertexCount; i++) {
            this.m_vertices[i].SetV(other2.m_vertices[i]);
            this.m_normals[i].SetV(other2.m_normals[i]);
         }
      }
   };
   b2PolygonShape.prototype.SetAsArray = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var v = new Vector();
      var i = 0,
         tVec;
      for (i = 0;
      i < vertices.length; ++i) {
         tVec = vertices[i];
         v.push(tVec);
      }
      this.SetAsVector(v, vertexCount);
   };
   b2PolygonShape.AsArray = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsArray(vertices, vertexCount);
      return polygonShape;
   };
   b2PolygonShape.prototype.SetAsVector = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      if (vertexCount == 0) vertexCount = vertices.length;
      b2Settings.b2Assert(2 <= vertexCount);
      this.m_vertexCount = vertexCount;
      this.Reserve(vertexCount);
      var i = 0;
      for (i = 0;
      i < this.m_vertexCount; i++) {
         this.m_vertices[i].SetV(vertices[i]);
      }
      for (i = 0;
      i < this.m_vertexCount; ++i) {
         var i1 = parseInt(i);
         var i2 = parseInt(i + 1 < this.m_vertexCount ? i + 1 : 0);
         var edge = b2Math.SubtractVV(this.m_vertices[i2], this.m_vertices[i1]);
         b2Settings.b2Assert(edge.LengthSquared() > Number.MIN_VALUE);
         this.m_normals[i].SetV(b2Math.CrossVF(edge, 1.0));
         this.m_normals[i].Normalize();
      }
      this.m_centroid = b2PolygonShape.ComputeCentroid(this.m_vertices, this.m_vertexCount);
   };
   b2PolygonShape.AsVector = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsVector(vertices, vertexCount);
      return polygonShape;
   };
   b2PolygonShape.prototype.SetAsBox = function (hx, hy) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set((-hx), (-hy));
      this.m_vertices[1].Set(hx, (-hy));
      this.m_vertices[2].Set(hx, hy);
      this.m_vertices[3].Set((-hx), hy);
      this.m_normals[0].Set(0.0, (-1.0));
      this.m_normals[1].Set(1.0, 0.0);
      this.m_normals[2].Set(0.0, 1.0);
      this.m_normals[3].Set((-1.0), 0.0);
      this.m_centroid.SetZero();
   };
   b2PolygonShape.AsBox = function (hx, hy) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsBox(hx, hy);
      return polygonShape;
   };
   b2PolygonShape.prototype.SetAsOrientedBox = function (hx, hy, center, angle) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      if (center === undefined) center = null;
      if (angle === undefined) angle = 0.0;
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set((-hx), (-hy));
      this.m_vertices[1].Set(hx, (-hy));
      this.m_vertices[2].Set(hx, hy);
      this.m_vertices[3].Set((-hx), hy);
      this.m_normals[0].Set(0.0, (-1.0));
      this.m_normals[1].Set(1.0, 0.0);
      this.m_normals[2].Set(0.0, 1.0);
      this.m_normals[3].Set((-1.0), 0.0);
      this.m_centroid = center;
      var xf = new b2Transform();
      xf.position = center;
      xf.R.Set(angle);
      for (var i = 0; i < this.m_vertexCount; ++i) {
         this.m_vertices[i] = b2Math.MulX(xf, this.m_vertices[i]);
         this.m_normals[i] = b2Math.MulMV(xf.R, this.m_normals[i]);
      }
   };
   b2PolygonShape.AsOrientedBox = function (hx, hy, center, angle) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      if (center === undefined) center = null;
      if (angle === undefined) angle = 0.0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsOrientedBox(hx, hy, center, angle);
      return polygonShape;
   };
   b2PolygonShape.prototype.SetAsEdge = function (v1, v2) {
      this.m_vertexCount = 2;
      this.Reserve(2);
      this.m_vertices[0].SetV(v1);
      this.m_vertices[1].SetV(v2);
      this.m_centroid.x = 0.5 * (v1.x + v2.x);
      this.m_centroid.y = 0.5 * (v1.y + v2.y);
      this.m_normals[0] = b2Math.CrossVF(b2Math.SubtractVV(v2, v1), 1.0);
      this.m_normals[0].Normalize();
      this.m_normals[1].x = (-this.m_normals[0].x);
      this.m_normals[1].y = (-this.m_normals[0].y);
   };
   b2PolygonShape.AsEdge = function (v1, v2) {
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsEdge(v1, v2);
      return polygonShape;
   };
   b2PolygonShape.prototype.TestPoint = function (xf, p) {
      var tVec;
      var tMat = xf.R;
      var tX = p.x - xf.position.x;
      var tY = p.y - xf.position.y;
      var pLocalX = (tX * tMat.col1.x + tY * tMat.col1.y);
      var pLocalY = (tX * tMat.col2.x + tY * tMat.col2.y);
      for (var i = 0; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         tX = pLocalX - tVec.x;
         tY = pLocalY - tVec.y;
         tVec = this.m_normals[i];
         var dot = (tVec.x * tX + tVec.y * tY);
         if (dot > 0.0) {
            return false;
         }
      }
      return true;
   };
   b2PolygonShape.prototype.RayCast = function (output, input, transform) {
      var lower = 0.0;
      var upper = input.maxFraction;
      var tX = 0;
      var tY = 0;
      var tMat;
      var tVec;
      tX = input.p1.x - transform.position.x;
      tY = input.p1.y - transform.position.y;
      tMat = transform.R;
      var p1X = (tX * tMat.col1.x + tY * tMat.col1.y);
      var p1Y = (tX * tMat.col2.x + tY * tMat.col2.y);
      tX = input.p2.x - transform.position.x;
      tY = input.p2.y - transform.position.y;
      tMat = transform.R;
      var p2X = (tX * tMat.col1.x + tY * tMat.col1.y);
      var p2Y = (tX * tMat.col2.x + tY * tMat.col2.y);
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var index = parseInt((-1));
      for (var i = 0; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         tX = tVec.x - p1X;
         tY = tVec.y - p1Y;
         tVec = this.m_normals[i];
         var numerator = (tVec.x * tX + tVec.y * tY);
         var denominator = (tVec.x * dX + tVec.y * dY);
         if (denominator == 0.0) {
            if (numerator < 0.0) {
               return false;
            }
         }
         else {
            if (denominator < 0.0 && numerator < lower * denominator) {
               lower = numerator / denominator;
               index = i;
            }
            else if (denominator > 0.0 && numerator < upper * denominator) {
               upper = numerator / denominator;
            }
         }
         if (upper < lower - Number.MIN_VALUE) {
            return false;
         }
      }
      if (index >= 0) {
         output.fraction = lower;
         tMat = transform.R;
         tVec = this.m_normals[index];
         output.normal.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         output.normal.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         return true;
      }
      return false;
   };
   b2PolygonShape.prototype.ComputeAABB = function (aabb, xf) {
      var tMat = xf.R;
      var tVec = this.m_vertices[0];
      var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var upperX = lowerX;
      var upperY = lowerY;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         lowerX = lowerX < vX ? lowerX : vX;
         lowerY = lowerY < vY ? lowerY : vY;
         upperX = upperX > vX ? upperX : vX;
         upperY = upperY > vY ? upperY : vY;
      }
      aabb.lowerBound.x = lowerX - this.m_radius;
      aabb.lowerBound.y = lowerY - this.m_radius;
      aabb.upperBound.x = upperX + this.m_radius;
      aabb.upperBound.y = upperY + this.m_radius;
   };
   b2PolygonShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      if (this.m_vertexCount == 2) {
         massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);
         massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);
         massData.mass = 0.0;
         massData.I = 0.0;
         return;
      }
      var centerX = 0.0;
      var centerY = 0.0;
      var area = 0.0;
      var I = 0.0;
      var p1X = 0.0;
      var p1Y = 0.0;
      var k_inv3 = 1.0 / 3.0;
      for (var i = 0; i < this.m_vertexCount; ++i) {
         var p2 = this.m_vertices[i];
         var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[parseInt(i + 1)] : this.m_vertices[0];
         var e1X = p2.x - p1X;
         var e1Y = p2.y - p1Y;
         var e2X = p3.x - p1X;
         var e2Y = p3.y - p1Y;
         var D = e1X * e2Y - e1Y * e2X;
         var triangleArea = 0.5 * D;area += triangleArea;
         centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);
         centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);
         var px = p1X;
         var py = p1Y;
         var ex1 = e1X;
         var ey1 = e1Y;
         var ex2 = e2X;
         var ey2 = e2Y;
         var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
         var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;I += D * (intx2 + inty2);
      }
      massData.mass = density * area;
      centerX *= 1.0 / area;
      centerY *= 1.0 / area;
      massData.center.Set(centerX, centerY);
      massData.I = density * I;
   };
   b2PolygonShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var normalL = b2Math.MulTMV(xf.R, normal);
      var offsetL = offset - b2Math.Dot(normal, xf.position);
      var depths = new Vector_a2j_Number();
      var diveCount = 0;
      var intoIndex = parseInt((-1));
      var outoIndex = parseInt((-1));
      var lastSubmerged = false;
      var i = 0;
      for (i = 0;
      i < this.m_vertexCount; ++i) {
         depths[i] = b2Math.Dot(normalL, this.m_vertices[i]) - offsetL;
         var isSubmerged = depths[i] < (-Number.MIN_VALUE);
         if (i > 0) {
            if (isSubmerged) {
               if (!lastSubmerged) {
                  intoIndex = i - 1;
                  diveCount++;
               }
            }
            else {
               if (lastSubmerged) {
                  outoIndex = i - 1;
                  diveCount++;
               }
            }
         }
         lastSubmerged = isSubmerged;
      }
      switch (diveCount) {
      case 0:
         if (lastSubmerged) {
            var md = new b2MassData();
            this.ComputeMass(md, 1);
            c.SetV(b2Math.MulX(xf, md.center));
            return md.mass;
         }
         else {
            return 0;
         }
         break;
      case 1:
         if (intoIndex == (-1)) {
            intoIndex = this.m_vertexCount - 1;
         }
         else {
            outoIndex = this.m_vertexCount - 1;
         }
         break;
      }
      var intoIndex2 = parseInt((intoIndex + 1) % this.m_vertexCount);
      var outoIndex2 = parseInt((outoIndex + 1) % this.m_vertexCount);
      var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
      var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
      var intoVec = new b2Vec2(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
      var outoVec = new b2Vec2(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
      var area = 0;
      var center = new b2Vec2();
      var p2 = this.m_vertices[intoIndex2];
      var p3;
      i = intoIndex2;
      while (i != outoIndex2) {
         i = (i + 1) % this.m_vertexCount;
         if (i == outoIndex2) p3 = outoVec;
         else p3 = this.m_vertices[i];
         var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
         area += triangleArea;
         center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
         center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
         p2 = p3;
      }
      center.Multiply(1 / area);
      c.SetV(b2Math.MulX(xf, center));
      return area;
   };
   b2PolygonShape.prototype.GetVertexCount = function () {
      return this.m_vertexCount;
   };
   b2PolygonShape.prototype.GetVertices = function () {
      return this.m_vertices;
   };
   b2PolygonShape.prototype.GetNormals = function () {
      return this.m_normals;
   };
   b2PolygonShape.prototype.GetSupport = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return bestIndex;
   };
   b2PolygonShape.prototype.GetSupportVertex = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return this.m_vertices[bestIndex];
   };
   b2PolygonShape.prototype.Validate = function () {
      return false;
   };
   b2PolygonShape.prototype.b2PolygonShape = function () {
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_polygonShape;
      this.m_centroid = new b2Vec2();
      this.m_vertices = new Vector();
      this.m_normals = new Vector();
   };
   b2PolygonShape.prototype.Reserve = function (count) {
      if (count === undefined) count = 0;
      for (var i = parseInt(this.m_vertices.length); i < count; i++) {
         this.m_vertices[i] = new b2Vec2();
         this.m_normals[i] = new b2Vec2();
      }
   };
   b2PolygonShape.ComputeCentroid = function (vs, count) {
      if (count === undefined) count = 0;
      var c = new b2Vec2();
      var area = 0.0;
      var p1X = 0.0;
      var p1Y = 0.0;
      var inv3 = 1.0 / 3.0;
      for (var i = 0; i < count; ++i) {
         var p2 = vs[i];
         var p3 = i + 1 < count ? vs[parseInt(i + 1)] : vs[0];
         var e1X = p2.x - p1X;
         var e1Y = p2.y - p1Y;
         var e2X = p3.x - p1X;
         var e2Y = p3.y - p1Y;
         var D = (e1X * e2Y - e1Y * e2X);
         var triangleArea = 0.5 * D;area += triangleArea;
         c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);
         c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);
      }
      c.x *= 1.0 / area;
      c.y *= 1.0 / area;
      return c;
   };
   b2PolygonShape.ComputeOBB = function (obb, vs, count) {
      if (count === undefined) count = 0;
      var i = 0;
      var p = new Vector(count + 1);
      for (i = 0;
      i < count; ++i) {
         p[i] = vs[i];
      }
      p[count] = p[0];
      var minArea = Number.MAX_VALUE;
      for (i = 1;
      i <= count; ++i) {
         var root = p[parseInt(i - 1)];
         var uxX = p[i].x - root.x;
         var uxY = p[i].y - root.y;
         var length = Math.sqrt(uxX * uxX + uxY * uxY);
         uxX /= length;
         uxY /= length;
         var uyX = (-uxY);
         var uyY = uxX;
         var lowerX = Number.MAX_VALUE;
         var lowerY = Number.MAX_VALUE;
         var upperX = (-Number.MAX_VALUE);
         var upperY = (-Number.MAX_VALUE);
         for (var j = 0; j < count; ++j) {
            var dX = p[j].x - root.x;
            var dY = p[j].y - root.y;
            var rX = (uxX * dX + uxY * dY);
            var rY = (uyX * dX + uyY * dY);
            if (rX < lowerX) lowerX = rX;
            if (rY < lowerY) lowerY = rY;
            if (rX > upperX) upperX = rX;
            if (rY > upperY) upperY = rY;
         }
         var area = (upperX - lowerX) * (upperY - lowerY);
         if (area < 0.95 * minArea) {
            minArea = area;
            obb.R.col1.x = uxX;
            obb.R.col1.y = uxY;
            obb.R.col2.x = uyX;
            obb.R.col2.y = uyY;
            var centerX = 0.5 * (lowerX + upperX);
            var centerY = 0.5 * (lowerY + upperY);
            var tMat = obb.R;
            obb.center.x = root.x + (tMat.col1.x * centerX + tMat.col2.x * centerY);
            obb.center.y = root.y + (tMat.col1.y * centerX + tMat.col2.y * centerY);
            obb.extents.x = 0.5 * (upperX - lowerX);
            obb.extents.y = 0.5 * (upperY - lowerY);
         }
      }
   };
   Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2PolygonShape.s_mat = new b2Mat22();
   });
   b2Shape.b2Shape = function () {};
   b2Shape.prototype.Copy = function () {
      return null;
   };
   b2Shape.prototype.Set = function (other) {
      this.m_radius = other.m_radius;
   };
   b2Shape.prototype.GetType = function () {
      return this.m_type;
   };
   b2Shape.prototype.TestPoint = function (xf, p) {
      return false;
   };
   b2Shape.prototype.RayCast = function (output, input, transform) {
      return false;
   };
   b2Shape.prototype.ComputeAABB = function (aabb, xf) {};
   b2Shape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
   };
   b2Shape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      return 0;
   };
   b2Shape.TestOverlap = function (shape1, transform1, shape2, transform2) {
      var input = new b2DistanceInput();
      input.proxyA = new b2DistanceProxy();
      input.proxyA.Set(shape1);
      input.proxyB = new b2DistanceProxy();
      input.proxyB.Set(shape2);
      input.transformA = transform1;
      input.transformB = transform2;
      input.useRadii = true;
      var simplexCache = new b2SimplexCache();
      simplexCache.count = 0;
      var output = new b2DistanceOutput();
      b2Distance.Distance(output, simplexCache, input);
      return output.distance < 10.0 * Number.MIN_VALUE;
   };
   b2Shape.prototype.b2Shape = function () {
      this.m_type = b2Shape.e_unknownShape;
      this.m_radius = b2Settings.b2_linearSlop;
   };
   Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2Shape.e_unknownShape = parseInt((-1));
      Box2D.Collision.Shapes.b2Shape.e_circleShape = 0;
      Box2D.Collision.Shapes.b2Shape.e_polygonShape = 1;
      Box2D.Collision.Shapes.b2Shape.e_edgeShape = 2;
      Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount = 3;
      Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;
      Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;
      Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = parseInt((-1));
   });
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3;

   b2Color.b2Color = function () {
      this._r = 0;
      this._g = 0;
      this._b = 0;
   };
   b2Color.prototype.b2Color = function (rr, gg, bb) {
      if (rr === undefined) rr = 0;
      if (gg === undefined) gg = 0;
      if (bb === undefined) bb = 0;
      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
   };
   b2Color.prototype.Set = function (rr, gg, bb) {
      if (rr === undefined) rr = 0;
      if (gg === undefined) gg = 0;
      if (bb === undefined) bb = 0;
      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
   };
   Object.defineProperty(b2Color.prototype, 'r', {
      enumerable: false,
      configurable: true,
      set: function (rr) {
         if (rr === undefined) rr = 0;
         this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'g', {
      enumerable: false,
      configurable: true,
      set: function (gg) {
         if (gg === undefined) gg = 0;
         this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'b', {
      enumerable: false,
      configurable: true,
      set: function (bb) {
         if (bb === undefined) bb = 0;
         this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'color', {
      enumerable: false,
      configurable: true,
      get: function () {
         return (this._r << 16) | (this._g << 8) | (this._b);
      }
   });
   b2Settings.b2Settings = function () {};
   b2Settings.b2MixFriction = function (friction1, friction2) {
      if (friction1 === undefined) friction1 = 0;
      if (friction2 === undefined) friction2 = 0;
      return Math.sqrt(friction1 * friction2);
   };
   b2Settings.b2MixRestitution = function (restitution1, restitution2) {
      if (restitution1 === undefined) restitution1 = 0;
      if (restitution2 === undefined) restitution2 = 0;
      return restitution1 > restitution2 ? restitution1 : restitution2;
   };
   b2Settings.b2Assert = function (a) {
      if (!a) {
         throw "Assertion Failed";
      }
   };
   Box2D.postDefs.push(function () {
      Box2D.Common.b2Settings.VERSION = "2.1alpha";
      Box2D.Common.b2Settings.USHRT_MAX = 0x0000ffff;
      Box2D.Common.b2Settings.b2_pi = Math.PI;
      Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;
      Box2D.Common.b2Settings.b2_aabbExtension = 0.1;
      Box2D.Common.b2Settings.b2_aabbMultiplier = 2.0;
      Box2D.Common.b2Settings.b2_polygonRadius = 2.0 * b2Settings.b2_linearSlop;
      Box2D.Common.b2Settings.b2_linearSlop = 0.005;
      Box2D.Common.b2Settings.b2_angularSlop = 2.0 / 180.0 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_toiSlop = 8.0 * b2Settings.b2_linearSlop;
      Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;
      Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;
      Box2D.Common.b2Settings.b2_velocityThreshold = 1.0;
      Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;
      Box2D.Common.b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_maxTranslation = 2.0;
      Box2D.Common.b2Settings.b2_maxTranslationSquared = b2Settings.b2_maxTranslation * b2Settings.b2_maxTranslation;
      Box2D.Common.b2Settings.b2_maxRotation = 0.5 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_maxRotationSquared = b2Settings.b2_maxRotation * b2Settings.b2_maxRotation;
      Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;
      Box2D.Common.b2Settings.b2_timeToSleep = 0.5;
      Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;
      Box2D.Common.b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 * b2Settings.b2_pi;
   });
})();
(function () {
   var b2AABB = Box2D.Collision.b2AABB,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3;

   b2Mat22.b2Mat22 = function () {
      this.col1 = new b2Vec2();
      this.col2 = new b2Vec2();
   };
   b2Mat22.prototype.b2Mat22 = function () {
      this.SetIdentity();
   };
   b2Mat22.FromAngle = function (angle) {
      if (angle === undefined) angle = 0;
      var mat = new b2Mat22();
      mat.Set(angle);
      return mat;
   };
   b2Mat22.FromVV = function (c1, c2) {
      var mat = new b2Mat22();
      mat.SetVV(c1, c2);
      return mat;
   };
   b2Mat22.prototype.Set = function (angle) {
      if (angle === undefined) angle = 0;
      var c = Math.cos(angle);
      var s = Math.sin(angle);
      this.col1.x = c;
      this.col2.x = (-s);
      this.col1.y = s;
      this.col2.y = c;
   };
   b2Mat22.prototype.SetVV = function (c1, c2) {
      this.col1.SetV(c1);
      this.col2.SetV(c2);
   };
   b2Mat22.prototype.Copy = function () {
      var mat = new b2Mat22();
      mat.SetM(this);
      return mat;
   };
   b2Mat22.prototype.SetM = function (m) {
      this.col1.SetV(m.col1);
      this.col2.SetV(m.col2);
   };
   b2Mat22.prototype.AddM = function (m) {
      this.col1.x += m.col1.x;
      this.col1.y += m.col1.y;
      this.col2.x += m.col2.x;
      this.col2.y += m.col2.y;
   };
   b2Mat22.prototype.SetIdentity = function () {
      this.col1.x = 1.0;
      this.col2.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 1.0;
   };
   b2Mat22.prototype.SetZero = function () {
      this.col1.x = 0.0;
      this.col2.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 0.0;
   };
   b2Mat22.prototype.GetAngle = function () {
      return Math.atan2(this.col1.y, this.col1.x);
   };
   b2Mat22.prototype.GetInverse = function (out) {
      var a = this.col1.x;
      var b = this.col2.x;
      var c = this.col1.y;
      var d = this.col2.y;
      var det = a * d - b * c;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.col1.x = det * d;
      out.col2.x = (-det * b);
      out.col1.y = (-det * c);
      out.col2.y = det * a;
      return out;
   };
   b2Mat22.prototype.Solve = function (out, bX, bY) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      var a11 = this.col1.x;
      var a12 = this.col2.x;
      var a21 = this.col1.y;
      var a22 = this.col2.y;
      var det = a11 * a22 - a12 * a21;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (a22 * bX - a12 * bY);
      out.y = det * (a11 * bY - a21 * bX);
      return out;
   };
   b2Mat22.prototype.Abs = function () {
      this.col1.Abs();
      this.col2.Abs();
   };
   b2Mat33.b2Mat33 = function () {
      this.col1 = new b2Vec3();
      this.col2 = new b2Vec3();
      this.col3 = new b2Vec3();
   };
   b2Mat33.prototype.b2Mat33 = function (c1, c2, c3) {
      if (c1 === undefined) c1 = null;
      if (c2 === undefined) c2 = null;
      if (c3 === undefined) c3 = null;
      if (!c1 && !c2 && !c3) {
         this.col1.SetZero();
         this.col2.SetZero();
         this.col3.SetZero();
      }
      else {
         this.col1.SetV(c1);
         this.col2.SetV(c2);
         this.col3.SetV(c3);
      }
   };
   b2Mat33.prototype.SetVVV = function (c1, c2, c3) {
      this.col1.SetV(c1);
      this.col2.SetV(c2);
      this.col3.SetV(c3);
   };
   b2Mat33.prototype.Copy = function () {
      return new b2Mat33(this.col1, this.col2, this.col3);
   };
   b2Mat33.prototype.SetM = function (m) {
      this.col1.SetV(m.col1);
      this.col2.SetV(m.col2);
      this.col3.SetV(m.col3);
   };
   b2Mat33.prototype.AddM = function (m) {
      this.col1.x += m.col1.x;
      this.col1.y += m.col1.y;
      this.col1.z += m.col1.z;
      this.col2.x += m.col2.x;
      this.col2.y += m.col2.y;
      this.col2.z += m.col2.z;
      this.col3.x += m.col3.x;
      this.col3.y += m.col3.y;
      this.col3.z += m.col3.z;
   };
   b2Mat33.prototype.SetIdentity = function () {
      this.col1.x = 1.0;
      this.col2.x = 0.0;
      this.col3.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 1.0;
      this.col3.y = 0.0;
      this.col1.z = 0.0;
      this.col2.z = 0.0;
      this.col3.z = 1.0;
   };
   b2Mat33.prototype.SetZero = function () {
      this.col1.x = 0.0;
      this.col2.x = 0.0;
      this.col3.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 0.0;
      this.col3.y = 0.0;
      this.col1.z = 0.0;
      this.col2.z = 0.0;
      this.col3.z = 0.0;
   };
   b2Mat33.prototype.Solve22 = function (out, bX, bY) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      var a11 = this.col1.x;
      var a12 = this.col2.x;
      var a21 = this.col1.y;
      var a22 = this.col2.y;
      var det = a11 * a22 - a12 * a21;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (a22 * bX - a12 * bY);
      out.y = det * (a11 * bY - a21 * bX);
      return out;
   };
   b2Mat33.prototype.Solve33 = function (out, bX, bY, bZ) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      if (bZ === undefined) bZ = 0;
      var a11 = this.col1.x;
      var a21 = this.col1.y;
      var a31 = this.col1.z;
      var a12 = this.col2.x;
      var a22 = this.col2.y;
      var a32 = this.col2.z;
      var a13 = this.col3.x;
      var a23 = this.col3.y;
      var a33 = this.col3.z;
      var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));
      out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));
      out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));
      return out;
   };
   b2Math.b2Math = function () {};
   b2Math.IsValid = function (x) {
      if (x === undefined) x = 0;
      return isFinite(x);
   };
   b2Math.Dot = function (a, b) {
      return a.x * b.x + a.y * b.y;
   };
   b2Math.CrossVV = function (a, b) {
      return a.x * b.y - a.y * b.x;
   };
   b2Math.CrossVF = function (a, s) {
      if (s === undefined) s = 0;
      var v = new b2Vec2(s * a.y, (-s * a.x));
      return v;
   };
   b2Math.CrossFV = function (s, a) {
      if (s === undefined) s = 0;
      var v = new b2Vec2((-s * a.y), s * a.x);
      return v;
   };
   b2Math.MulMV = function (A, v) {
      var u = new b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
      return u;
   };
   b2Math.MulTMV = function (A, v) {
      var u = new b2Vec2(b2Math.Dot(v, A.col1), b2Math.Dot(v, A.col2));
      return u;
   };
   b2Math.MulX = function (T, v) {
      var a = b2Math.MulMV(T.R, v);
      a.x += T.position.x;
      a.y += T.position.y;
      return a;
   };
   b2Math.MulXT = function (T, v) {
      var a = b2Math.SubtractVV(v, T.position);
      var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
      a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
      a.x = tX;
      return a;
   };
   b2Math.AddVV = function (a, b) {
      var v = new b2Vec2(a.x + b.x, a.y + b.y);
      return v;
   };
   b2Math.SubtractVV = function (a, b) {
      var v = new b2Vec2(a.x - b.x, a.y - b.y);
      return v;
   };
   b2Math.Distance = function (a, b) {
      var cX = a.x - b.x;
      var cY = a.y - b.y;
      return Math.sqrt(cX * cX + cY * cY);
   };
   b2Math.DistanceSquared = function (a, b) {
      var cX = a.x - b.x;
      var cY = a.y - b.y;
      return (cX * cX + cY * cY);
   };
   b2Math.MulFV = function (s, a) {
      if (s === undefined) s = 0;
      var v = new b2Vec2(s * a.x, s * a.y);
      return v;
   };
   b2Math.AddMM = function (A, B) {
      var C = b2Mat22.FromVV(b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2));
      return C;
   };
   b2Math.MulMM = function (A, B) {
      var C = b2Mat22.FromVV(b2Math.MulMV(A, B.col1), b2Math.MulMV(A, B.col2));
      return C;
   };
   b2Math.MulTMM = function (A, B) {
      var c1 = new b2Vec2(b2Math.Dot(A.col1, B.col1), b2Math.Dot(A.col2, B.col1));
      var c2 = new b2Vec2(b2Math.Dot(A.col1, B.col2), b2Math.Dot(A.col2, B.col2));
      var C = b2Mat22.FromVV(c1, c2);
      return C;
   };
   b2Math.Abs = function (a) {
      if (a === undefined) a = 0;
      return a > 0.0 ? a : (-a);
   };
   b2Math.AbsV = function (a) {
      var b = new b2Vec2(b2Math.Abs(a.x), b2Math.Abs(a.y));
      return b;
   };
   b2Math.AbsM = function (A) {
      var B = b2Mat22.FromVV(b2Math.AbsV(A.col1), b2Math.AbsV(A.col2));
      return B;
   };
   b2Math.Min = function (a, b) {
      if (a === undefined) a = 0;
      if (b === undefined) b = 0;
      return a < b ? a : b;
   };
   b2Math.MinV = function (a, b) {
      var c = new b2Vec2(b2Math.Min(a.x, b.x), b2Math.Min(a.y, b.y));
      return c;
   };
   b2Math.Max = function (a, b) {
      if (a === undefined) a = 0;
      if (b === undefined) b = 0;
      return a > b ? a : b;
   };
   b2Math.MaxV = function (a, b) {
      var c = new b2Vec2(b2Math.Max(a.x, b.x), b2Math.Max(a.y, b.y));
      return c;
   };
   b2Math.Clamp = function (a, low, high) {
      if (a === undefined) a = 0;
      if (low === undefined) low = 0;
      if (high === undefined) high = 0;
      return a < low ? low : a > high ? high : a;
   };
   b2Math.ClampV = function (a, low, high) {
      return b2Math.MaxV(low, b2Math.MinV(a, high));
   };
   b2Math.Swap = function (a, b) {
      var tmp = a[0];
      a[0] = b[0];
      b[0] = tmp;
   };
   b2Math.Random = function () {
      return Math.random() * 2 - 1;
   };
   b2Math.RandomRange = function (lo, hi) {
      if (lo === undefined) lo = 0;
      if (hi === undefined) hi = 0;
      var r = Math.random();
      r = (hi - lo) * r + lo;
      return r;
   };
   b2Math.NextPowerOfTwo = function (x) {
      if (x === undefined) x = 0;
      x |= (x >> 1) & 0x7FFFFFFF;
      x |= (x >> 2) & 0x3FFFFFFF;
      x |= (x >> 4) & 0x0FFFFFFF;
      x |= (x >> 8) & 0x00FFFFFF;
      x |= (x >> 16) & 0x0000FFFF;
      return x + 1;
   };
   b2Math.IsPowerOfTwo = function (x) {
      if (x === undefined) x = 0;
      var result = x > 0 && (x & (x - 1)) == 0;
      return result;
   };
   Box2D.postDefs.push(function () {
      Box2D.Common.Math.b2Math.b2Vec2_zero = new b2Vec2(0.0, 0.0);
      Box2D.Common.Math.b2Math.b2Mat22_identity = b2Mat22.FromVV(new b2Vec2(1.0, 0.0), new b2Vec2(0.0, 1.0));
      Box2D.Common.Math.b2Math.b2Transform_identity = new b2Transform(b2Math.b2Vec2_zero, b2Math.b2Mat22_identity);
   });
   b2Sweep.b2Sweep = function () {
      this.localCenter = new b2Vec2();
      this.c0 = new b2Vec2;
      this.c = new b2Vec2();
   };
   b2Sweep.prototype.Set = function (other) {
      this.localCenter.SetV(other.localCenter);
      this.c0.SetV(other.c0);
      this.c.SetV(other.c);
      this.a0 = other.a0;
      this.a = other.a;
      this.t0 = other.t0;
   };
   b2Sweep.prototype.Copy = function () {
      var copy = new b2Sweep();
      copy.localCenter.SetV(this.localCenter);
      copy.c0.SetV(this.c0);
      copy.c.SetV(this.c);
      copy.a0 = this.a0;
      copy.a = this.a;
      copy.t0 = this.t0;
      return copy;
   };
   b2Sweep.prototype.GetTransform = function (xf, alpha) {
      if (alpha === undefined) alpha = 0;
      xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
      xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
      var angle = (1.0 - alpha) * this.a0 + alpha * this.a;
      xf.R.Set(angle);
      var tMat = xf.R;
      xf.position.x -= (tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y);
      xf.position.y -= (tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y);
   };
   b2Sweep.prototype.Advance = function (t) {
      if (t === undefined) t = 0;
      if (this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {
         var alpha = (t - this.t0) / (1.0 - this.t0);
         this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
         this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
         this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;
         this.t0 = t;
      }
   };
   b2Transform.b2Transform = function () {
      this.position = new b2Vec2;
      this.R = new b2Mat22();
   };
   b2Transform.prototype.b2Transform = function (pos, r) {
      if (pos === undefined) pos = null;
      if (r === undefined) r = null;
      if (pos) {
         this.position.SetV(pos);
         this.R.SetM(r);
      }
   };
   b2Transform.prototype.Initialize = function (pos, r) {
      this.position.SetV(pos);
      this.R.SetM(r);
   };
   b2Transform.prototype.SetIdentity = function () {
      this.position.SetZero();
      this.R.SetIdentity();
   };
   b2Transform.prototype.Set = function (x) {
      this.position.SetV(x.position);
      this.R.SetM(x.R);
   };
   b2Transform.prototype.GetAngle = function () {
      return Math.atan2(this.R.col1.y, this.R.col1.x);
   };
   b2Vec2.b2Vec2 = function () {};
   b2Vec2.prototype.b2Vec2 = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      this.x = x_;
      this.y = y_;
   };
   b2Vec2.prototype.SetZero = function () {
      this.x = 0.0;
      this.y = 0.0;
   };
   b2Vec2.prototype.Set = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      this.x = x_;
      this.y = y_;
   };
   b2Vec2.prototype.SetV = function (v) {
      this.x = v.x;
      this.y = v.y;
   };
   b2Vec2.prototype.GetNegative = function () {
      return new b2Vec2((-this.x), (-this.y));
   };
   b2Vec2.prototype.NegativeSelf = function () {
      this.x = (-this.x);
      this.y = (-this.y);
   };
   b2Vec2.Make = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      return new b2Vec2(x_, y_);
   };
   b2Vec2.prototype.Copy = function () {
      return new b2Vec2(this.x, this.y);
   };
   b2Vec2.prototype.Add = function (v) {
      this.x += v.x;
      this.y += v.y;
   };
   b2Vec2.prototype.Subtract = function (v) {
      this.x -= v.x;
      this.y -= v.y;
   };
   b2Vec2.prototype.Multiply = function (a) {
      if (a === undefined) a = 0;
      this.x *= a;
      this.y *= a;
   };
   b2Vec2.prototype.MulM = function (A) {
      var tX = this.x;
      this.x = A.col1.x * tX + A.col2.x * this.y;
      this.y = A.col1.y * tX + A.col2.y * this.y;
   };
   b2Vec2.prototype.MulTM = function (A) {
      var tX = b2Math.Dot(this, A.col1);
      this.y = b2Math.Dot(this, A.col2);
      this.x = tX;
   };
   b2Vec2.prototype.CrossVF = function (s) {
      if (s === undefined) s = 0;
      var tX = this.x;
      this.x = s * this.y;
      this.y = (-s * tX);
   };
   b2Vec2.prototype.CrossFV = function (s) {
      if (s === undefined) s = 0;
      var tX = this.x;
      this.x = (-s * this.y);
      this.y = s * tX;
   };
   b2Vec2.prototype.MinV = function (b) {
      this.x = this.x < b.x ? this.x : b.x;
      this.y = this.y < b.y ? this.y : b.y;
   };
   b2Vec2.prototype.MaxV = function (b) {
      this.x = this.x > b.x ? this.x : b.x;
      this.y = this.y > b.y ? this.y : b.y;
   };
   b2Vec2.prototype.Abs = function () {
      if (this.x < 0) this.x = (-this.x);
      if (this.y < 0) this.y = (-this.y);
   };
   b2Vec2.prototype.Length = function () {
      return Math.sqrt(this.x * this.x + this.y * this.y);
   };
   b2Vec2.prototype.LengthSquared = function () {
      return (this.x * this.x + this.y * this.y);
   };
   b2Vec2.prototype.Normalize = function () {
      var length = Math.sqrt(this.x * this.x + this.y * this.y);
      if (length < Number.MIN_VALUE) {
         return 0.0;
      }
      var invLength = 1.0 / length;
      this.x *= invLength;
      this.y *= invLength;
      return length;
   };
   b2Vec2.prototype.IsValid = function () {
      return b2Math.IsValid(this.x) && b2Math.IsValid(this.y);
   };
   b2Vec3.b2Vec3 = function () {};
   b2Vec3.prototype.b2Vec3 = function (x, y, z) {
      if (x === undefined) x = 0;
      if (y === undefined) y = 0;
      if (z === undefined) z = 0;
      this.x = x;
      this.y = y;
      this.z = z;
   };
   b2Vec3.prototype.SetZero = function () {
      this.x = this.y = this.z = 0.0;
   };
   b2Vec3.prototype.Set = function (x, y, z) {
      if (x === undefined) x = 0;
      if (y === undefined) y = 0;
      if (z === undefined) z = 0;
      this.x = x;
      this.y = y;
      this.z = z;
   };
   b2Vec3.prototype.SetV = function (v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
   };
   b2Vec3.prototype.GetNegative = function () {
      return new b2Vec3((-this.x), (-this.y), (-this.z));
   };
   b2Vec3.prototype.NegativeSelf = function () {
      this.x = (-this.x);
      this.y = (-this.y);
      this.z = (-this.z);
   };
   b2Vec3.prototype.Copy = function () {
      return new b2Vec3(this.x, this.y, this.z);
   };
   b2Vec3.prototype.Add = function (v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
   };
   b2Vec3.prototype.Subtract = function (v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
   };
   b2Vec3.prototype.Multiply = function (a) {
      if (a === undefined) a = 0;
      this.x *= a;
      this.y *= a;
      this.z *= a;
   };
})();
(function () {
   var b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,
      b2Contact = Box2D.Dynamics.Contacts.b2Contact,
      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,
      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,
      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,
      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,
      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,
      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,
      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,
      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,
      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
      b2Controller = Box2D.Dynamics.Controllers.b2Controller,
      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,
      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,
      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,
      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,
      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,
      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,
      b2Joint = Box2D.Dynamics.Joints.b2Joint,
      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,
      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,
      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,
      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,
      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,
      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,
      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,
      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,
      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,
      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,
      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,
      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,
      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef;

   b2Body.b2Body = function () {
      this.m_xf = new b2Transform();
      this.m_sweep = new b2Sweep();
      this.m_linearVelocity = new b2Vec2();
      this.m_force = new b2Vec2();
   };
   b2Body.prototype.connectEdges = function (s1, s2, angle1) {
      if (angle1 === undefined) angle1 = 0;
      var angle2 = Math.atan2(s2.GetDirectionVector().y, s2.GetDirectionVector().x);
      var coreOffset = Math.tan((angle2 - angle1) * 0.5);
      var core = b2Math.MulFV(coreOffset, s2.GetDirectionVector());
      core = b2Math.SubtractVV(core, s2.GetNormalVector());
      core = b2Math.MulFV(b2Settings.b2_toiSlop, core);
      core = b2Math.AddVV(core, s2.GetVertex1());
      var cornerDir = b2Math.AddVV(s1.GetDirectionVector(), s2.GetDirectionVector());
      cornerDir.Normalize();
      var convex = b2Math.Dot(s1.GetDirectionVector(), s2.GetNormalVector()) > 0.0;
      s1.SetNextEdge(s2, core, cornerDir, convex);
      s2.SetPrevEdge(s1, core, cornerDir, convex);
      return angle2;
   };
   b2Body.prototype.CreateFixture = function (def) {
      if (this.m_world.IsLocked() == true) {
         return null;
      }
      var fixture = new b2Fixture();
      fixture.Create(this, this.m_xf, def);
      if (this.m_flags & b2Body.e_activeFlag) {
         var broadPhase = this.m_world.m_contactManager.m_broadPhase;
         fixture.CreateProxy(broadPhase, this.m_xf);
      }
      fixture.m_next = this.m_fixtureList;
      this.m_fixtureList = fixture;
      ++this.m_fixtureCount;
      fixture.m_body = this;
      if (fixture.m_density > 0.0) {
         this.ResetMassData();
      }
      this.m_world.m_flags |= b2World.e_newFixture;
      return fixture;
   };
   b2Body.prototype.CreateFixture2 = function (shape, density) {
      if (density === undefined) density = 0.0;
      var def = new b2FixtureDef();
      def.shape = shape;
      def.density = density;
      return this.CreateFixture(def);
   };
   b2Body.prototype.DestroyFixture = function (fixture) {
      if (this.m_world.IsLocked() == true) {
         return;
      }
      var node = this.m_fixtureList;
      var ppF = null;
      var found = false;
      while (node != null) {
         if (node == fixture) {
            if (ppF) ppF.m_next = fixture.m_next;
            else this.m_fixtureList = fixture.m_next;
            found = true;
            break;
         }
         ppF = node;
         node = node.m_next;
      }
      var edge = this.m_contactList;
      while (edge) {
         var c = edge.contact;
         edge = edge.next;
         var fixtureA = c.GetFixtureA();
         var fixtureB = c.GetFixtureB();
         if (fixture == fixtureA || fixture == fixtureB) {
            this.m_world.m_contactManager.Destroy(c);
         }
      }
      if (this.m_flags & b2Body.e_activeFlag) {
         var broadPhase = this.m_world.m_contactManager.m_broadPhase;
         fixture.DestroyProxy(broadPhase);
      }
      else {}
      fixture.Destroy();
      fixture.m_body = null;
      fixture.m_next = null;
      --this.m_fixtureCount;
      this.ResetMassData();
   };
   b2Body.prototype.SetPositionAndAngle = function (position, angle) {
      if (angle === undefined) angle = 0;
      var f;
      if (this.m_world.IsLocked() == true) {
         return;
      }
      this.m_xf.R.Set(angle);
      this.m_xf.position.SetV(position);
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      this.m_sweep.c.x += this.m_xf.position.x;
      this.m_sweep.c.y += this.m_xf.position.y;
      this.m_sweep.c0.SetV(this.m_sweep.c);
      this.m_sweep.a0 = this.m_sweep.a = angle;
      var broadPhase = this.m_world.m_contactManager.m_broadPhase;
      for (f = this.m_fixtureList;
      f; f = f.m_next) {
         f.Synchronize(broadPhase, this.m_xf, this.m_xf);
      }
      this.m_world.m_contactManager.FindNewContacts();
   };
   b2Body.prototype.SetTransform = function (xf) {
      this.SetPositionAndAngle(xf.position, xf.GetAngle());
   };
   b2Body.prototype.GetTransform = function () {
      return this.m_xf;
   };
   b2Body.prototype.GetPosition = function () {
      return this.m_xf.position;
   };
   b2Body.prototype.SetPosition = function (position) {
      this.SetPositionAndAngle(position, this.GetAngle());
   };
   b2Body.prototype.GetAngle = function () {
      return this.m_sweep.a;
   };
   b2Body.prototype.SetAngle = function (angle) {
      if (angle === undefined) angle = 0;
      this.SetPositionAndAngle(this.GetPosition(), angle);
   };
   b2Body.prototype.GetWorldCenter = function () {
      return this.m_sweep.c;
   };
   b2Body.prototype.GetLocalCenter = function () {
      return this.m_sweep.localCenter;
   };
   b2Body.prototype.SetLinearVelocity = function (v) {
      if (this.m_type == b2Body.b2_staticBody) {
         return;
      }
      this.m_linearVelocity.SetV(v);
   };
   b2Body.prototype.GetLinearVelocity = function () {
      return this.m_linearVelocity;
   };
   b2Body.prototype.SetAngularVelocity = function (omega) {
      if (omega === undefined) omega = 0;
      if (this.m_type == b2Body.b2_staticBody) {
         return;
      }
      this.m_angularVelocity = omega;
   };
   b2Body.prototype.GetAngularVelocity = function () {
      return this.m_angularVelocity;
   };
   b2Body.prototype.GetDefinition = function () {
      var bd = new b2BodyDef();
      bd.type = this.GetType();
      bd.allowSleep = (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;
      bd.angle = this.GetAngle();
      bd.angularDamping = this.m_angularDamping;
      bd.angularVelocity = this.m_angularVelocity;
      bd.fixedRotation = (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;
      bd.bullet = (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;
      bd.awake = (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;
      bd.linearDamping = this.m_linearDamping;
      bd.linearVelocity.SetV(this.GetLinearVelocity());
      bd.position = this.GetPosition();
      bd.userData = this.GetUserData();
      return bd;
   };
   b2Body.prototype.ApplyForce = function (force, point) {
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_force.x += force.x;
      this.m_force.y += force.y;
      this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);
   };
   b2Body.prototype.ApplyTorque = function (torque) {
      if (torque === undefined) torque = 0;
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_torque += torque;
   };
   b2Body.prototype.ApplyImpulse = function (impulse, point) {
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_linearVelocity.x += this.m_invMass * impulse.x;
      this.m_linearVelocity.y += this.m_invMass * impulse.y;
      this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
   };
   b2Body.prototype.Split = function (callback) {
      var linearVelocity = this.GetLinearVelocity().Copy();
      var angularVelocity = this.GetAngularVelocity();
      var center = this.GetWorldCenter();
      var body1 = this;
      var body2 = this.m_world.CreateBody(this.GetDefinition());
      var prev;
      for (var f = body1.m_fixtureList; f;) {
         if (callback(f)) {
            var next = f.m_next;
            if (prev) {
               prev.m_next = next;
            }
            else {
               body1.m_fixtureList = next;
            }
            body1.m_fixtureCount--;
            f.m_next = body2.m_fixtureList;
            body2.m_fixtureList = f;
            body2.m_fixtureCount++;
            f.m_body = body2;
            f = next;
         }
         else {
            prev = f;
            f = f.m_next;
         }
      }
      body1.ResetMassData();
      body2.ResetMassData();
      var center1 = body1.GetWorldCenter();
      var center2 = body2.GetWorldCenter();
      var velocity1 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center1, center)));
      var velocity2 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center2, center)));
      body1.SetLinearVelocity(velocity1);
      body2.SetLinearVelocity(velocity2);
      body1.SetAngularVelocity(angularVelocity);
      body2.SetAngularVelocity(angularVelocity);
      body1.SynchronizeFixtures();
      body2.SynchronizeFixtures();
      return body2;
   };
   b2Body.prototype.Merge = function (other) {
      var f;
      for (f = other.m_fixtureList;
      f;) {
         var next = f.m_next;
         other.m_fixtureCount--;
         f.m_next = this.m_fixtureList;
         this.m_fixtureList = f;
         this.m_fixtureCount++;
         f.m_body = body2;
         f = next;
      }
      body1.m_fixtureCount = 0;
      var body1 = this;
      var body2 = other;
      var center1 = body1.GetWorldCenter();
      var center2 = body2.GetWorldCenter();
      var velocity1 = body1.GetLinearVelocity().Copy();
      var velocity2 = body2.GetLinearVelocity().Copy();
      var angular1 = body1.GetAngularVelocity();
      var angular = body2.GetAngularVelocity();
      body1.ResetMassData();
      this.SynchronizeFixtures();
   };
   b2Body.prototype.GetMass = function () {
      return this.m_mass;
   };
   b2Body.prototype.GetInertia = function () {
      return this.m_I;
   };
   b2Body.prototype.GetMassData = function (data) {
      data.mass = this.m_mass;
      data.I = this.m_I;
      data.center.SetV(this.m_sweep.localCenter);
   };
   b2Body.prototype.SetMassData = function (massData) {
      b2Settings.b2Assert(this.m_world.IsLocked() == false);
      if (this.m_world.IsLocked() == true) {
         return;
      }
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      this.m_invMass = 0.0;
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_mass = massData.mass;
      if (this.m_mass <= 0.0) {
         this.m_mass = 1.0;
      }
      this.m_invMass = 1.0 / this.m_mass;
      if (massData.I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {
         this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);
         this.m_invI = 1.0 / this.m_I;
      }
      var oldCenter = this.m_sweep.c.Copy();
      this.m_sweep.localCenter.SetV(massData.center);
      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
   };
   b2Body.prototype.ResetMassData = function () {
      this.m_mass = 0.0;
      this.m_invMass = 0.0;
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_sweep.localCenter.SetZero();
      if (this.m_type == b2Body.b2_staticBody || this.m_type == b2Body.b2_kinematicBody) {
         return;
      }
      var center = b2Vec2.Make(0, 0);
      for (var f = this.m_fixtureList; f; f = f.m_next) {
         if (f.m_density == 0.0) {
            continue;
         }
         var massData = f.GetMassData();
         this.m_mass += massData.mass;
         center.x += massData.center.x * massData.mass;
         center.y += massData.center.y * massData.mass;
         this.m_I += massData.I;
      }
      if (this.m_mass > 0.0) {
         this.m_invMass = 1.0 / this.m_mass;
         center.x *= this.m_invMass;
         center.y *= this.m_invMass;
      }
      else {
         this.m_mass = 1.0;
         this.m_invMass = 1.0;
      }
      if (this.m_I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {
         this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);
         this.m_I *= this.m_inertiaScale;
         b2Settings.b2Assert(this.m_I > 0);
         this.m_invI = 1.0 / this.m_I;
      }
      else {
         this.m_I = 0.0;
         this.m_invI = 0.0;
      }
      var oldCenter = this.m_sweep.c.Copy();
      this.m_sweep.localCenter.SetV(center);
      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
   };
   b2Body.prototype.GetWorldPoint = function (localPoint) {
      var A = this.m_xf.R;
      var u = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
      u.x += this.m_xf.position.x;
      u.y += this.m_xf.position.y;
      return u;
   };
   b2Body.prototype.GetWorldVector = function (localVector) {
      return b2Math.MulMV(this.m_xf.R, localVector);
   };
   b2Body.prototype.GetLocalPoint = function (worldPoint) {
      return b2Math.MulXT(this.m_xf, worldPoint);
   };
   b2Body.prototype.GetLocalVector = function (worldVector) {
      return b2Math.MulTMV(this.m_xf.R, worldVector);
   };
   b2Body.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint) {
      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
   };
   b2Body.prototype.GetLinearVelocityFromLocalPoint = function (localPoint) {
      var A = this.m_xf.R;
      var worldPoint = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
      worldPoint.x += this.m_xf.position.x;
      worldPoint.y += this.m_xf.position.y;
      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
   };
   b2Body.prototype.GetLinearDamping = function () {
      return this.m_linearDamping;
   };
   b2Body.prototype.SetLinearDamping = function (linearDamping) {
      if (linearDamping === undefined) linearDamping = 0;
      this.m_linearDamping = linearDamping;
   };
   b2Body.prototype.GetAngularDamping = function () {
      return this.m_angularDamping;
   };
   b2Body.prototype.SetAngularDamping = function (angularDamping) {
      if (angularDamping === undefined) angularDamping = 0;
      this.m_angularDamping = angularDamping;
   };
   b2Body.prototype.SetType = function (type) {
      if (type === undefined) type = 0;
      if (this.m_type == type) {
         return;
      }
      this.m_type = type;
      this.ResetMassData();
      if (this.m_type == b2Body.b2_staticBody) {
         this.m_linearVelocity.SetZero();
         this.m_angularVelocity = 0.0;
      }
      this.SetAwake(true);
      this.m_force.SetZero();
      this.m_torque = 0.0;
      for (var ce = this.m_contactList; ce; ce = ce.next) {
         ce.contact.FlagForFiltering();
      }
   };
   b2Body.prototype.GetType = function () {
      return this.m_type;
   };
   b2Body.prototype.SetBullet = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_bulletFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_bulletFlag;
      }
   };
   b2Body.prototype.IsBullet = function () {
      return (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;
   };
   b2Body.prototype.SetSleepingAllowed = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_allowSleepFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_allowSleepFlag;
         this.SetAwake(true);
      }
   };
   b2Body.prototype.SetAwake = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_awakeFlag;
         this.m_sleepTime = 0.0;
      }
      else {
         this.m_flags &= ~b2Body.e_awakeFlag;
         this.m_sleepTime = 0.0;
         this.m_linearVelocity.SetZero();
         this.m_angularVelocity = 0.0;
         this.m_force.SetZero();
         this.m_torque = 0.0;
      }
   };
   b2Body.prototype.IsAwake = function () {
      return (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;
   };
   b2Body.prototype.SetFixedRotation = function (fixed) {
      if (fixed) {
         this.m_flags |= b2Body.e_fixedRotationFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_fixedRotationFlag;
      }
      this.ResetMassData();
   };
   b2Body.prototype.IsFixedRotation = function () {
      return (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;
   };
   b2Body.prototype.SetActive = function (flag) {
      if (flag == this.IsActive()) {
         return;
      }
      var broadPhase;
      var f;
      if (flag) {
         this.m_flags |= b2Body.e_activeFlag;
         broadPhase = this.m_world.m_contactManager.m_broadPhase;
         for (f = this.m_fixtureList;
         f; f = f.m_next) {
            f.CreateProxy(broadPhase, this.m_xf);
         }
      }
      else {
         this.m_flags &= ~b2Body.e_activeFlag;
         broadPhase = this.m_world.m_contactManager.m_broadPhase;
         for (f = this.m_fixtureList;
         f; f = f.m_next) {
            f.DestroyProxy(broadPhase);
         }
         var ce = this.m_contactList;
         while (ce) {
            var ce0 = ce;
            ce = ce.next;
            this.m_world.m_contactManager.Destroy(ce0.contact);
         }
         this.m_contactList = null;
      }
   };
   b2Body.prototype.IsActive = function () {
      return (this.m_flags & b2Body.e_activeFlag) == b2Body.e_activeFlag;
   };
   b2Body.prototype.IsSleepingAllowed = function () {
      return (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;
   };
   b2Body.prototype.GetFixtureList = function () {
      return this.m_fixtureList;
   };
   b2Body.prototype.GetJointList = function () {
      return this.m_jointList;
   };
   b2Body.prototype.GetControllerList = function () {
      return this.m_controllerList;
   };
   b2Body.prototype.GetContactList = function () {
      return this.m_contactList;
   };
   b2Body.prototype.GetNext = function () {
      return this.m_next;
   };
   b2Body.prototype.GetUserData = function () {
      return this.m_userData;
   };
   b2Body.prototype.SetUserData = function (data) {
      this.m_userData = data;
   };
   b2Body.prototype.GetWorld = function () {
      return this.m_world;
   };
   b2Body.prototype.b2Body = function (bd, world) {
      this.m_flags = 0;
      if (bd.bullet) {
         this.m_flags |= b2Body.e_bulletFlag;
      }
      if (bd.fixedRotation) {
         this.m_flags |= b2Body.e_fixedRotationFlag;
      }
      if (bd.allowSleep) {
         this.m_flags |= b2Body.e_allowSleepFlag;
      }
      if (bd.awake) {
         this.m_flags |= b2Body.e_awakeFlag;
      }
      if (bd.active) {
         this.m_flags |= b2Body.e_activeFlag;
      }
      this.m_world = world;
      this.m_xf.position.SetV(bd.position);
      this.m_xf.R.Set(bd.angle);
      this.m_sweep.localCenter.SetZero();
      this.m_sweep.t0 = 1.0;
      this.m_sweep.a0 = this.m_sweep.a = bd.angle;
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      this.m_sweep.c.x += this.m_xf.position.x;
      this.m_sweep.c.y += this.m_xf.position.y;
      this.m_sweep.c0.SetV(this.m_sweep.c);
      this.m_jointList = null;
      this.m_controllerList = null;
      this.m_contactList = null;
      this.m_controllerCount = 0;
      this.m_prev = null;
      this.m_next = null;
      this.m_linearVelocity.SetV(bd.linearVelocity);
      this.m_angularVelocity = bd.angularVelocity;
      this.m_linearDamping = bd.linearDamping;
      this.m_angularDamping = bd.angularDamping;
      this.m_force.Set(0.0, 0.0);
      this.m_torque = 0.0;
      this.m_sleepTime = 0.0;
      this.m_type = bd.type;
      if (this.m_type == b2Body.b2_dynamicBody) {
         this.m_mass = 1.0;
         this.m_invMass = 1.0;
      }
      else {
         this.m_mass = 0.0;
         this.m_invMass = 0.0;
      }
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_inertiaScale = bd.inertiaScale;
      this.m_userData = bd.userData;
      this.m_fixtureList = null;
      this.m_fixtureCount = 0;
   };
   b2Body.prototype.SynchronizeFixtures = function () {
      var xf1 = b2Body.s_xf1;
      xf1.R.Set(this.m_sweep.a0);
      var tMat = xf1.R;
      var tVec = this.m_sweep.localCenter;
      xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var f;
      var broadPhase = this.m_world.m_contactManager.m_broadPhase;
      for (f = this.m_fixtureList;
      f; f = f.m_next) {
         f.Synchronize(broadPhase, xf1, this.m_xf);
      }
   };
   b2Body.prototype.SynchronizeTransform = function () {
      this.m_xf.R.Set(this.m_sweep.a);
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
   };
   b2Body.prototype.ShouldCollide = function (other) {
      if (this.m_type != b2Body.b2_dynamicBody && other.m_type != b2Body.b2_dynamicBody) {
         return false;
      }
      for (var jn = this.m_jointList; jn; jn = jn.next) {
         if (jn.other == other) if (jn.joint.m_collideConnected == false) {
            return false;
         }
      }
      return true;
   };
   b2Body.prototype.Advance = function (t) {
      if (t === undefined) t = 0;
      this.m_sweep.Advance(t);
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_sweep.a = this.m_sweep.a0;
      this.SynchronizeTransform();
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Body.s_xf1 = new b2Transform();
      Box2D.Dynamics.b2Body.e_islandFlag = 0x0001;
      Box2D.Dynamics.b2Body.e_awakeFlag = 0x0002;
      Box2D.Dynamics.b2Body.e_allowSleepFlag = 0x0004;
      Box2D.Dynamics.b2Body.e_bulletFlag = 0x0008;
      Box2D.Dynamics.b2Body.e_fixedRotationFlag = 0x0010;
      Box2D.Dynamics.b2Body.e_activeFlag = 0x0020;
      Box2D.Dynamics.b2Body.b2_staticBody = 0;
      Box2D.Dynamics.b2Body.b2_kinematicBody = 1;
      Box2D.Dynamics.b2Body.b2_dynamicBody = 2;
   });
   b2BodyDef.b2BodyDef = function () {
      this.position = new b2Vec2();
      this.linearVelocity = new b2Vec2();
   };
   b2BodyDef.prototype.b2BodyDef = function () {
      this.userData = null;
      this.position.Set(0.0, 0.0);
      this.angle = 0.0;
      this.linearVelocity.Set(0, 0);
      this.angularVelocity = 0.0;
      this.linearDamping = 0.0;
      this.angularDamping = 0.0;
      this.allowSleep = true;
      this.awake = true;
      this.fixedRotation = false;
      this.bullet = false;
      this.type = b2Body.b2_staticBody;
      this.active = true;
      this.inertiaScale = 1.0;
   };
   b2ContactFilter.b2ContactFilter = function () {};
   b2ContactFilter.prototype.ShouldCollide = function (fixtureA, fixtureB) {
      var filter1 = fixtureA.GetFilterData();
      var filter2 = fixtureB.GetFilterData();
      if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {
         return filter1.groupIndex > 0;
      }
      var collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
      return collide;
   };
   b2ContactFilter.prototype.RayCollide = function (userData, fixture) {
      if (!userData) return true;
      return this.ShouldCollide((userData instanceof b2Fixture ? userData : null), fixture);
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new b2ContactFilter();
   });
   b2ContactImpulse.b2ContactImpulse = function () {
      this.normalImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
      this.tangentImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
   };
   b2ContactListener.b2ContactListener = function () {};
   b2ContactListener.prototype.BeginContact = function (contact) {};
   b2ContactListener.prototype.EndContact = function (contact) {};
   b2ContactListener.prototype.PreSolve = function (contact, oldManifold) {};
   b2ContactListener.prototype.PostSolve = function (contact, impulse) {};
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactListener.b2_defaultListener = new b2ContactListener();
   });
   b2ContactManager.b2ContactManager = function () {};
   b2ContactManager.prototype.b2ContactManager = function () {
      this.m_world = null;
      this.m_contactCount = 0;
      this.m_contactFilter = b2ContactFilter.b2_defaultFilter;
      this.m_contactListener = b2ContactListener.b2_defaultListener;
      this.m_contactFactory = new b2ContactFactory(this.m_allocator);
      this.m_broadPhase = new b2DynamicTreeBroadPhase();
   };
   b2ContactManager.prototype.AddPair = function (proxyUserDataA, proxyUserDataB) {
      var fixtureA = (proxyUserDataA instanceof b2Fixture ? proxyUserDataA : null);
      var fixtureB = (proxyUserDataB instanceof b2Fixture ? proxyUserDataB : null);
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (bodyA == bodyB) return;
      var edge = bodyB.GetContactList();
      while (edge) {
         if (edge.other == bodyA) {
            var fA = edge.contact.GetFixtureA();
            var fB = edge.contact.GetFixtureB();
            if (fA == fixtureA && fB == fixtureB) return;
            if (fA == fixtureB && fB == fixtureA) return;
         }
         edge = edge.next;
      }
      if (bodyB.ShouldCollide(bodyA) == false) {
         return;
      }
      if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
         return;
      }
      var c = this.m_contactFactory.Create(fixtureA, fixtureB);
      fixtureA = c.GetFixtureA();
      fixtureB = c.GetFixtureB();
      bodyA = fixtureA.m_body;
      bodyB = fixtureB.m_body;
      c.m_prev = null;
      c.m_next = this.m_world.m_contactList;
      if (this.m_world.m_contactList != null) {
         this.m_world.m_contactList.m_prev = c;
      }
      this.m_world.m_contactList = c;
      c.m_nodeA.contact = c;
      c.m_nodeA.other = bodyB;
      c.m_nodeA.prev = null;
      c.m_nodeA.next = bodyA.m_contactList;
      if (bodyA.m_contactList != null) {
         bodyA.m_contactList.prev = c.m_nodeA;
      }
      bodyA.m_contactList = c.m_nodeA;
      c.m_nodeB.contact = c;
      c.m_nodeB.other = bodyA;
      c.m_nodeB.prev = null;
      c.m_nodeB.next = bodyB.m_contactList;
      if (bodyB.m_contactList != null) {
         bodyB.m_contactList.prev = c.m_nodeB;
      }
      bodyB.m_contactList = c.m_nodeB;
      ++this.m_world.m_contactCount;
      return;
   };
   b2ContactManager.prototype.FindNewContacts = function () {
      this.m_broadPhase.UpdatePairs(Box2D.generateCallback(this, this.AddPair));
   };
   b2ContactManager.prototype.Destroy = function (c) {
      var fixtureA = c.GetFixtureA();
      var fixtureB = c.GetFixtureB();
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (c.IsTouching()) {
         this.m_contactListener.EndContact(c);
      }
      if (c.m_prev) {
         c.m_prev.m_next = c.m_next;
      }
      if (c.m_next) {
         c.m_next.m_prev = c.m_prev;
      }
      if (c == this.m_world.m_contactList) {
         this.m_world.m_contactList = c.m_next;
      }
      if (c.m_nodeA.prev) {
         c.m_nodeA.prev.next = c.m_nodeA.next;
      }
      if (c.m_nodeA.next) {
         c.m_nodeA.next.prev = c.m_nodeA.prev;
      }
      if (c.m_nodeA == bodyA.m_contactList) {
         bodyA.m_contactList = c.m_nodeA.next;
      }
      if (c.m_nodeB.prev) {
         c.m_nodeB.prev.next = c.m_nodeB.next;
      }
      if (c.m_nodeB.next) {
         c.m_nodeB.next.prev = c.m_nodeB.prev;
      }
      if (c.m_nodeB == bodyB.m_contactList) {
         bodyB.m_contactList = c.m_nodeB.next;
      }
      this.m_contactFactory.Destroy(c);
      --this.m_contactCount;
   };
   b2ContactManager.prototype.Collide = function () {
      var c = this.m_world.m_contactList;
      while (c) {
         var fixtureA = c.GetFixtureA();
         var fixtureB = c.GetFixtureB();
         var bodyA = fixtureA.GetBody();
         var bodyB = fixtureB.GetBody();
         if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {
            c = c.GetNext();
            continue;
         }
         if (c.m_flags & b2Contact.e_filterFlag) {
            if (bodyB.ShouldCollide(bodyA) == false) {
               var cNuke = c;
               c = cNuke.GetNext();
               this.Destroy(cNuke);
               continue;
            }
            if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
               cNuke = c;
               c = cNuke.GetNext();
               this.Destroy(cNuke);
               continue;
            }
            c.m_flags &= ~b2Contact.e_filterFlag;
         }
         var proxyA = fixtureA.m_proxy;
         var proxyB = fixtureB.m_proxy;
         var overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);
         if (overlap == false) {
            cNuke = c;
            c = cNuke.GetNext();
            this.Destroy(cNuke);
            continue;
         }
         c.Update(this.m_contactListener);
         c = c.GetNext();
      }
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactManager.s_evalCP = new b2ContactPoint();
   });
   b2DebugDraw.b2DebugDraw = function () {};
   b2DebugDraw.prototype.b2DebugDraw = function () {};
   b2DebugDraw.prototype.SetFlags = function (flags) {
      if (flags === undefined) flags = 0;
   };
   b2DebugDraw.prototype.GetFlags = function () {};
   b2DebugDraw.prototype.AppendFlags = function (flags) {
      if (flags === undefined) flags = 0;
   };
   b2DebugDraw.prototype.ClearFlags = function (flags) {
      if (flags === undefined) flags = 0;
   };
   b2DebugDraw.prototype.SetSprite = function (sprite) {};
   b2DebugDraw.prototype.GetSprite = function () {};
   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {
      if (drawScale === undefined) drawScale = 0;
   };
   b2DebugDraw.prototype.GetDrawScale = function () {};
   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {
      if (lineThickness === undefined) lineThickness = 0;
   };
   b2DebugDraw.prototype.GetLineThickness = function () {};
   b2DebugDraw.prototype.SetAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
   };
   b2DebugDraw.prototype.GetAlpha = function () {};
   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
   };
   b2DebugDraw.prototype.GetFillAlpha = function () {};
   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {
      if (xformScale === undefined) xformScale = 0;
   };
   b2DebugDraw.prototype.GetXFormScale = function () {};
   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {
      if (vertexCount === undefined) vertexCount = 0;
   };
   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {
      if (vertexCount === undefined) vertexCount = 0;
   };
   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {
      if (radius === undefined) radius = 0;
   };
   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {
      if (radius === undefined) radius = 0;
   };
   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {};
   b2DebugDraw.prototype.DrawTransform = function (xf) {};
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2DebugDraw.e_shapeBit = 0x0001;
      Box2D.Dynamics.b2DebugDraw.e_jointBit = 0x0002;
      Box2D.Dynamics.b2DebugDraw.e_aabbBit = 0x0004;
      Box2D.Dynamics.b2DebugDraw.e_pairBit = 0x0008;
      Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = 0x0010;
      Box2D.Dynamics.b2DebugDraw.e_controllerBit = 0x0020;
   });
   b2DestructionListener.b2DestructionListener = function () {};
   b2DestructionListener.prototype.SayGoodbyeJoint = function (joint) {};
   b2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) {};
   b2FilterData.b2FilterData = function () {
      this.categoryBits = 0x0001;
      this.maskBits = 0xFFFF;
      this.groupIndex = 0;
   };
   b2FilterData.prototype.Copy = function () {
      var copy = new b2FilterData();
      copy.categoryBits = this.categoryBits;
      copy.maskBits = this.maskBits;
      copy.groupIndex = this.groupIndex;
      return copy;
   };
   b2Fixture.b2Fixture = function () {
      this.m_filter = new b2FilterData();
   };
   b2Fixture.prototype.GetType = function () {
      return this.m_shape.GetType();
   };
   b2Fixture.prototype.GetShape = function () {
      return this.m_shape;
   };
   b2Fixture.prototype.SetSensor = function (sensor) {
      if (this.m_isSensor == sensor) return;
      this.m_isSensor = sensor;
      if (this.m_body == null) return;
      var edge = this.m_body.GetContactList();
      while (edge) {
         var contact = edge.contact;
         var fixtureA = contact.GetFixtureA();
         var fixtureB = contact.GetFixtureB();
         if (fixtureA == this || fixtureB == this) contact.SetSensor(fixtureA.IsSensor() || fixtureB.IsSensor());
         edge = edge.next;
      }
   };
   b2Fixture.prototype.IsSensor = function () {
      return this.m_isSensor;
   };
   b2Fixture.prototype.SetFilterData = function (filter) {
      this.m_filter = filter.Copy();
      if (this.m_body) return;
      var edge = this.m_body.GetContactList();
      while (edge) {
         var contact = edge.contact;
         var fixtureA = contact.GetFixtureA();
         var fixtureB = contact.GetFixtureB();
         if (fixtureA == this || fixtureB == this) contact.FlagForFiltering();
         edge = edge.next;
      }
   };
   b2Fixture.prototype.GetFilterData = function () {
      return this.m_filter.Copy();
   };
   b2Fixture.prototype.GetBody = function () {
      return this.m_body;
   };
   b2Fixture.prototype.GetNext = function () {
      return this.m_next;
   };
   b2Fixture.prototype.GetUserData = function () {
      return this.m_userData;
   };
   b2Fixture.prototype.SetUserData = function (data) {
      this.m_userData = data;
   };
   b2Fixture.prototype.TestPoint = function (p) {
      return this.m_shape.TestPoint(this.m_body.GetTransform(), p);
   };
   b2Fixture.prototype.RayCast = function (output, input) {
      return this.m_shape.RayCast(output, input, this.m_body.GetTransform());
   };
   b2Fixture.prototype.GetMassData = function (massData) {
      if (massData === undefined) massData = null;
      if (massData == null) {
         massData = new b2MassData();
      }
      this.m_shape.ComputeMass(massData, this.m_density);
      return massData;
   };
   b2Fixture.prototype.SetDensity = function (density) {
      if (density === undefined) density = 0;
      this.m_density = density;
   };
   b2Fixture.prototype.GetDensity = function () {
      return this.m_density;
   };
   b2Fixture.prototype.GetFriction = function () {
      return this.m_friction;
   };
   b2Fixture.prototype.SetFriction = function (friction) {
      if (friction === undefined) friction = 0;
      this.m_friction = friction;
   };
   b2Fixture.prototype.GetRestitution = function () {
      return this.m_restitution;
   };
   b2Fixture.prototype.SetRestitution = function (restitution) {
      if (restitution === undefined) restitution = 0;
      this.m_restitution = restitution;
   };
   b2Fixture.prototype.GetAABB = function () {
      return this.m_aabb;
   };
   b2Fixture.prototype.b2Fixture = function () {
      this.m_aabb = new b2AABB();
      this.m_userData = null;
      this.m_body = null;
      this.m_next = null;
      this.m_shape = null;
      this.m_density = 0.0;
      this.m_friction = 0.0;
      this.m_restitution = 0.0;
   };
   b2Fixture.prototype.Create = function (body, xf, def) {
      this.m_userData = def.userData;
      this.m_friction = def.friction;
      this.m_restitution = def.restitution;
      this.m_body = body;
      this.m_next = null;
      this.m_filter = def.filter.Copy();
      this.m_isSensor = def.isSensor;
      this.m_shape = def.shape.Copy();
      this.m_density = def.density;
   };
   b2Fixture.prototype.Destroy = function () {
      this.m_shape = null;
   };
   b2Fixture.prototype.CreateProxy = function (broadPhase, xf) {
      this.m_shape.ComputeAABB(this.m_aabb, xf);
      this.m_proxy = broadPhase.CreateProxy(this.m_aabb, this);
   };
   b2Fixture.prototype.DestroyProxy = function (broadPhase) {
      if (this.m_proxy == null) {
         return;
      }
      broadPhase.DestroyProxy(this.m_proxy);
      this.m_proxy = null;
   };
   b2Fixture.prototype.Synchronize = function (broadPhase, transform1, transform2) {
      if (!this.m_proxy) return;
      var aabb1 = new b2AABB();
      var aabb2 = new b2AABB();
      this.m_shape.ComputeAABB(aabb1, transform1);
      this.m_shape.ComputeAABB(aabb2, transform2);
      this.m_aabb.Combine(aabb1, aabb2);
      var displacement = b2Math.SubtractVV(transform2.position, transform1.position);
      broadPhase.MoveProxy(this.m_proxy, this.m_aabb, displacement);
   };
   b2FixtureDef.b2FixtureDef = function () {
      this.filter = new b2FilterData();
   };
   b2FixtureDef.prototype.b2FixtureDef = function () {
      this.shape = null;
      this.userData = null;
      this.friction = 0.2;
      this.restitution = 0.0;
      this.density = 0.0;
      this.filter.categoryBits = 0x0001;
      this.filter.maskBits = 0xFFFF;
      this.filter.groupIndex = 0;
      this.isSensor = false;
   };
   b2Island.b2Island = function () {};
   b2Island.prototype.b2Island = function () {
      this.m_bodies = new Vector();
      this.m_contacts = new Vector();
      this.m_joints = new Vector();
   };
   b2Island.prototype.Initialize = function (bodyCapacity, contactCapacity, jointCapacity, allocator, listener, contactSolver) {
      if (bodyCapacity === undefined) bodyCapacity = 0;
      if (contactCapacity === undefined) contactCapacity = 0;
      if (jointCapacity === undefined) jointCapacity = 0;
      var i = 0;
      this.m_bodyCapacity = bodyCapacity;
      this.m_contactCapacity = contactCapacity;
      this.m_jointCapacity = jointCapacity;
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
      this.m_allocator = allocator;
      this.m_listener = listener;
      this.m_contactSolver = contactSolver;
      for (i = this.m_bodies.length;
      i < bodyCapacity; i++)
      this.m_bodies[i] = null;
      for (i = this.m_contacts.length;
      i < contactCapacity; i++)
      this.m_contacts[i] = null;
      for (i = this.m_joints.length;
      i < jointCapacity; i++)
      this.m_joints[i] = null;
   };
   b2Island.prototype.Clear = function () {
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
   };
   b2Island.prototype.Solve = function (step, gravity, allowSleep) {
      var i = 0;
      var j = 0;
      var b;
      var joint;
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         b = this.m_bodies[i];
         if (b.GetType() != b2Body.b2_dynamicBody) continue;
         b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);
         b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);
         b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
         b.m_linearVelocity.Multiply(b2Math.Clamp(1.0 - step.dt * b.m_linearDamping, 0.0, 1.0));
         b.m_angularVelocity *= b2Math.Clamp(1.0 - step.dt * b.m_angularDamping, 0.0, 1.0);
      }
      this.m_contactSolver.Initialize(step, this.m_contacts, this.m_contactCount, this.m_allocator);
      var contactSolver = this.m_contactSolver;
      contactSolver.InitVelocityConstraints(step);
      for (i = 0;
      i < this.m_jointCount; ++i) {
         joint = this.m_joints[i];
         joint.InitVelocityConstraints(step);
      }
      for (i = 0;
      i < step.velocityIterations; ++i) {
         for (j = 0;
         j < this.m_jointCount; ++j) {
            joint = this.m_joints[j];
            joint.SolveVelocityConstraints(step);
         }
         contactSolver.SolveVelocityConstraints();
      }
      for (i = 0;
      i < this.m_jointCount; ++i) {
         joint = this.m_joints[i];
         joint.FinalizeVelocityConstraints();
      }
      contactSolver.FinalizeVelocityConstraints();
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         b = this.m_bodies[i];
         if (b.GetType() == b2Body.b2_staticBody) continue;
         var translationX = step.dt * b.m_linearVelocity.x;
         var translationY = step.dt * b.m_linearVelocity.y;
         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {
            b.m_linearVelocity.Normalize();
            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * step.inv_dt;
            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * step.inv_dt;
         }
         var rotation = step.dt * b.m_angularVelocity;
         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {
            if (b.m_angularVelocity < 0.0) {
               b.m_angularVelocity = (-b2Settings.b2_maxRotation * step.inv_dt);
            }
            else {
               b.m_angularVelocity = b2Settings.b2_maxRotation * step.inv_dt;
            }
         }
         b.m_sweep.c0.SetV(b.m_sweep.c);
         b.m_sweep.a0 = b.m_sweep.a;
         b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;
         b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;
         b.m_sweep.a += step.dt * b.m_angularVelocity;
         b.SynchronizeTransform();
      }
      for (i = 0;
      i < step.positionIterations; ++i) {
         var contactsOkay = contactSolver.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
         var jointsOkay = true;
         for (j = 0;
         j < this.m_jointCount; ++j) {
            joint = this.m_joints[j];
            var jointOkay = joint.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
            jointsOkay = jointsOkay && jointOkay;
         }
         if (contactsOkay && jointsOkay) {
            break;
         }
      }
      this.Report(contactSolver.m_constraints);
      if (allowSleep) {
         var minSleepTime = Number.MAX_VALUE;
         var linTolSqr = b2Settings.b2_linearSleepTolerance * b2Settings.b2_linearSleepTolerance;
         var angTolSqr = b2Settings.b2_angularSleepTolerance * b2Settings.b2_angularSleepTolerance;
         for (i = 0;
         i < this.m_bodyCount; ++i) {
            b = this.m_bodies[i];
            if (b.GetType() == b2Body.b2_staticBody) {
               continue;
            }
            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0) {
               b.m_sleepTime = 0.0;
               minSleepTime = 0.0;
            }
            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || b2Math.Dot(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {
               b.m_sleepTime = 0.0;
               minSleepTime = 0.0;
            }
            else {
               b.m_sleepTime += step.dt;
               minSleepTime = b2Math.Min(minSleepTime, b.m_sleepTime);
            }
         }
         if (minSleepTime >= b2Settings.b2_timeToSleep) {
            for (i = 0;
            i < this.m_bodyCount; ++i) {
               b = this.m_bodies[i];
               b.SetAwake(false);
            }
         }
      }
   };
   b2Island.prototype.SolveTOI = function (subStep) {
      var i = 0;
      var j = 0;
      this.m_contactSolver.Initialize(subStep, this.m_contacts, this.m_contactCount, this.m_allocator);
      var contactSolver = this.m_contactSolver;
      for (i = 0;
      i < this.m_jointCount; ++i) {
         this.m_joints[i].InitVelocityConstraints(subStep);
      }
      for (i = 0;
      i < subStep.velocityIterations; ++i) {
         contactSolver.SolveVelocityConstraints();
         for (j = 0;
         j < this.m_jointCount; ++j) {
            this.m_joints[j].SolveVelocityConstraints(subStep);
         }
      }
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         var b = this.m_bodies[i];
         if (b.GetType() == b2Body.b2_staticBody) continue;
         var translationX = subStep.dt * b.m_linearVelocity.x;
         var translationY = subStep.dt * b.m_linearVelocity.y;
         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {
            b.m_linearVelocity.Normalize();
            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * subStep.inv_dt;
            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * subStep.inv_dt;
         }
         var rotation = subStep.dt * b.m_angularVelocity;
         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {
            if (b.m_angularVelocity < 0.0) {
               b.m_angularVelocity = (-b2Settings.b2_maxRotation * subStep.inv_dt);
            }
            else {
               b.m_angularVelocity = b2Settings.b2_maxRotation * subStep.inv_dt;
            }
         }
         b.m_sweep.c0.SetV(b.m_sweep.c);
         b.m_sweep.a0 = b.m_sweep.a;
         b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;
         b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;
         b.m_sweep.a += subStep.dt * b.m_angularVelocity;
         b.SynchronizeTransform();
      }
      var k_toiBaumgarte = 0.75;
      for (i = 0;
      i < subStep.positionIterations; ++i) {
         var contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);
         var jointsOkay = true;
         for (j = 0;
         j < this.m_jointCount; ++j) {
            var jointOkay = this.m_joints[j].SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
            jointsOkay = jointsOkay && jointOkay;
         }
         if (contactsOkay && jointsOkay) {
            break;
         }
      }
      this.Report(contactSolver.m_constraints);
   };
   b2Island.prototype.Report = function (constraints) {
      if (this.m_listener == null) {
         return;
      }
      for (var i = 0; i < this.m_contactCount; ++i) {
         var c = this.m_contacts[i];
         var cc = constraints[i];
         for (var j = 0; j < cc.pointCount; ++j) {
            b2Island.s_impulse.normalImpulses[j] = cc.points[j].normalImpulse;
            b2Island.s_impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;
         }
         this.m_listener.PostSolve(c, b2Island.s_impulse);
      }
   };
   b2Island.prototype.AddBody = function (body) {
      body.m_islandIndex = this.m_bodyCount;
      this.m_bodies[this.m_bodyCount++] = body;
   };
   b2Island.prototype.AddContact = function (contact) {
      this.m_contacts[this.m_contactCount++] = contact;
   };
   b2Island.prototype.AddJoint = function (joint) {
      this.m_joints[this.m_jointCount++] = joint;
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Island.s_impulse = new b2ContactImpulse();
   });
   b2TimeStep.b2TimeStep = function () {};
   b2TimeStep.prototype.Set = function (step) {
      this.dt = step.dt;
      this.inv_dt = step.inv_dt;
      this.positionIterations = step.positionIterations;
      this.velocityIterations = step.velocityIterations;
      this.warmStarting = step.warmStarting;
   };
   b2World.b2World = function () {
      this.s_stack = new Vector();
      this.m_contactManager = new b2ContactManager();
      this.m_contactSolver = new b2ContactSolver();
      this.m_island = new b2Island();
   };
   b2World.prototype.b2World = function (gravity, doSleep) {
      this.m_destructionListener = null;
      this.m_debugDraw = null;
      this.m_bodyList = null;
      this.m_contactList = null;
      this.m_jointList = null;
      this.m_controllerList = null;
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
      this.m_controllerCount = 0;
      b2World.m_warmStarting = true;
      b2World.m_continuousPhysics = true;
      this.m_allowSleep = doSleep;
      this.m_gravity = gravity;
      this.m_inv_dt0 = 0.0;
      this.m_contactManager.m_world = this;
      var bd = new b2BodyDef();
      this.m_groundBody = this.CreateBody(bd);
   };
   b2World.prototype.SetDestructionListener = function (listener) {
      this.m_destructionListener = listener;
   };
   b2World.prototype.SetContactFilter = function (filter) {
      this.m_contactManager.m_contactFilter = filter;
   };
   b2World.prototype.SetContactListener = function (listener) {
      this.m_contactManager.m_contactListener = listener;
   };
   b2World.prototype.SetDebugDraw = function (debugDraw) {
      this.m_debugDraw = debugDraw;
   };
   b2World.prototype.SetBroadPhase = function (broadPhase) {
      var oldBroadPhase = this.m_contactManager.m_broadPhase;
      this.m_contactManager.m_broadPhase = broadPhase;
      for (var b = this.m_bodyList; b; b = b.m_next) {
         for (var f = b.m_fixtureList; f; f = f.m_next) {
            f.m_proxy = broadPhase.CreateProxy(oldBroadPhase.GetFatAABB(f.m_proxy), f);
         }
      }
   };
   b2World.prototype.Validate = function () {
      this.m_contactManager.m_broadPhase.Validate();
   };
   b2World.prototype.GetProxyCount = function () {
      return this.m_contactManager.m_broadPhase.GetProxyCount();
   };
   b2World.prototype.CreateBody = function (def) {
      if (this.IsLocked() == true) {
         return null;
      }
      var b = new b2Body(def, this);
      b.m_prev = null;
      b.m_next = this.m_bodyList;
      if (this.m_bodyList) {
         this.m_bodyList.m_prev = b;
      }
      this.m_bodyList = b;
      ++this.m_bodyCount;
      return b;
   };
   b2World.prototype.DestroyBody = function (b) {
      if (this.IsLocked() == true) {
         return;
      }
      var jn = b.m_jointList;
      while (jn) {
         var jn0 = jn;
         jn = jn.next;
         if (this.m_destructionListener) {
            this.m_destructionListener.SayGoodbyeJoint(jn0.joint);
         }
         this.DestroyJoint(jn0.joint);
      }
      var coe = b.m_controllerList;
      while (coe) {
         var coe0 = coe;
         coe = coe.nextController;
         coe0.controller.RemoveBody(b);
      }
      var ce = b.m_contactList;
      while (ce) {
         var ce0 = ce;
         ce = ce.next;
         this.m_contactManager.Destroy(ce0.contact);
      }
      b.m_contactList = null;
      var f = b.m_fixtureList;
      while (f) {
         var f0 = f;
         f = f.m_next;
         if (this.m_destructionListener) {
            this.m_destructionListener.SayGoodbyeFixture(f0);
         }
         f0.DestroyProxy(this.m_contactManager.m_broadPhase);
         f0.Destroy();
      }
      b.m_fixtureList = null;
      b.m_fixtureCount = 0;
      if (b.m_prev) {
         b.m_prev.m_next = b.m_next;
      }
      if (b.m_next) {
         b.m_next.m_prev = b.m_prev;
      }
      if (b == this.m_bodyList) {
         this.m_bodyList = b.m_next;
      }--this.m_bodyCount;
   };
   b2World.prototype.CreateJoint = function (def) {
      var j = b2Joint.Create(def, null);
      j.m_prev = null;
      j.m_next = this.m_jointList;
      if (this.m_jointList) {
         this.m_jointList.m_prev = j;
      }
      this.m_jointList = j;
      ++this.m_jointCount;
      j.m_edgeA.joint = j;
      j.m_edgeA.other = j.m_bodyB;
      j.m_edgeA.prev = null;
      j.m_edgeA.next = j.m_bodyA.m_jointList;
      if (j.m_bodyA.m_jointList) j.m_bodyA.m_jointList.prev = j.m_edgeA;
      j.m_bodyA.m_jointList = j.m_edgeA;
      j.m_edgeB.joint = j;
      j.m_edgeB.other = j.m_bodyA;
      j.m_edgeB.prev = null;
      j.m_edgeB.next = j.m_bodyB.m_jointList;
      if (j.m_bodyB.m_jointList) j.m_bodyB.m_jointList.prev = j.m_edgeB;
      j.m_bodyB.m_jointList = j.m_edgeB;
      var bodyA = def.bodyA;
      var bodyB = def.bodyB;
      if (def.collideConnected == false) {
         var edge = bodyB.GetContactList();
         while (edge) {
            if (edge.other == bodyA) {
               edge.contact.FlagForFiltering();
            }
            edge = edge.next;
         }
      }
      return j;
   };
   b2World.prototype.DestroyJoint = function (j) {
      var collideConnected = j.m_collideConnected;
      if (j.m_prev) {
         j.m_prev.m_next = j.m_next;
      }
      if (j.m_next) {
         j.m_next.m_prev = j.m_prev;
      }
      if (j == this.m_jointList) {
         this.m_jointList = j.m_next;
      }
      var bodyA = j.m_bodyA;
      var bodyB = j.m_bodyB;
      bodyA.SetAwake(true);
      bodyB.SetAwake(true);
      if (j.m_edgeA.prev) {
         j.m_edgeA.prev.next = j.m_edgeA.next;
      }
      if (j.m_edgeA.next) {
         j.m_edgeA.next.prev = j.m_edgeA.prev;
      }
      if (j.m_edgeA == bodyA.m_jointList) {
         bodyA.m_jointList = j.m_edgeA.next;
      }
      j.m_edgeA.prev = null;
      j.m_edgeA.next = null;
      if (j.m_edgeB.prev) {
         j.m_edgeB.prev.next = j.m_edgeB.next;
      }
      if (j.m_edgeB.next) {
         j.m_edgeB.next.prev = j.m_edgeB.prev;
      }
      if (j.m_edgeB == bodyB.m_jointList) {
         bodyB.m_jointList = j.m_edgeB.next;
      }
      j.m_edgeB.prev = null;
      j.m_edgeB.next = null;
      b2Joint.Destroy(j, null);
      --this.m_jointCount;
      if (collideConnected == false) {
         var edge = bodyB.GetContactList();
         while (edge) {
            if (edge.other == bodyA) {
               edge.contact.FlagForFiltering();
            }
            edge = edge.next;
         }
      }
   };
   b2World.prototype.AddController = function (c) {
      c.m_next = this.m_controllerList;
      c.m_prev = null;
      this.m_controllerList = c;
      c.m_world = this;
      this.m_controllerCount++;
      return c;
   };
   b2World.prototype.RemoveController = function (c) {
      if (c.m_prev) c.m_prev.m_next = c.m_next;
      if (c.m_next) c.m_next.m_prev = c.m_prev;
      if (this.m_controllerList == c) this.m_controllerList = c.m_next;
      this.m_controllerCount--;
   };
   b2World.prototype.CreateController = function (controller) {
      if (controller.m_world != this) throw new Error("Controller can only be a member of one world");
      controller.m_next = this.m_controllerList;
      controller.m_prev = null;
      if (this.m_controllerList) this.m_controllerList.m_prev = controller;
      this.m_controllerList = controller;
      ++this.m_controllerCount;
      controller.m_world = this;
      return controller;
   };
   b2World.prototype.DestroyController = function (controller) {
      controller.Clear();
      if (controller.m_next) controller.m_next.m_prev = controller.m_prev;
      if (controller.m_prev) controller.m_prev.m_next = controller.m_next;
      if (controller == this.m_controllerList) this.m_controllerList = controller.m_next;
      --this.m_controllerCount;
   };
   b2World.prototype.SetWarmStarting = function (flag) {
      b2World.m_warmStarting = flag;
   };
   b2World.prototype.SetContinuousPhysics = function (flag) {
      b2World.m_continuousPhysics = flag;
   };
   b2World.prototype.GetBodyCount = function () {
      return this.m_bodyCount;
   };
   b2World.prototype.GetJointCount = function () {
      return this.m_jointCount;
   };
   b2World.prototype.GetContactCount = function () {
      return this.m_contactCount;
   };
   b2World.prototype.SetGravity = function (gravity) {
      this.m_gravity = gravity;
   };
   b2World.prototype.GetGravity = function () {
      return this.m_gravity;
   };
   b2World.prototype.GetGroundBody = function () {
      return this.m_groundBody;
   };
   b2World.prototype.Step = function (dt, velocityIterations, positionIterations) {
      if (dt === undefined) dt = 0;
      if (velocityIterations === undefined) velocityIterations = 0;
      if (positionIterations === undefined) positionIterations = 0;
      if (this.m_flags & b2World.e_newFixture) {
         this.m_contactManager.FindNewContacts();
         this.m_flags &= ~b2World.e_newFixture;
      }
      this.m_flags |= b2World.e_locked;
      var step = b2World.s_timestep2;
      step.dt = dt;
      step.velocityIterations = velocityIterations;
      step.positionIterations = positionIterations;
      if (dt > 0.0) {
         step.inv_dt = 1.0 / dt;
      }
      else {
         step.inv_dt = 0.0;
      }
      step.dtRatio = this.m_inv_dt0 * dt;
      step.warmStarting = b2World.m_warmStarting;
      this.m_contactManager.Collide();
      if (step.dt > 0.0) {
         this.Solve(step);
      }
      if (b2World.m_continuousPhysics && step.dt > 0.0) {
         this.SolveTOI(step);
      }
      if (step.dt > 0.0) {
         this.m_inv_dt0 = step.inv_dt;
      }
      this.m_flags &= ~b2World.e_locked;
   };
   b2World.prototype.ClearForces = function () {
      for (var body = this.m_bodyList; body; body = body.m_next) {
         body.m_force.SetZero();
         body.m_torque = 0.0;
      }
   };
   b2World.prototype.DrawDebugData = function () {
      if (this.m_debugDraw == null) {
         return;
      }
      this.m_debugDraw.m_sprite.graphics.clear();
      var flags = this.m_debugDraw.GetFlags();
      var i = 0;
      var b;
      var f;
      var s;
      var j;
      var bp;
      var invQ = new b2Vec2;
      var x1 = new b2Vec2;
      var x2 = new b2Vec2;
      var xf;
      var b1 = new b2AABB();
      var b2 = new b2AABB();
      var vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];
      var color = new b2Color(0, 0, 0);
      if (flags & b2DebugDraw.e_shapeBit) {
         for (b = this.m_bodyList;
         b; b = b.m_next) {
            xf = b.m_xf;
            for (f = b.GetFixtureList();
            f; f = f.m_next) {
               s = f.GetShape();
               if (b.IsActive() == false) {
                  color.Set(0.5, 0.5, 0.3);
                  this.DrawShape(s, xf, color);
               }
               else if (b.GetType() == b2Body.b2_staticBody) {
                  color.Set(0.5, 0.9, 0.5);
                  this.DrawShape(s, xf, color);
               }
               else if (b.GetType() == b2Body.b2_kinematicBody) {
                  color.Set(0.5, 0.5, 0.9);
                  this.DrawShape(s, xf, color);
               }
               else if (b.IsAwake() == false) {
                  color.Set(0.6, 0.6, 0.6);
                  this.DrawShape(s, xf, color);
               }
               else {
                  color.Set(0.9, 0.7, 0.7);
                  this.DrawShape(s, xf, color);
               }
            }
         }
      }
      if (flags & b2DebugDraw.e_jointBit) {
         for (j = this.m_jointList;
         j; j = j.m_next) {
            this.DrawJoint(j);
         }
      }
      if (flags & b2DebugDraw.e_controllerBit) {
         for (var c = this.m_controllerList; c; c = c.m_next) {
            c.Draw(this.m_debugDraw);
         }
      }
      if (flags & b2DebugDraw.e_pairBit) {
         color.Set(0.3, 0.9, 0.9);
         for (var contact = this.m_contactManager.m_contactList; contact; contact = contact.GetNext()) {
            var fixtureA = contact.GetFixtureA();
            var fixtureB = contact.GetFixtureB();
            var cA = fixtureA.GetAABB().GetCenter();
            var cB = fixtureB.GetAABB().GetCenter();
            this.m_debugDraw.DrawSegment(cA, cB, color);
         }
      }
      if (flags & b2DebugDraw.e_aabbBit) {
         bp = this.m_contactManager.m_broadPhase;
         vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];
         for (b = this.m_bodyList;
         b; b = b.GetNext()) {
            if (b.IsActive() == false) {
               continue;
            }
            for (f = b.GetFixtureList();
            f; f = f.GetNext()) {
               var aabb = bp.GetFatAABB(f.m_proxy);
               vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);
               vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);
               vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);
               vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);
               this.m_debugDraw.DrawPolygon(vs, 4, color);
            }
         }
      }
      if (flags & b2DebugDraw.e_centerOfMassBit) {
         for (b = this.m_bodyList;
         b; b = b.m_next) {
            xf = b2World.s_xf;
            xf.R = b.m_xf.R;
            xf.position = b.GetWorldCenter();
            this.m_debugDraw.DrawTransform(xf);
         }
      }
   };
   b2World.prototype.QueryAABB = function (callback, aabb) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         return callback(broadPhase.GetUserData(proxy));
      };
      broadPhase.Query(WorldQueryWrapper, aabb);
   };
   b2World.prototype.QueryShape = function (callback, shape, transform) {
      var __this = this;
      if (transform === undefined) transform = null;
      if (transform == null) {
         transform = new b2Transform();
         transform.SetIdentity();
      }
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);
         if (b2Shape.TestOverlap(shape, transform, fixture.GetShape(), fixture.GetBody().GetTransform())) return callback(fixture);
         return true;
      };
      var aabb = new b2AABB();
      shape.ComputeAABB(aabb, transform);
      broadPhase.Query(WorldQueryWrapper, aabb);
   };
   b2World.prototype.QueryPoint = function (callback, p) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);
         if (fixture.TestPoint(p)) return callback(fixture);
         return true;
      };
      var aabb = new b2AABB();
      aabb.lowerBound.Set(p.x - b2Settings.b2_linearSlop, p.y - b2Settings.b2_linearSlop);
      aabb.upperBound.Set(p.x + b2Settings.b2_linearSlop, p.y + b2Settings.b2_linearSlop);
      broadPhase.Query(WorldQueryWrapper, aabb);
   };
   b2World.prototype.RayCast = function (callback, point1, point2) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;
      var output = new b2RayCastOutput;

      function RayCastWrapper(input, proxy) {
         var userData = broadPhase.GetUserData(proxy);
         var fixture = (userData instanceof b2Fixture ? userData : null);
         var hit = fixture.RayCast(output, input);
         if (hit) {
            var fraction = output.fraction;
            var point = new b2Vec2((1.0 - fraction) * point1.x + fraction * point2.x, (1.0 - fraction) * point1.y + fraction * point2.y);
            return callback(fixture, point, output.normal, fraction);
         }
         return input.maxFraction;
      };
      var input = new b2RayCastInput(point1, point2);
      broadPhase.RayCast(RayCastWrapper, input);
   };
   b2World.prototype.RayCastOne = function (point1, point2) {
      var __this = this;
      var result;

      function RayCastOneWrapper(fixture, point, normal, fraction) {
         if (fraction === undefined) fraction = 0;
         result = fixture;
         return fraction;
      };
      __this.RayCast(RayCastOneWrapper, point1, point2);
      return result;
   };
   b2World.prototype.RayCastAll = function (point1, point2) {
      var __this = this;
      var result = new Vector();

      function RayCastAllWrapper(fixture, point, normal, fraction) {
         if (fraction === undefined) fraction = 0;
         result[result.length] = fixture;
         return 1;
      };
      __this.RayCast(RayCastAllWrapper, point1, point2);
      return result;
   };
   b2World.prototype.GetBodyList = function () {
      return this.m_bodyList;
   };
   b2World.prototype.GetJointList = function () {
      return this.m_jointList;
   };
   b2World.prototype.GetContactList = function () {
      return this.m_contactList;
   };
   b2World.prototype.IsLocked = function () {
      return (this.m_flags & b2World.e_locked) > 0;
   };
   b2World.prototype.Solve = function (step) {
      var b;
      for (var controller = this.m_controllerList; controller; controller = controller.m_next) {
         controller.Step(step);
      }
      var island = this.m_island;
      island.Initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         b.m_flags &= ~b2Body.e_islandFlag;
      }
      for (var c = this.m_contactList; c; c = c.m_next) {
         c.m_flags &= ~b2Contact.e_islandFlag;
      }
      for (var j = this.m_jointList; j; j = j.m_next) {
         j.m_islandFlag = false;
      }
      var stackSize = parseInt(this.m_bodyCount);
      var stack = this.s_stack;
      for (var seed = this.m_bodyList; seed; seed = seed.m_next) {
         if (seed.m_flags & b2Body.e_islandFlag) {
            continue;
         }
         if (seed.IsAwake() == false || seed.IsActive() == false) {
            continue;
         }
         if (seed.GetType() == b2Body.b2_staticBody) {
            continue;
         }
         island.Clear();
         var stackCount = 0;
         stack[stackCount++] = seed;
         seed.m_flags |= b2Body.e_islandFlag;
         while (stackCount > 0) {
            b = stack[--stackCount];
            island.AddBody(b);
            if (b.IsAwake() == false) {
               b.SetAwake(true);
            }
            if (b.GetType() == b2Body.b2_staticBody) {
               continue;
            }
            var other;
            for (var ce = b.m_contactList; ce; ce = ce.next) {
               if (ce.contact.m_flags & b2Contact.e_islandFlag) {
                  continue;
               }
               if (ce.contact.IsSensor() == true || ce.contact.IsEnabled() == false || ce.contact.IsTouching() == false) {
                  continue;
               }
               island.AddContact(ce.contact);
               ce.contact.m_flags |= b2Contact.e_islandFlag;
               other = ce.other;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               stack[stackCount++] = other;
               other.m_flags |= b2Body.e_islandFlag;
            }
            for (var jn = b.m_jointList; jn; jn = jn.next) {
               if (jn.joint.m_islandFlag == true) {
                  continue;
               }
               other = jn.other;
               if (other.IsActive() == false) {
                  continue;
               }
               island.AddJoint(jn.joint);
               jn.joint.m_islandFlag = true;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               stack[stackCount++] = other;
               other.m_flags |= b2Body.e_islandFlag;
            }
         }
         island.Solve(step, this.m_gravity, this.m_allowSleep);
         for (var i = 0; i < island.m_bodyCount; ++i) {
            b = island.m_bodies[i];
            if (b.GetType() == b2Body.b2_staticBody) {
               b.m_flags &= ~b2Body.e_islandFlag;
            }
         }
      }
      for (i = 0;
      i < stack.length; ++i) {
         if (!stack[i]) break;
         stack[i] = null;
      }
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         if (b.IsAwake() == false || b.IsActive() == false) {
            continue;
         }
         if (b.GetType() == b2Body.b2_staticBody) {
            continue;
         }
         b.SynchronizeFixtures();
      }
      this.m_contactManager.FindNewContacts();
   };
   b2World.prototype.SolveTOI = function (step) {
      var b;
      var fA;
      var fB;
      var bA;
      var bB;
      var cEdge;
      var j;
      var island = this.m_island;
      island.Initialize(this.m_bodyCount, b2Settings.b2_maxTOIContactsPerIsland, b2Settings.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      var queue = b2World.s_queue;
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         b.m_flags &= ~b2Body.e_islandFlag;
         b.m_sweep.t0 = 0.0;
      }
      var c;
      for (c = this.m_contactList;
      c; c = c.m_next) {
         c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);
      }
      for (j = this.m_jointList;
      j; j = j.m_next) {
         j.m_islandFlag = false;
      }
      for (;;) {
         var minContact = null;
         var minTOI = 1.0;
         for (c = this.m_contactList;
         c; c = c.m_next) {
            if (c.IsSensor() == true || c.IsEnabled() == false || c.IsContinuous() == false) {
               continue;
            }
            var toi = 1.0;
            if (c.m_flags & b2Contact.e_toiFlag) {
               toi = c.m_toi;
            }
            else {
               fA = c.m_fixtureA;
               fB = c.m_fixtureB;
               bA = fA.m_body;
               bB = fB.m_body;
               if ((bA.GetType() != b2Body.b2_dynamicBody || bA.IsAwake() == false) && (bB.GetType() != b2Body.b2_dynamicBody || bB.IsAwake() == false)) {
                  continue;
               }
               var t0 = bA.m_sweep.t0;
               if (bA.m_sweep.t0 < bB.m_sweep.t0) {
                  t0 = bB.m_sweep.t0;
                  bA.m_sweep.Advance(t0);
               }
               else if (bB.m_sweep.t0 < bA.m_sweep.t0) {
                  t0 = bA.m_sweep.t0;
                  bB.m_sweep.Advance(t0);
               }
               toi = c.ComputeTOI(bA.m_sweep, bB.m_sweep);
               b2Settings.b2Assert(0.0 <= toi && toi <= 1.0);
               if (toi > 0.0 && toi < 1.0) {
                  toi = (1.0 - toi) * t0 + toi;
                  if (toi > 1) toi = 1;
               }
               c.m_toi = toi;
               c.m_flags |= b2Contact.e_toiFlag;
            }
            if (Number.MIN_VALUE < toi && toi < minTOI) {
               minContact = c;
               minTOI = toi;
            }
         }
         if (minContact == null || 1.0 - 100.0 * Number.MIN_VALUE < minTOI) {
            break;
         }
         fA = minContact.m_fixtureA;
         fB = minContact.m_fixtureB;
         bA = fA.m_body;
         bB = fB.m_body;
         b2World.s_backupA.Set(bA.m_sweep);
         b2World.s_backupB.Set(bB.m_sweep);
         bA.Advance(minTOI);
         bB.Advance(minTOI);
         minContact.Update(this.m_contactManager.m_contactListener);
         minContact.m_flags &= ~b2Contact.e_toiFlag;
         if (minContact.IsSensor() == true || minContact.IsEnabled() == false) {
            bA.m_sweep.Set(b2World.s_backupA);
            bB.m_sweep.Set(b2World.s_backupB);
            bA.SynchronizeTransform();
            bB.SynchronizeTransform();
            continue;
         }
         if (minContact.IsTouching() == false) {
            continue;
         }
         var seed = bA;
         if (seed.GetType() != b2Body.b2_dynamicBody) {
            seed = bB;
         }
         island.Clear();
         var queueStart = 0;
         var queueSize = 0;
         queue[queueStart + queueSize++] = seed;
         seed.m_flags |= b2Body.e_islandFlag;
         while (queueSize > 0) {
            b = queue[queueStart++];
            --queueSize;
            island.AddBody(b);
            if (b.IsAwake() == false) {
               b.SetAwake(true);
            }
            if (b.GetType() != b2Body.b2_dynamicBody) {
               continue;
            }
            for (cEdge = b.m_contactList;
            cEdge; cEdge = cEdge.next) {
               if (island.m_contactCount == island.m_contactCapacity) {
                  break;
               }
               if (cEdge.contact.m_flags & b2Contact.e_islandFlag) {
                  continue;
               }
               if (cEdge.contact.IsSensor() == true || cEdge.contact.IsEnabled() == false || cEdge.contact.IsTouching() == false) {
                  continue;
               }
               island.AddContact(cEdge.contact);
               cEdge.contact.m_flags |= b2Contact.e_islandFlag;
               var other = cEdge.other;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               if (other.GetType() != b2Body.b2_staticBody) {
                  other.Advance(minTOI);
                  other.SetAwake(true);
               }
               queue[queueStart + queueSize] = other;
               ++queueSize;
               other.m_flags |= b2Body.e_islandFlag;
            }
            for (var jEdge = b.m_jointList; jEdge; jEdge = jEdge.next) {
               if (island.m_jointCount == island.m_jointCapacity) continue;
               if (jEdge.joint.m_islandFlag == true) continue;
               other = jEdge.other;
               if (other.IsActive() == false) {
                  continue;
               }
               island.AddJoint(jEdge.joint);
               jEdge.joint.m_islandFlag = true;
               if (other.m_flags & b2Body.e_islandFlag) continue;
               if (other.GetType() != b2Body.b2_staticBody) {
                  other.Advance(minTOI);
                  other.SetAwake(true);
               }
               queue[queueStart + queueSize] = other;
               ++queueSize;
               other.m_flags |= b2Body.e_islandFlag;
            }
         }
         var subStep = b2World.s_timestep;
         subStep.warmStarting = false;
         subStep.dt = (1.0 - minTOI) * step.dt;
         subStep.inv_dt = 1.0 / subStep.dt;
         subStep.dtRatio = 0.0;
         subStep.velocityIterations = step.velocityIterations;
         subStep.positionIterations = step.positionIterations;
         island.SolveTOI(subStep);
         var i = 0;
         for (i = 0;
         i < island.m_bodyCount; ++i) {
            b = island.m_bodies[i];
            b.m_flags &= ~b2Body.e_islandFlag;
            if (b.IsAwake() == false) {
               continue;
            }
            if (b.GetType() != b2Body.b2_dynamicBody) {
               continue;
            }
            b.SynchronizeFixtures();
            for (cEdge = b.m_contactList;
            cEdge; cEdge = cEdge.next) {
               cEdge.contact.m_flags &= ~b2Contact.e_toiFlag;
            }
         }
         for (i = 0;
         i < island.m_contactCount; ++i) {
            c = island.m_contacts[i];
            c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);
         }
         for (i = 0;
         i < island.m_jointCount; ++i) {
            j = island.m_joints[i];
            j.m_islandFlag = false;
         }
         this.m_contactManager.FindNewContacts();
      }
   };
   b2World.prototype.DrawJoint = function (joint) {
      var b1 = joint.GetBodyA();
      var b2 = joint.GetBodyB();
      var xf1 = b1.m_xf;
      var xf2 = b2.m_xf;
      var x1 = xf1.position;
      var x2 = xf2.position;
      var p1 = joint.GetAnchorA();
      var p2 = joint.GetAnchorB();
      var color = b2World.s_jointColor;
      switch (joint.m_type) {
      case b2Joint.e_distanceJoint:
         this.m_debugDraw.DrawSegment(p1, p2, color);
         break;
      case b2Joint.e_pulleyJoint:
         {
            var pulley = ((joint instanceof b2PulleyJoint ? joint : null));
            var s1 = pulley.GetGroundAnchorA();
            var s2 = pulley.GetGroundAnchorB();
            this.m_debugDraw.DrawSegment(s1, p1, color);
            this.m_debugDraw.DrawSegment(s2, p2, color);
            this.m_debugDraw.DrawSegment(s1, s2, color);
         }
         break;
      case b2Joint.e_mouseJoint:
         this.m_debugDraw.DrawSegment(p1, p2, color);
         break;
      default:
         if (b1 != this.m_groundBody) this.m_debugDraw.DrawSegment(x1, p1, color);
         this.m_debugDraw.DrawSegment(p1, p2, color);
         if (b2 != this.m_groundBody) this.m_debugDraw.DrawSegment(x2, p2, color);
      }
   };
   b2World.prototype.DrawShape = function (shape, xf, color) {
      switch (shape.m_type) {
      case b2Shape.e_circleShape:
         {
            var circle = ((shape instanceof b2CircleShape ? shape : null));
            var center = b2Math.MulX(xf, circle.m_p);
            var radius = circle.m_radius;
            var axis = xf.R.col1;
            this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);
         }
         break;
      case b2Shape.e_polygonShape:
         {
            var i = 0;
            var poly = ((shape instanceof b2PolygonShape ? shape : null));
            var vertexCount = parseInt(poly.GetVertexCount());
            var localVertices = poly.GetVertices();
            var vertices = new Vector(vertexCount);
            for (i = 0;
            i < vertexCount; ++i) {
               vertices[i] = b2Math.MulX(xf, localVertices[i]);
            }
            this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);
         }
         break;
      case b2Shape.e_edgeShape:
         {
            var edge = (shape instanceof b2EdgeShape ? shape : null);
            this.m_debugDraw.DrawSegment(b2Math.MulX(xf, edge.GetVertex1()), b2Math.MulX(xf, edge.GetVertex2()), color);
         }
         break;
      }
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2World.s_timestep2 = new b2TimeStep();
      Box2D.Dynamics.b2World.s_xf = new b2Transform();
      Box2D.Dynamics.b2World.s_backupA = new b2Sweep();
      Box2D.Dynamics.b2World.s_backupB = new b2Sweep();
      Box2D.Dynamics.b2World.s_timestep = new b2TimeStep();
      Box2D.Dynamics.b2World.s_queue = new Vector();
      Box2D.Dynamics.b2World.s_jointColor = new b2Color(0.5, 0.8, 0.8);
      Box2D.Dynamics.b2World.e_newFixture = 0x0001;
      Box2D.Dynamics.b2World.e_locked = 0x0002;
   });
})();
(function () {
   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,
      b2Contact = Box2D.Dynamics.Contacts.b2Contact,
      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,
      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,
      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,
      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,
      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,
      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,
      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,
      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,
      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   Box2D.inherit(b2CircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2CircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2CircleContact.b2CircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2CircleContact.Create = function (allocator) {
      return new b2CircleContact();
   };
   b2CircleContact.Destroy = function (contact, allocator) {};
   b2CircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   };
   b2CircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      b2Collision.CollideCircles(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2CircleShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   };
   b2Contact.b2Contact = function () {
      this.m_nodeA = new b2ContactEdge();
      this.m_nodeB = new b2ContactEdge();
      this.m_manifold = new b2Manifold();
      this.m_oldManifold = new b2Manifold();
   };
   b2Contact.prototype.GetManifold = function () {
      return this.m_manifold;
   };
   b2Contact.prototype.GetWorldManifold = function (worldManifold) {
      var bodyA = this.m_fixtureA.GetBody();
      var bodyB = this.m_fixtureB.GetBody();
      var shapeA = this.m_fixtureA.GetShape();
      var shapeB = this.m_fixtureB.GetShape();
      worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);
   };
   b2Contact.prototype.IsTouching = function () {
      return (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;
   };
   b2Contact.prototype.IsContinuous = function () {
      return (this.m_flags & b2Contact.e_continuousFlag) == b2Contact.e_continuousFlag;
   };
   b2Contact.prototype.SetSensor = function (sensor) {
      if (sensor) {
         this.m_flags |= b2Contact.e_sensorFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_sensorFlag;
      }
   };
   b2Contact.prototype.IsSensor = function () {
      return (this.m_flags & b2Contact.e_sensorFlag) == b2Contact.e_sensorFlag;
   };
   b2Contact.prototype.SetEnabled = function (flag) {
      if (flag) {
         this.m_flags |= b2Contact.e_enabledFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_enabledFlag;
      }
   };
   b2Contact.prototype.IsEnabled = function () {
      return (this.m_flags & b2Contact.e_enabledFlag) == b2Contact.e_enabledFlag;
   };
   b2Contact.prototype.GetNext = function () {
      return this.m_next;
   };
   b2Contact.prototype.GetFixtureA = function () {
      return this.m_fixtureA;
   };
   b2Contact.prototype.GetFixtureB = function () {
      return this.m_fixtureB;
   };
   b2Contact.prototype.FlagForFiltering = function () {
      this.m_flags |= b2Contact.e_filterFlag;
   };
   b2Contact.prototype.b2Contact = function () {};
   b2Contact.prototype.Reset = function (fixtureA, fixtureB) {
      if (fixtureA === undefined) fixtureA = null;
      if (fixtureB === undefined) fixtureB = null;
      this.m_flags = b2Contact.e_enabledFlag;
      if (!fixtureA || !fixtureB) {
         this.m_fixtureA = null;
         this.m_fixtureB = null;
         return;
      }
      if (fixtureA.IsSensor() || fixtureB.IsSensor()) {
         this.m_flags |= b2Contact.e_sensorFlag;
      }
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {
         this.m_flags |= b2Contact.e_continuousFlag;
      }
      this.m_fixtureA = fixtureA;
      this.m_fixtureB = fixtureB;
      this.m_manifold.m_pointCount = 0;
      this.m_prev = null;
      this.m_next = null;
      this.m_nodeA.contact = null;
      this.m_nodeA.prev = null;
      this.m_nodeA.next = null;
      this.m_nodeA.other = null;
      this.m_nodeB.contact = null;
      this.m_nodeB.prev = null;
      this.m_nodeB.next = null;
      this.m_nodeB.other = null;
   };
   b2Contact.prototype.Update = function (listener) {
      var tManifold = this.m_oldManifold;
      this.m_oldManifold = this.m_manifold;
      this.m_manifold = tManifold;
      this.m_flags |= b2Contact.e_enabledFlag;
      var touching = false;
      var wasTouching = (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;
      var bodyA = this.m_fixtureA.m_body;
      var bodyB = this.m_fixtureB.m_body;
      var aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
      if (this.m_flags & b2Contact.e_sensorFlag) {
         if (aabbOverlap) {
            var shapeA = this.m_fixtureA.GetShape();
            var shapeB = this.m_fixtureB.GetShape();
            var xfA = bodyA.GetTransform();
            var xfB = bodyB.GetTransform();
            touching = b2Shape.TestOverlap(shapeA, xfA, shapeB, xfB);
         }
         this.m_manifold.m_pointCount = 0;
      }
      else {
         if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {
            this.m_flags |= b2Contact.e_continuousFlag;
         }
         else {
            this.m_flags &= ~b2Contact.e_continuousFlag;
         }
         if (aabbOverlap) {
            this.Evaluate();
            touching = this.m_manifold.m_pointCount > 0;
            for (var i = 0; i < this.m_manifold.m_pointCount; ++i) {
               var mp2 = this.m_manifold.m_points[i];
               mp2.m_normalImpulse = 0.0;
               mp2.m_tangentImpulse = 0.0;
               var id2 = mp2.m_id;
               for (var j = 0; j < this.m_oldManifold.m_pointCount; ++j) {
                  var mp1 = this.m_oldManifold.m_points[j];
                  if (mp1.m_id.key == id2.key) {
                     mp2.m_normalImpulse = mp1.m_normalImpulse;
                     mp2.m_tangentImpulse = mp1.m_tangentImpulse;
                     break;
                  }
               }
            }
         }
         else {
            this.m_manifold.m_pointCount = 0;
         }
         if (touching != wasTouching) {
            bodyA.SetAwake(true);
            bodyB.SetAwake(true);
         }
      }
      if (touching) {
         this.m_flags |= b2Contact.e_touchingFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_touchingFlag;
      }
      if (wasTouching == false && touching == true) {
         listener.BeginContact(this);
      }
      if (wasTouching == true && touching == false) {
         listener.EndContact(this);
      }
      if ((this.m_flags & b2Contact.e_sensorFlag) == 0) {
         listener.PreSolve(this, this.m_oldManifold);
      }
   };
   b2Contact.prototype.Evaluate = function () {};
   b2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {
      b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());
      b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());
      b2Contact.s_input.sweepA = sweepA;
      b2Contact.s_input.sweepB = sweepB;
      b2Contact.s_input.tolerance = b2Settings.b2_linearSlop;
      return b2TimeOfImpact.TimeOfImpact(b2Contact.s_input);
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = 0x0001;
      Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = 0x0002;
      Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = 0x0004;
      Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = 0x0008;
      Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = 0x0010;
      Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = 0x0020;
      Box2D.Dynamics.Contacts.b2Contact.e_filterFlag = 0x0040;
      Box2D.Dynamics.Contacts.b2Contact.s_input = new b2TOIInput();
   });
   b2ContactConstraint.b2ContactConstraint = function () {
      this.localPlaneNormal = new b2Vec2();
      this.localPoint = new b2Vec2();
      this.normal = new b2Vec2();
      this.normalMass = new b2Mat22();
      this.K = new b2Mat22();
   };
   b2ContactConstraint.prototype.b2ContactConstraint = function () {
      this.points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.points[i] = new b2ContactConstraintPoint();
      }
   };
   b2ContactConstraintPoint.b2ContactConstraintPoint = function () {
      this.localPoint = new b2Vec2();
      this.rA = new b2Vec2();
      this.rB = new b2Vec2();
   };
   b2ContactEdge.b2ContactEdge = function () {};
   b2ContactFactory.b2ContactFactory = function () {};
   b2ContactFactory.prototype.b2ContactFactory = function (allocator) {
      this.m_allocator = allocator;
      this.InitializeRegisters();
   };
   b2ContactFactory.prototype.AddType = function (createFcn, destroyFcn, type1, type2) {
      if (type1 === undefined) type1 = 0;
      if (type2 === undefined) type2 = 0;
      this.m_registers[type1][type2].createFcn = createFcn;
      this.m_registers[type1][type2].destroyFcn = destroyFcn;
      this.m_registers[type1][type2].primary = true;
      if (type1 != type2) {
         this.m_registers[type2][type1].createFcn = createFcn;
         this.m_registers[type2][type1].destroyFcn = destroyFcn;
         this.m_registers[type2][type1].primary = false;
      }
   };
   b2ContactFactory.prototype.InitializeRegisters = function () {
      this.m_registers = new Vector(b2Shape.e_shapeTypeCount);
      for (var i = 0; i < b2Shape.e_shapeTypeCount; i++) {
         this.m_registers[i] = new Vector(b2Shape.e_shapeTypeCount);
         for (var j = 0; j < b2Shape.e_shapeTypeCount; j++) {
            this.m_registers[i][j] = new b2ContactRegister();
         }
      }
      this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2Shape.e_circleShape, b2Shape.e_circleShape);
      this.AddType(b2PolyAndCircleContact.Create, b2PolyAndCircleContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_circleShape);
      this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_polygonShape);
      this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, b2Shape.e_edgeShape, b2Shape.e_circleShape);
      this.AddType(b2PolyAndEdgeContact.Create, b2PolyAndEdgeContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_edgeShape);
   };
   b2ContactFactory.prototype.Create = function (fixtureA, fixtureB) {
      var type1 = parseInt(fixtureA.GetType());
      var type2 = parseInt(fixtureB.GetType());
      var reg = this.m_registers[type1][type2];
      var c;
      if (reg.pool) {
         c = reg.pool;
         reg.pool = c.m_next;
         reg.poolCount--;
         c.Reset(fixtureA, fixtureB);
         return c;
      }
      var createFcn = reg.createFcn;
      if (createFcn != null) {
         if (reg.primary) {
            c = createFcn(this.m_allocator);
            c.Reset(fixtureA, fixtureB);
            return c;
         }
         else {
            c = createFcn(this.m_allocator);
            c.Reset(fixtureB, fixtureA);
            return c;
         }
      }
      else {
         return null;
      }
   };
   b2ContactFactory.prototype.Destroy = function (contact) {
      if (contact.m_manifold.m_pointCount > 0) {
         contact.m_fixtureA.m_body.SetAwake(true);
         contact.m_fixtureB.m_body.SetAwake(true);
      }
      var type1 = parseInt(contact.m_fixtureA.GetType());
      var type2 = parseInt(contact.m_fixtureB.GetType());
      var reg = this.m_registers[type1][type2];
      if (true) {
         reg.poolCount++;
         contact.m_next = reg.pool;
         reg.pool = contact;
      }
      var destroyFcn = reg.destroyFcn;
      destroyFcn(contact, this.m_allocator);
   };
   b2ContactRegister.b2ContactRegister = function () {};
   b2ContactResult.b2ContactResult = function () {
      this.position = new b2Vec2();
      this.normal = new b2Vec2();
      this.id = new b2ContactID();
   };
   b2ContactSolver.b2ContactSolver = function () {
      this.m_step = new b2TimeStep();
      this.m_constraints = new Vector();
   };
   b2ContactSolver.prototype.b2ContactSolver = function () {};
   b2ContactSolver.prototype.Initialize = function (step, contacts, contactCount, allocator) {
      if (contactCount === undefined) contactCount = 0;
      var contact;
      this.m_step.Set(step);
      this.m_allocator = allocator;
      var i = 0;
      var tVec;
      var tMat;
      this.m_constraintCount = contactCount;
      while (this.m_constraints.length < this.m_constraintCount) {
         this.m_constraints[this.m_constraints.length] = new b2ContactConstraint();
      }
      for (i = 0;
      i < contactCount; ++i) {
         contact = contacts[i];
         var fixtureA = contact.m_fixtureA;
         var fixtureB = contact.m_fixtureB;
         var shapeA = fixtureA.m_shape;
         var shapeB = fixtureB.m_shape;
         var radiusA = shapeA.m_radius;
         var radiusB = shapeB.m_radius;
         var bodyA = fixtureA.m_body;
         var bodyB = fixtureB.m_body;
         var manifold = contact.GetManifold();
         var friction = b2Settings.b2MixFriction(fixtureA.GetFriction(), fixtureB.GetFriction());
         var restitution = b2Settings.b2MixRestitution(fixtureA.GetRestitution(), fixtureB.GetRestitution());
         var vAX = bodyA.m_linearVelocity.x;
         var vAY = bodyA.m_linearVelocity.y;
         var vBX = bodyB.m_linearVelocity.x;
         var vBY = bodyB.m_linearVelocity.y;
         var wA = bodyA.m_angularVelocity;
         var wB = bodyB.m_angularVelocity;
         b2Settings.b2Assert(manifold.m_pointCount > 0);
         b2ContactSolver.s_worldManifold.Initialize(manifold, bodyA.m_xf, radiusA, bodyB.m_xf, radiusB);
         var normalX = b2ContactSolver.s_worldManifold.m_normal.x;
         var normalY = b2ContactSolver.s_worldManifold.m_normal.y;
         var cc = this.m_constraints[i];
         cc.bodyA = bodyA;
         cc.bodyB = bodyB;
         cc.manifold = manifold;
         cc.normal.x = normalX;
         cc.normal.y = normalY;
         cc.pointCount = manifold.m_pointCount;
         cc.friction = friction;
         cc.restitution = restitution;
         cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;
         cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;
         cc.localPoint.x = manifold.m_localPoint.x;
         cc.localPoint.y = manifold.m_localPoint.y;
         cc.radius = radiusA + radiusB;
         cc.type = manifold.m_type;
         for (var k = 0; k < cc.pointCount; ++k) {
            var cp = manifold.m_points[k];
            var ccp = cc.points[k];
            ccp.normalImpulse = cp.m_normalImpulse;
            ccp.tangentImpulse = cp.m_tangentImpulse;
            ccp.localPoint.SetV(cp.m_localPoint);
            var rAX = ccp.rA.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;
            var rAY = ccp.rA.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;
            var rBX = ccp.rB.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;
            var rBY = ccp.rB.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;
            var rnA = rAX * normalY - rAY * normalX;
            var rnB = rBX * normalY - rBY * normalX;
            rnA *= rnA;
            rnB *= rnB;
            var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;
            ccp.normalMass = 1.0 / kNormal;
            var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;
            kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;
            ccp.equalizedMass = 1.0 / kEqualized;
            var tangentX = normalY;
            var tangentY = (-normalX);
            var rtA = rAX * tangentY - rAY * tangentX;
            var rtB = rBX * tangentY - rBY * tangentX;
            rtA *= rtA;
            rtB *= rtB;
            var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;
            ccp.tangentMass = 1.0 / kTangent;
            ccp.velocityBias = 0.0;
            var tX = vBX + ((-wB * rBY)) - vAX - ((-wA * rAY));
            var tY = vBY + (wB * rBX) - vAY - (wA * rAX);
            var vRel = cc.normal.x * tX + cc.normal.y * tY;
            if (vRel < (-b2Settings.b2_velocityThreshold)) {
               ccp.velocityBias += (-cc.restitution * vRel);
            }
         }
         if (cc.pointCount == 2) {
            var ccp1 = cc.points[0];
            var ccp2 = cc.points[1];
            var invMassA = bodyA.m_invMass;
            var invIA = bodyA.m_invI;
            var invMassB = bodyB.m_invMass;
            var invIB = bodyB.m_invI;
            var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;
            var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;
            var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;
            var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;
            var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
            var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
            var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;
            var k_maxConditionNumber = 100.0;
            if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
               cc.K.col1.Set(k11, k12);
               cc.K.col2.Set(k12, k22);
               cc.K.GetInverse(cc.normalMass);
            }
            else {
               cc.pointCount = 1;
            }
         }
      }
   };
   b2ContactSolver.prototype.InitVelocityConstraints = function (step) {
      var tVec;
      var tVec2;
      var tMat;
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var invMassA = bodyA.m_invMass;
         var invIA = bodyA.m_invI;
         var invMassB = bodyB.m_invMass;
         var invIB = bodyB.m_invI;
         var normalX = c.normal.x;
         var normalY = c.normal.y;
         var tangentX = normalY;
         var tangentY = (-normalX);
         var tX = 0;
         var j = 0;
         var tCount = 0;
         if (step.warmStarting) {
            tCount = c.pointCount;
            for (j = 0;
            j < tCount; ++j) {
               var ccp = c.points[j];
               ccp.normalImpulse *= step.dtRatio;
               ccp.tangentImpulse *= step.dtRatio;
               var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;
               var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;
               bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
               bodyA.m_linearVelocity.x -= invMassA * PX;
               bodyA.m_linearVelocity.y -= invMassA * PY;
               bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
               bodyB.m_linearVelocity.x += invMassB * PX;
               bodyB.m_linearVelocity.y += invMassB * PY;
            }
         }
         else {
            tCount = c.pointCount;
            for (j = 0;
            j < tCount; ++j) {
               var ccp2 = c.points[j];
               ccp2.normalImpulse = 0.0;
               ccp2.tangentImpulse = 0.0;
            }
         }
      }
   };
   b2ContactSolver.prototype.SolveVelocityConstraints = function () {
      var j = 0;
      var ccp;
      var rAX = 0;
      var rAY = 0;
      var rBX = 0;
      var rBY = 0;
      var dvX = 0;
      var dvY = 0;
      var vn = 0;
      var vt = 0;
      var lambda = 0;
      var maxFriction = 0;
      var newImpulse = 0;
      var PX = 0;
      var PY = 0;
      var dX = 0;
      var dY = 0;
      var P1X = 0;
      var P1Y = 0;
      var P2X = 0;
      var P2Y = 0;
      var tMat;
      var tVec;
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var wA = bodyA.m_angularVelocity;
         var wB = bodyB.m_angularVelocity;
         var vA = bodyA.m_linearVelocity;
         var vB = bodyB.m_linearVelocity;
         var invMassA = bodyA.m_invMass;
         var invIA = bodyA.m_invI;
         var invMassB = bodyB.m_invMass;
         var invIB = bodyB.m_invI;
         var normalX = c.normal.x;
         var normalY = c.normal.y;
         var tangentX = normalY;
         var tangentY = (-normalX);
         var friction = c.friction;
         var tX = 0;
         for (j = 0;
         j < c.pointCount; j++) {
            ccp = c.points[j];
            dvX = vB.x - wB * ccp.rB.y - vA.x + wA * ccp.rA.y;
            dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;
            vt = dvX * tangentX + dvY * tangentY;
            lambda = ccp.tangentMass * (-vt);
            maxFriction = friction * ccp.normalImpulse;
            newImpulse = b2Math.Clamp(ccp.tangentImpulse + lambda, (-maxFriction), maxFriction);
            lambda = newImpulse - ccp.tangentImpulse;
            PX = lambda * tangentX;
            PY = lambda * tangentY;
            vA.x -= invMassA * PX;
            vA.y -= invMassA * PY;
            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
            vB.x += invMassB * PX;
            vB.y += invMassB * PY;
            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
            ccp.tangentImpulse = newImpulse;
         }
         var tCount = parseInt(c.pointCount);
         if (c.pointCount == 1) {
            ccp = c.points[0];
            dvX = vB.x + ((-wB * ccp.rB.y)) - vA.x - ((-wA * ccp.rA.y));
            dvY = vB.y + (wB * ccp.rB.x) - vA.y - (wA * ccp.rA.x);
            vn = dvX * normalX + dvY * normalY;
            lambda = (-ccp.normalMass * (vn - ccp.velocityBias));
            newImpulse = ccp.normalImpulse + lambda;
            newImpulse = newImpulse > 0 ? newImpulse : 0.0;
            lambda = newImpulse - ccp.normalImpulse;
            PX = lambda * normalX;
            PY = lambda * normalY;
            vA.x -= invMassA * PX;
            vA.y -= invMassA * PY;
            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
            vB.x += invMassB * PX;
            vB.y += invMassB * PY;
            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
            ccp.normalImpulse = newImpulse;
         }
         else {
            var cp1 = c.points[0];
            var cp2 = c.points[1];
            var aX = cp1.normalImpulse;
            var aY = cp2.normalImpulse;
            var dv1X = vB.x - wB * cp1.rB.y - vA.x + wA * cp1.rA.y;
            var dv1Y = vB.y + wB * cp1.rB.x - vA.y - wA * cp1.rA.x;
            var dv2X = vB.x - wB * cp2.rB.y - vA.x + wA * cp2.rA.y;
            var dv2Y = vB.y + wB * cp2.rB.x - vA.y - wA * cp2.rA.x;
            var vn1 = dv1X * normalX + dv1Y * normalY;
            var vn2 = dv2X * normalX + dv2Y * normalY;
            var bX = vn1 - cp1.velocityBias;
            var bY = vn2 - cp2.velocityBias;
            tMat = c.K;
            bX -= tMat.col1.x * aX + tMat.col2.x * aY;
            bY -= tMat.col1.y * aX + tMat.col2.y * aY;
            var k_errorTol = 0.001;
            for (;;) {
               tMat = c.normalMass;
               var xX = (-(tMat.col1.x * bX + tMat.col2.x * bY));
               var xY = (-(tMat.col1.y * bX + tMat.col2.y * bY));
               if (xX >= 0.0 && xY >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = (-cp1.normalMass * bX);
               xY = 0.0;
               vn1 = 0.0;
               vn2 = c.K.col1.y * xX + bY;
               if (xX >= 0.0 && vn2 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = 0.0;
               xY = (-cp2.normalMass * bY);
               vn1 = c.K.col2.x * xY + bX;
               vn2 = 0.0;
               if (xY >= 0.0 && vn1 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = 0.0;
               xY = 0.0;
               vn1 = bX;
               vn2 = bY;
               if (vn1 >= 0.0 && vn2 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               break;
            }
         }
         bodyA.m_angularVelocity = wA;
         bodyB.m_angularVelocity = wB;
      }
   };
   b2ContactSolver.prototype.FinalizeVelocityConstraints = function () {
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var m = c.manifold;
         for (var j = 0; j < c.pointCount; ++j) {
            var point1 = m.m_points[j];
            var point2 = c.points[j];
            point1.m_normalImpulse = point2.normalImpulse;
            point1.m_tangentImpulse = point2.tangentImpulse;
         }
      }
   };
   b2ContactSolver.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var minSeparation = 0.0;
      for (var i = 0; i < this.m_constraintCount; i++) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var invMassA = bodyA.m_mass * bodyA.m_invMass;
         var invIA = bodyA.m_mass * bodyA.m_invI;
         var invMassB = bodyB.m_mass * bodyB.m_invMass;
         var invIB = bodyB.m_mass * bodyB.m_invI;
         b2ContactSolver.s_psm.Initialize(c);
         var normal = b2ContactSolver.s_psm.m_normal;
         for (var j = 0; j < c.pointCount; j++) {
            var ccp = c.points[j];
            var point = b2ContactSolver.s_psm.m_points[j];
            var separation = b2ContactSolver.s_psm.m_separations[j];
            var rAX = point.x - bodyA.m_sweep.c.x;
            var rAY = point.y - bodyA.m_sweep.c.y;
            var rBX = point.x - bodyB.m_sweep.c.x;
            var rBY = point.y - bodyB.m_sweep.c.y;
            minSeparation = minSeparation < separation ? minSeparation : separation;
            var C = b2Math.Clamp(baumgarte * (separation + b2Settings.b2_linearSlop), (-b2Settings.b2_maxLinearCorrection), 0.0);
            var impulse = (-ccp.equalizedMass * C);
            var PX = impulse * normal.x;
            var PY = impulse * normal.y;bodyA.m_sweep.c.x -= invMassA * PX;
            bodyA.m_sweep.c.y -= invMassA * PY;
            bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
            bodyA.SynchronizeTransform();
            bodyB.m_sweep.c.x += invMassB * PX;
            bodyB.m_sweep.c.y += invMassB * PY;
            bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
            bodyB.SynchronizeTransform();
         }
      }
      return minSeparation > (-1.5 * b2Settings.b2_linearSlop);
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new b2WorldManifold();
      Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new b2PositionSolverManifold();
   });
   Box2D.inherit(b2EdgeAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2EdgeAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2EdgeAndCircleContact.b2EdgeAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2EdgeAndCircleContact.Create = function (allocator) {
      return new b2EdgeAndCircleContact();
   };
   b2EdgeAndCircleContact.Destroy = function (contact, allocator) {};
   b2EdgeAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   };
   b2EdgeAndCircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      this.b2CollideEdgeAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2EdgeShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   };
   b2EdgeAndCircleContact.prototype.b2CollideEdgeAndCircle = function (manifold, edge, xf1, circle, xf2) {};
   Box2D.inherit(b2NullContact, Box2D.Dynamics.Contacts.b2Contact);
   b2NullContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2NullContact.b2NullContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2NullContact.prototype.b2NullContact = function () {
      this.__super.b2Contact.call(this);
   };
   b2NullContact.prototype.Evaluate = function () {};
   Box2D.inherit(b2PolyAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolyAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolyAndCircleContact.b2PolyAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolyAndCircleContact.Create = function (allocator) {
      return new b2PolyAndCircleContact();
   };
   b2PolyAndCircleContact.Destroy = function (contact, allocator) {};
   b2PolyAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);
      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_circleShape);
   };
   b2PolyAndCircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.m_body;
      var bB = this.m_fixtureB.m_body;
      b2Collision.CollidePolygonAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   };
   Box2D.inherit(b2PolyAndEdgeContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolyAndEdgeContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolyAndEdgeContact.b2PolyAndEdgeContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolyAndEdgeContact.Create = function (allocator) {
      return new b2PolyAndEdgeContact();
   };
   b2PolyAndEdgeContact.Destroy = function (contact, allocator) {};
   b2PolyAndEdgeContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);
      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_edgeShape);
   };
   b2PolyAndEdgeContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      this.b2CollidePolyAndEdge(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2EdgeShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   };
   b2PolyAndEdgeContact.prototype.b2CollidePolyAndEdge = function (manifold, polygon, xf1, edge, xf2) {};
   Box2D.inherit(b2PolygonContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolygonContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolygonContact.b2PolygonContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolygonContact.Create = function (allocator) {
      return new b2PolygonContact();
   };
   b2PolygonContact.Destroy = function (contact, allocator) {};
   b2PolygonContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   };
   b2PolygonContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      b2Collision.CollidePolygons(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2PolygonShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   };
   b2PositionSolverManifold.b2PositionSolverManifold = function () {};
   b2PositionSolverManifold.prototype.b2PositionSolverManifold = function () {
      this.m_normal = new b2Vec2();
      this.m_separations = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2Vec2();
      }
   };
   b2PositionSolverManifold.prototype.Initialize = function (cc) {
      b2Settings.b2Assert(cc.pointCount > 0);
      var i = 0;
      var clipPointX = 0;
      var clipPointY = 0;
      var tMat;
      var tVec;
      var planePointX = 0;
      var planePointY = 0;
      switch (cc.type) {
      case b2Manifold.e_circles:
         {
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPoint;
            var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.points[0].localPoint;
            var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            var dX = pointBX - pointAX;
            var dY = pointBY - pointAY;
            var d2 = dX * dX + dY * dY;
            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
               var d = Math.sqrt(d2);
               this.m_normal.x = dX / d;
               this.m_normal.y = dY / d;
            }
            else {
               this.m_normal.x = 1.0;
               this.m_normal.y = 0.0;
            }
            this.m_points[0].x = 0.5 * (pointAX + pointBX);
            this.m_points[0].y = 0.5 * (pointAY + pointBY);
            this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;
         }
         break;
      case b2Manifold.e_faceA:
         {
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPlaneNormal;
            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPoint;
            planePointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            planePointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyB.m_xf.R;
            for (i = 0;
            i < cc.pointCount; ++i) {
               tVec = cc.points[i].localPoint;
               clipPointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
               clipPointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
               this.m_points[i].x = clipPointX;
               this.m_points[i].y = clipPointY;
            }
         }
         break;
      case b2Manifold.e_faceB:
         {
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.localPlaneNormal;
            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.localPoint;
            planePointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            planePointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyA.m_xf.R;
            for (i = 0;
            i < cc.pointCount; ++i) {
               tVec = cc.points[i].localPoint;
               clipPointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
               clipPointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
               this.m_points[i].Set(clipPointX, clipPointY);
            }
            this.m_normal.x *= (-1);
            this.m_normal.y *= (-1);
         }
         break;
      }
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA = new b2Vec2();
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB = new b2Vec2();
   });
})();
(function () {
   var b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2BuoyancyController = Box2D.Dynamics.Controllers.b2BuoyancyController,
      b2ConstantAccelController = Box2D.Dynamics.Controllers.b2ConstantAccelController,
      b2ConstantForceController = Box2D.Dynamics.Controllers.b2ConstantForceController,
      b2Controller = Box2D.Dynamics.Controllers.b2Controller,
      b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,
      b2GravityController = Box2D.Dynamics.Controllers.b2GravityController,
      b2TensorDampingController = Box2D.Dynamics.Controllers.b2TensorDampingController;

   Box2D.inherit(b2BuoyancyController, Box2D.Dynamics.Controllers.b2Controller);
   b2BuoyancyController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2BuoyancyController.b2BuoyancyController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.normal = new b2Vec2(0, (-1));
      this.offset = 0;
      this.density = 0;
      this.velocity = new b2Vec2(0, 0);
      this.linearDrag = 2;
      this.angularDrag = 1;
      this.useDensity = false;
      this.useWorldGravity = true;
      this.gravity = null;
   };
   b2BuoyancyController.prototype.Step = function (step) {
      if (!this.m_bodyList) return;
      if (this.useWorldGravity) {
         this.gravity = this.GetWorld().GetGravity().Copy();
      }
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (body.IsAwake() == false) {
            continue;
         }
         var areac = new b2Vec2();
         var massc = new b2Vec2();
         var area = 0.0;
         var mass = 0.0;
         for (var fixture = body.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
            var sc = new b2Vec2();
            var sarea = fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);
            area += sarea;
            areac.x += sarea * sc.x;
            areac.y += sarea * sc.y;
            var shapeDensity = 0;
            if (this.useDensity) {
               shapeDensity = 1;
            }
            else {
               shapeDensity = 1;
            }
            mass += sarea * shapeDensity;
            massc.x += sarea * sc.x * shapeDensity;
            massc.y += sarea * sc.y * shapeDensity;
         }
         areac.x /= area;
         areac.y /= area;
         massc.x /= mass;
         massc.y /= mass;
         if (area < Number.MIN_VALUE) continue;
         var buoyancyForce = this.gravity.GetNegative();
         buoyancyForce.Multiply(this.density * area);
         body.ApplyForce(buoyancyForce, massc);
         var dragForce = body.GetLinearVelocityFromWorldPoint(areac);
         dragForce.Subtract(this.velocity);
         dragForce.Multiply((-this.linearDrag * area));
         body.ApplyForce(dragForce, areac);
         body.ApplyTorque((-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag));
      }
   };
   b2BuoyancyController.prototype.Draw = function (debugDraw) {
      var r = 1000;
      var p1 = new b2Vec2();
      var p2 = new b2Vec2();
      p1.x = this.normal.x * this.offset + this.normal.y * r;
      p1.y = this.normal.y * this.offset - this.normal.x * r;
      p2.x = this.normal.x * this.offset - this.normal.y * r;
      p2.y = this.normal.y * this.offset + this.normal.x * r;
      var color = new b2Color(0, 0, 1);
      debugDraw.DrawSegment(p1, p2, color);
   };
   Box2D.inherit(b2ConstantAccelController, Box2D.Dynamics.Controllers.b2Controller);
   b2ConstantAccelController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2ConstantAccelController.b2ConstantAccelController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.A = new b2Vec2(0, 0);
   };
   b2ConstantAccelController.prototype.Step = function (step) {
      var smallA = new b2Vec2(this.A.x * step.dt, this.A.y * step.dt);
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) continue;
         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + smallA.x, body.GetLinearVelocity().y + smallA.y));
      }
   };
   Box2D.inherit(b2ConstantForceController, Box2D.Dynamics.Controllers.b2Controller);
   b2ConstantForceController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2ConstantForceController.b2ConstantForceController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.F = new b2Vec2(0, 0);
   };
   b2ConstantForceController.prototype.Step = function (step) {
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) continue;
         body.ApplyForce(this.F, body.GetWorldCenter());
      }
   };
   b2Controller.b2Controller = function () {};
   b2Controller.prototype.Step = function (step) {};
   b2Controller.prototype.Draw = function (debugDraw) {};
   b2Controller.prototype.AddBody = function (body) {
      var edge = new b2ControllerEdge();
      edge.controller = this;
      edge.body = body;
      edge.nextBody = this.m_bodyList;
      edge.prevBody = null;
      this.m_bodyList = edge;
      if (edge.nextBody) edge.nextBody.prevBody = edge;
      this.m_bodyCount++;
      edge.nextController = body.m_controllerList;
      edge.prevController = null;
      body.m_controllerList = edge;
      if (edge.nextController) edge.nextController.prevController = edge;
      body.m_controllerCount++;
   };
   b2Controller.prototype.RemoveBody = function (body) {
      var edge = body.m_controllerList;
      while (edge && edge.controller != this)
      edge = edge.nextController;
      if (edge.prevBody) edge.prevBody.nextBody = edge.nextBody;
      if (edge.nextBody) edge.nextBody.prevBody = edge.prevBody;
      if (edge.nextController) edge.nextController.prevController = edge.prevController;
      if (edge.prevController) edge.prevController.nextController = edge.nextController;
      if (this.m_bodyList == edge) this.m_bodyList = edge.nextBody;
      if (body.m_controllerList == edge) body.m_controllerList = edge.nextController;
      body.m_controllerCount--;
      this.m_bodyCount--;
   };
   b2Controller.prototype.Clear = function () {
      while (this.m_bodyList)
      this.RemoveBody(this.m_bodyList.body);
   };
   b2Controller.prototype.GetNext = function () {
      return this.m_next;
   };
   b2Controller.prototype.GetWorld = function () {
      return this.m_world;
   };
   b2Controller.prototype.GetBodyList = function () {
      return this.m_bodyList;
   };
   b2ControllerEdge.b2ControllerEdge = function () {};
   Box2D.inherit(b2GravityController, Box2D.Dynamics.Controllers.b2Controller);
   b2GravityController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2GravityController.b2GravityController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.G = 1;
      this.invSqr = true;
   };
   b2GravityController.prototype.Step = function (step) {
      var i = null;
      var body1 = null;
      var p1 = null;
      var mass1 = 0;
      var j = null;
      var body2 = null;
      var p2 = null;
      var dx = 0;
      var dy = 0;
      var r2 = 0;
      var f = null;
      if (this.invSqr) {
         for (i = this.m_bodyList;
         i; i = i.nextBody) {
            body1 = i.body;
            p1 = body1.GetWorldCenter();
            mass1 = body1.GetMass();
            for (j = this.m_bodyList;
            j != i; j = j.nextBody) {
               body2 = j.body;
               p2 = body2.GetWorldCenter();
               dx = p2.x - p1.x;
               dy = p2.y - p1.y;
               r2 = dx * dx + dy * dy;
               if (r2 < Number.MIN_VALUE) continue;
               f = new b2Vec2(dx, dy);
               f.Multiply(this.G / r2 / Math.sqrt(r2) * mass1 * body2.GetMass());
               if (body1.IsAwake()) body1.ApplyForce(f, p1);
               f.Multiply((-1));
               if (body2.IsAwake()) body2.ApplyForce(f, p2);
            }
         }
      }
      else {
         for (i = this.m_bodyList;
         i; i = i.nextBody) {
            body1 = i.body;
            p1 = body1.GetWorldCenter();
            mass1 = body1.GetMass();
            for (j = this.m_bodyList;
            j != i; j = j.nextBody) {
               body2 = j.body;
               p2 = body2.GetWorldCenter();
               dx = p2.x - p1.x;
               dy = p2.y - p1.y;
               r2 = dx * dx + dy * dy;
               if (r2 < Number.MIN_VALUE) continue;
               f = new b2Vec2(dx, dy);
               f.Multiply(this.G / r2 * mass1 * body2.GetMass());
               if (body1.IsAwake()) body1.ApplyForce(f, p1);
               f.Multiply((-1));
               if (body2.IsAwake()) body2.ApplyForce(f, p2);
            }
         }
      }
   };
   Box2D.inherit(b2TensorDampingController, Box2D.Dynamics.Controllers.b2Controller);
   b2TensorDampingController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2TensorDampingController.b2TensorDampingController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.T = new b2Mat22();
      this.maxTimestep = 0;
   };
   b2TensorDampingController.prototype.SetAxisAligned = function (xDamping, yDamping) {
      if (xDamping === undefined) xDamping = 0;
      if (yDamping === undefined) yDamping = 0;
      this.T.col1.x = (-xDamping);
      this.T.col1.y = 0;
      this.T.col2.x = 0;
      this.T.col2.y = (-yDamping);
      if (xDamping > 0 || yDamping > 0) {
         this.maxTimestep = 1 / Math.max(xDamping, yDamping);
      }
      else {
         this.maxTimestep = 0;
      }
   };
   b2TensorDampingController.prototype.Step = function (step) {
      var timestep = step.dt;
      if (timestep <= Number.MIN_VALUE) return;
      if (timestep > this.maxTimestep && this.maxTimestep > 0) timestep = this.maxTimestep;
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) {
            continue;
         }
         var damping = body.GetWorldVector(b2Math.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity())));
         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + damping.x * timestep, body.GetLinearVelocity().y + damping.y * timestep));
      }
   };
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,
      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,
      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,
      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,
      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,
      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,
      b2Joint = Box2D.Dynamics.Joints.b2Joint,
      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,
      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,
      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,
      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,
      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,
      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,
      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,
      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,
      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,
      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,
      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,
      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,
      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World;

   Box2D.inherit(b2DistanceJoint, Box2D.Dynamics.Joints.b2Joint);
   b2DistanceJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2DistanceJoint.b2DistanceJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_u = new b2Vec2();
   };
   b2DistanceJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   };
   b2DistanceJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   };
   b2DistanceJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);
   };
   b2DistanceJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   };
   b2DistanceJoint.prototype.GetLength = function () {
      return this.m_length;
   };
   b2DistanceJoint.prototype.SetLength = function (length) {
      if (length === undefined) length = 0;
      this.m_length = length;
   };
   b2DistanceJoint.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
   };
   b2DistanceJoint.prototype.SetFrequency = function (hz) {
      if (hz === undefined) hz = 0;
      this.m_frequencyHz = hz;
   };
   b2DistanceJoint.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
   };
   b2DistanceJoint.prototype.SetDampingRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_dampingRatio = ratio;
   };
   b2DistanceJoint.prototype.b2DistanceJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_length = def.length;
      this.m_frequencyHz = def.frequencyHz;
      this.m_dampingRatio = def.dampingRatio;
      this.m_impulse = 0.0;
      this.m_gamma = 0.0;
      this.m_bias = 0.0;
   };
   b2DistanceJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
      if (length > b2Settings.b2_linearSlop) {
         this.m_u.Multiply(1.0 / length);
      }
      else {
         this.m_u.SetZero();
      }
      var cr1u = (r1X * this.m_u.y - r1Y * this.m_u.x);
      var cr2u = (r2X * this.m_u.y - r2Y * this.m_u.x);
      var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;
      this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;
      if (this.m_frequencyHz > 0.0) {
         var C = length - this.m_length;
         var omega = 2.0 * Math.PI * this.m_frequencyHz;
         var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;
         var k = this.m_mass * omega * omega;
         this.m_gamma = step.dt * (d + step.dt * k);
         this.m_gamma = this.m_gamma != 0.0 ? 1 / this.m_gamma : 0.0;
         this.m_bias = C * step.dt * k * this.m_gamma;
         this.m_mass = invMass + this.m_gamma;
         this.m_mass = this.m_mass != 0.0 ? 1.0 / this.m_mass : 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse *= step.dtRatio;
         var PX = this.m_impulse * this.m_u.x;
         var PY = this.m_impulse * this.m_u.y;
         bA.m_linearVelocity.x -= bA.m_invMass * PX;
         bA.m_linearVelocity.y -= bA.m_invMass * PY;
         bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
         bB.m_linearVelocity.x += bB.m_invMass * PX;
         bB.m_linearVelocity.y += bB.m_invMass * PY;
         bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
      }
      else {
         this.m_impulse = 0.0;
      }
   };
   b2DistanceJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
      var v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
      var v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
      var v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
      var Cdot = (this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y));
      var impulse = (-this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse));
      this.m_impulse += impulse;
      var PX = impulse * this.m_u.x;
      var PY = impulse * this.m_u.y;
      bA.m_linearVelocity.x -= bA.m_invMass * PX;
      bA.m_linearVelocity.y -= bA.m_invMass * PY;
      bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
      bB.m_linearVelocity.x += bB.m_invMass * PX;
      bB.m_linearVelocity.y += bB.m_invMass * PY;
      bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
   };
   b2DistanceJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var tMat;
      if (this.m_frequencyHz > 0.0) {
         return true;
      }
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      var length = Math.sqrt(dX * dX + dY * dY);
      dX /= length;
      dY /= length;
      var C = length - this.m_length;
      C = b2Math.Clamp(C, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
      var impulse = (-this.m_mass * C);
      this.m_u.Set(dX, dY);
      var PX = impulse * this.m_u.x;
      var PY = impulse * this.m_u.y;
      bA.m_sweep.c.x -= bA.m_invMass * PX;
      bA.m_sweep.c.y -= bA.m_invMass * PY;
      bA.m_sweep.a -= bA.m_invI * (r1X * PY - r1Y * PX);
      bB.m_sweep.c.x += bB.m_invMass * PX;
      bB.m_sweep.c.y += bB.m_invMass * PY;
      bB.m_sweep.a += bB.m_invI * (r2X * PY - r2Y * PX);
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return b2Math.Abs(C) < b2Settings.b2_linearSlop;
   };
   Box2D.inherit(b2DistanceJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2DistanceJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2DistanceJointDef.b2DistanceJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2DistanceJointDef.prototype.b2DistanceJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_distanceJoint;
      this.length = 1.0;
      this.frequencyHz = 0.0;
      this.dampingRatio = 0.0;
   };
   b2DistanceJointDef.prototype.Initialize = function (bA, bB, anchorA, anchorB) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchorA));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchorB));
      var dX = anchorB.x - anchorA.x;
      var dY = anchorB.y - anchorA.y;
      this.length = Math.sqrt(dX * dX + dY * dY);
      this.frequencyHz = 0.0;
      this.dampingRatio = 0.0;
   };
   Box2D.inherit(b2FrictionJoint, Box2D.Dynamics.Joints.b2Joint);
   b2FrictionJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2FrictionJoint.b2FrictionJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new b2Vec2();
      this.m_localAnchorB = new b2Vec2();
      this.m_linearMass = new b2Mat22();
      this.m_linearImpulse = new b2Vec2();
   };
   b2FrictionJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
   };
   b2FrictionJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
   };
   b2FrictionJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);
   };
   b2FrictionJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_angularImpulse;
   };
   b2FrictionJoint.prototype.SetMaxForce = function (force) {
      if (force === undefined) force = 0;
      this.m_maxForce = force;
   };
   b2FrictionJoint.prototype.GetMaxForce = function () {
      return this.m_maxForce;
   };
   b2FrictionJoint.prototype.SetMaxTorque = function (torque) {
      if (torque === undefined) torque = 0;
      this.m_maxTorque = torque;
   };
   b2FrictionJoint.prototype.GetMaxTorque = function () {
      return this.m_maxTorque;
   };
   b2FrictionJoint.prototype.b2FrictionJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchorA.SetV(def.localAnchorA);
      this.m_localAnchorB.SetV(def.localAnchorB);
      this.m_linearMass.SetZero();
      this.m_angularMass = 0.0;
      this.m_linearImpulse.SetZero();
      this.m_angularImpulse = 0.0;
      this.m_maxForce = def.maxForce;
      this.m_maxTorque = def.maxTorque;
   };
   b2FrictionJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      var K = new b2Mat22();
      K.col1.x = mA + mB;
      K.col2.x = 0.0;
      K.col1.y = 0.0;
      K.col2.y = mA + mB;
      K.col1.x += iA * rAY * rAY;
      K.col2.x += (-iA * rAX * rAY);
      K.col1.y += (-iA * rAX * rAY);
      K.col2.y += iA * rAX * rAX;
      K.col1.x += iB * rBY * rBY;
      K.col2.x += (-iB * rBX * rBY);
      K.col1.y += (-iB * rBX * rBY);
      K.col2.y += iB * rBX * rBX;
      K.GetInverse(this.m_linearMass);
      this.m_angularMass = iA + iB;
      if (this.m_angularMass > 0.0) {
         this.m_angularMass = 1.0 / this.m_angularMass;
      }
      if (step.warmStarting) {
         this.m_linearImpulse.x *= step.dtRatio;
         this.m_linearImpulse.y *= step.dtRatio;
         this.m_angularImpulse *= step.dtRatio;
         var P = this.m_linearImpulse;
         bA.m_linearVelocity.x -= mA * P.x;
         bA.m_linearVelocity.y -= mA * P.y;
         bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);
         bB.m_linearVelocity.x += mB * P.x;
         bB.m_linearVelocity.y += mB * P.y;
         bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);
      }
      else {
         this.m_linearImpulse.SetZero();
         this.m_angularImpulse = 0.0;
      }
   };
   b2FrictionJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var vA = bA.m_linearVelocity;
      var wA = bA.m_angularVelocity;
      var vB = bB.m_linearVelocity;
      var wB = bB.m_angularVelocity;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var maxImpulse = 0; {
         var Cdot = wB - wA;
         var impulse = (-this.m_angularMass * Cdot);
         var oldImpulse = this.m_angularImpulse;
         maxImpulse = step.dt * this.m_maxTorque;
         this.m_angularImpulse = b2Math.Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_angularImpulse - oldImpulse;
         wA -= iA * impulse;
         wB += iB * impulse;
      } {
         var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
         var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
         var impulseV = b2Math.MulMV(this.m_linearMass, new b2Vec2((-CdotX), (-CdotY)));
         var oldImpulseV = this.m_linearImpulse.Copy();
         this.m_linearImpulse.Add(impulseV);
         maxImpulse = step.dt * this.m_maxForce;
         if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
            this.m_linearImpulse.Normalize();
            this.m_linearImpulse.Multiply(maxImpulse);
         }
         impulseV = b2Math.SubtractVV(this.m_linearImpulse, oldImpulseV);
         vA.x -= mA * impulseV.x;
         vA.y -= mA * impulseV.y;
         wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
         vB.x += mB * impulseV.x;
         vB.y += mB * impulseV.y;
         wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
      }
      bA.m_angularVelocity = wA;
      bB.m_angularVelocity = wB;
   };
   b2FrictionJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return true;
   };
   Box2D.inherit(b2FrictionJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2FrictionJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2FrictionJointDef.b2FrictionJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2FrictionJointDef.prototype.b2FrictionJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_frictionJoint;
      this.maxForce = 0.0;
      this.maxTorque = 0.0;
   };
   b2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
   };
   Box2D.inherit(b2GearJoint, Box2D.Dynamics.Joints.b2Joint);
   b2GearJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2GearJoint.b2GearJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new b2Vec2();
      this.m_groundAnchor2 = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_J = new b2Jacobian();
   };
   b2GearJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   };
   b2GearJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   };
   b2GearJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_J.linearB.x, inv_dt * this.m_impulse * this.m_J.linearB.y);
   };
   b2GearJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      var tMat = this.m_bodyB.m_xf.R;
      var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;
      var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;
      var tX = tMat.col1.x * rX + tMat.col2.x * rY;
      rY = tMat.col1.y * rX + tMat.col2.y * rY;
      rX = tX;
      var PX = this.m_impulse * this.m_J.linearB.x;
      var PY = this.m_impulse * this.m_J.linearB.y;
      return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);
   };
   b2GearJoint.prototype.GetRatio = function () {
      return this.m_ratio;
   };
   b2GearJoint.prototype.SetRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_ratio = ratio;
   };
   b2GearJoint.prototype.b2GearJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var type1 = parseInt(def.joint1.m_type);
      var type2 = parseInt(def.joint2.m_type);
      this.m_revolute1 = null;
      this.m_prismatic1 = null;
      this.m_revolute2 = null;
      this.m_prismatic2 = null;
      var coordinate1 = 0;
      var coordinate2 = 0;
      this.m_ground1 = def.joint1.GetBodyA();
      this.m_bodyA = def.joint1.GetBodyB();
      if (type1 == b2Joint.e_revoluteJoint) {
         this.m_revolute1 = (def.joint1 instanceof b2RevoluteJoint ? def.joint1 : null);
         this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);
         this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);
         coordinate1 = this.m_revolute1.GetJointAngle();
      }
      else {
         this.m_prismatic1 = (def.joint1 instanceof b2PrismaticJoint ? def.joint1 : null);
         this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);
         this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);
         coordinate1 = this.m_prismatic1.GetJointTranslation();
      }
      this.m_ground2 = def.joint2.GetBodyA();
      this.m_bodyB = def.joint2.GetBodyB();
      if (type2 == b2Joint.e_revoluteJoint) {
         this.m_revolute2 = (def.joint2 instanceof b2RevoluteJoint ? def.joint2 : null);
         this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);
         this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);
         coordinate2 = this.m_revolute2.GetJointAngle();
      }
      else {
         this.m_prismatic2 = (def.joint2 instanceof b2PrismaticJoint ? def.joint2 : null);
         this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);
         this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);
         coordinate2 = this.m_prismatic2.GetJointTranslation();
      }
      this.m_ratio = def.ratio;
      this.m_constant = coordinate1 + this.m_ratio * coordinate2;
      this.m_impulse = 0.0;
   };
   b2GearJoint.prototype.InitVelocityConstraints = function (step) {
      var g1 = this.m_ground1;
      var g2 = this.m_ground2;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var ugX = 0;
      var ugY = 0;
      var rX = 0;
      var rY = 0;
      var tMat;
      var tVec;
      var crug = 0;
      var tX = 0;
      var K = 0.0;
      this.m_J.SetZero();
      if (this.m_revolute1) {
         this.m_J.angularA = (-1.0);
         K += bA.m_invI;
      }
      else {
         tMat = g1.m_xf.R;
         tVec = this.m_prismatic1.m_localXAxis1;
         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tMat = bA.m_xf.R;
         rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = tMat.col1.x * rX + tMat.col2.x * rY;
         rY = tMat.col1.y * rX + tMat.col2.y * rY;
         rX = tX;
         crug = rX * ugY - rY * ugX;
         this.m_J.linearA.Set((-ugX), (-ugY));
         this.m_J.angularA = (-crug);
         K += bA.m_invMass + bA.m_invI * crug * crug;
      }
      if (this.m_revolute2) {
         this.m_J.angularB = (-this.m_ratio);
         K += this.m_ratio * this.m_ratio * bB.m_invI;
      }
      else {
         tMat = g2.m_xf.R;
         tVec = this.m_prismatic2.m_localXAxis1;
         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tMat = bB.m_xf.R;
         rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = tMat.col1.x * rX + tMat.col2.x * rY;
         rY = tMat.col1.y * rX + tMat.col2.y * rY;
         rX = tX;
         crug = rX * ugY - rY * ugX;
         this.m_J.linearB.Set((-this.m_ratio * ugX), (-this.m_ratio * ugY));
         this.m_J.angularB = (-this.m_ratio * crug);
         K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);
      }
      this.m_mass = K > 0.0 ? 1.0 / K : 0.0;
      if (step.warmStarting) {
         bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;
         bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;
         bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;
         bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;
         bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;
         bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;
      }
      else {
         this.m_impulse = 0.0;
      }
   };
   b2GearJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var Cdot = this.m_J.Compute(bA.m_linearVelocity, bA.m_angularVelocity, bB.m_linearVelocity, bB.m_angularVelocity);
      var impulse = (-this.m_mass * Cdot);
      this.m_impulse += impulse;
      bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;
      bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;
      bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;
      bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;
      bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;
      bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;
   };
   b2GearJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var linearError = 0.0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var coordinate1 = 0;
      var coordinate2 = 0;
      if (this.m_revolute1) {
         coordinate1 = this.m_revolute1.GetJointAngle();
      }
      else {
         coordinate1 = this.m_prismatic1.GetJointTranslation();
      }
      if (this.m_revolute2) {
         coordinate2 = this.m_revolute2.GetJointAngle();
      }
      else {
         coordinate2 = this.m_prismatic2.GetJointTranslation();
      }
      var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);
      var impulse = (-this.m_mass * C);
      bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;
      bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;
      bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;
      bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;
      bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;
      bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError < b2Settings.b2_linearSlop;
   };
   Box2D.inherit(b2GearJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2GearJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2GearJointDef.b2GearJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
   };
   b2GearJointDef.prototype.b2GearJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_gearJoint;
      this.joint1 = null;
      this.joint2 = null;
      this.ratio = 1.0;
   };
   b2Jacobian.b2Jacobian = function () {
      this.linearA = new b2Vec2();
      this.linearB = new b2Vec2();
   };
   b2Jacobian.prototype.SetZero = function () {
      this.linearA.SetZero();
      this.angularA = 0.0;
      this.linearB.SetZero();
      this.angularB = 0.0;
   };
   b2Jacobian.prototype.Set = function (x1, a1, x2, a2) {
      if (a1 === undefined) a1 = 0;
      if (a2 === undefined) a2 = 0;
      this.linearA.SetV(x1);
      this.angularA = a1;
      this.linearB.SetV(x2);
      this.angularB = a2;
   };
   b2Jacobian.prototype.Compute = function (x1, a1, x2, a2) {
      if (a1 === undefined) a1 = 0;
      if (a2 === undefined) a2 = 0;
      return (this.linearA.x * x1.x + this.linearA.y * x1.y) + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;
   };
   b2Joint.b2Joint = function () {
      this.m_edgeA = new b2JointEdge();
      this.m_edgeB = new b2JointEdge();
      this.m_localCenterA = new b2Vec2();
      this.m_localCenterB = new b2Vec2();
   };
   b2Joint.prototype.GetType = function () {
      return this.m_type;
   };
   b2Joint.prototype.GetAnchorA = function () {
      return null;
   };
   b2Joint.prototype.GetAnchorB = function () {
      return null;
   };
   b2Joint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return null;
   };
   b2Joint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   };
   b2Joint.prototype.GetBodyA = function () {
      return this.m_bodyA;
   };
   b2Joint.prototype.GetBodyB = function () {
      return this.m_bodyB;
   };
   b2Joint.prototype.GetNext = function () {
      return this.m_next;
   };
   b2Joint.prototype.GetUserData = function () {
      return this.m_userData;
   };
   b2Joint.prototype.SetUserData = function (data) {
      this.m_userData = data;
   };
   b2Joint.prototype.IsActive = function () {
      return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
   };
   b2Joint.Create = function (def, allocator) {
      var joint = null;
      switch (def.type) {
      case b2Joint.e_distanceJoint:
         {
            joint = new b2DistanceJoint((def instanceof b2DistanceJointDef ? def : null));
         }
         break;
      case b2Joint.e_mouseJoint:
         {
            joint = new b2MouseJoint((def instanceof b2MouseJointDef ? def : null));
         }
         break;
      case b2Joint.e_prismaticJoint:
         {
            joint = new b2PrismaticJoint((def instanceof b2PrismaticJointDef ? def : null));
         }
         break;
      case b2Joint.e_revoluteJoint:
         {
            joint = new b2RevoluteJoint((def instanceof b2RevoluteJointDef ? def : null));
         }
         break;
      case b2Joint.e_pulleyJoint:
         {
            joint = new b2PulleyJoint((def instanceof b2PulleyJointDef ? def : null));
         }
         break;
      case b2Joint.e_gearJoint:
         {
            joint = new b2GearJoint((def instanceof b2GearJointDef ? def : null));
         }
         break;
      case b2Joint.e_lineJoint:
         {
            joint = new b2LineJoint((def instanceof b2LineJointDef ? def : null));
         }
         break;
      case b2Joint.e_weldJoint:
         {
            joint = new b2WeldJoint((def instanceof b2WeldJointDef ? def : null));
         }
         break;
      case b2Joint.e_frictionJoint:
         {
            joint = new b2FrictionJoint((def instanceof b2FrictionJointDef ? def : null));
         }
         break;
      default:
         break;
      }
      return joint;
   };
   b2Joint.Destroy = function (joint, allocator) {};
   b2Joint.prototype.b2Joint = function (def) {
      b2Settings.b2Assert(def.bodyA != def.bodyB);
      this.m_type = def.type;
      this.m_prev = null;
      this.m_next = null;
      this.m_bodyA = def.bodyA;
      this.m_bodyB = def.bodyB;
      this.m_collideConnected = def.collideConnected;
      this.m_islandFlag = false;
      this.m_userData = def.userData;
   };
   b2Joint.prototype.InitVelocityConstraints = function (step) {};
   b2Joint.prototype.SolveVelocityConstraints = function (step) {};
   b2Joint.prototype.FinalizeVelocityConstraints = function () {};
   b2Joint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return false;
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;
      Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;
      Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;
      Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;
      Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;
      Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;
      Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;
      Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;
      Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;
      Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;
      Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;
      Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;
      Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;
      Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;
   });
   b2JointDef.b2JointDef = function () {};
   b2JointDef.prototype.b2JointDef = function () {
      this.type = b2Joint.e_unknownJoint;
      this.userData = null;
      this.bodyA = null;
      this.bodyB = null;
      this.collideConnected = false;
   };
   b2JointEdge.b2JointEdge = function () {};
   Box2D.inherit(b2LineJoint, Box2D.Dynamics.Joints.b2Joint);
   b2LineJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2LineJoint.b2LineJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_localXAxis1 = new b2Vec2();
      this.m_localYAxis1 = new b2Vec2();
      this.m_axis = new b2Vec2();
      this.m_perp = new b2Vec2();
      this.m_K = new b2Mat22();
      this.m_impulse = new b2Vec2();
   };
   b2LineJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   };
   b2LineJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   };
   b2LineJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
   };
   b2LineJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.y;
   };
   b2LineJoint.prototype.GetJointTranslation = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var p1 = bA.GetWorldPoint(this.m_localAnchor1);
      var p2 = bB.GetWorldPoint(this.m_localAnchor2);
      var dX = p2.x - p1.x;
      var dY = p2.y - p1.y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var translation = axis.x * dX + axis.y * dY;
      return translation;
   };
   b2LineJoint.prototype.GetJointSpeed = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var v1 = bA.m_linearVelocity;
      var v2 = bB.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var w2 = bB.m_angularVelocity;
      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
      return speed;
   };
   b2LineJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   };
   b2LineJoint.prototype.EnableLimit = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableLimit = flag;
   };
   b2LineJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
   };
   b2LineJoint.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
   };
   b2LineJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_lowerTranslation = lower;
      this.m_upperTranslation = upper;
   };
   b2LineJoint.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
   };
   b2LineJoint.prototype.EnableMotor = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableMotor = flag;
   };
   b2LineJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   };
   b2LineJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   };
   b2LineJoint.prototype.SetMaxMotorForce = function (force) {
      if (force === undefined) force = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_maxMotorForce = force;
   };
   b2LineJoint.prototype.GetMaxMotorForce = function () {
      return this.m_maxMotorForce;
   };
   b2LineJoint.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
   };
   b2LineJoint.prototype.b2LineJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_localXAxis1.SetV(def.localAxisA);
      this.m_localYAxis1.x = (-this.m_localXAxis1.y);
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_impulse.SetZero();
      this.m_motorMass = 0.0;
      this.m_motorImpulse = 0.0;
      this.m_lowerTranslation = def.lowerTranslation;
      this.m_upperTranslation = def.upperTranslation;
      this.m_maxMotorForce = def.maxMotorForce;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
   };
   b2LineJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      this.m_localCenterA.SetV(bA.GetLocalCenter());
      this.m_localCenterB.SetV(bB.GetLocalCenter());
      var xf1 = bA.GetTransform();
      var xf2 = bB.GetTransform();
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      this.m_invMassA = bA.m_invMass;
      this.m_invMassB = bB.m_invMass;
      this.m_invIA = bA.m_invI;
      this.m_invIB = bB.m_invI; {
         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
         this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1.0 / this.m_motorMass : 0.0;
      } {
         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));
         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
         var m1 = this.m_invMassA;
         var m2 = this.m_invMassB;
         var i1 = this.m_invIA;
         var i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
      }
      if (this.m_enableLimit) {
         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointTransition <= this.m_lowerTranslation) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_limitState = b2Joint.e_atLowerLimit;
               this.m_impulse.y = 0.0;
            }
         }
         else if (jointTransition >= this.m_upperTranslation) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_limitState = b2Joint.e_atUpperLimit;
               this.m_impulse.y = 0.0;
            }
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.y = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;
         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;
         var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;
         var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;
         bA.m_linearVelocity.x -= this.m_invMassA * PX;
         bA.m_linearVelocity.y -= this.m_invMassA * PY;
         bA.m_angularVelocity -= this.m_invIA * L1;
         bB.m_linearVelocity.x += this.m_invMassB * PX;
         bB.m_linearVelocity.y += this.m_invMassB * PY;
         bB.m_angularVelocity += this.m_invIB * L2;
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   };
   b2LineJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var PX = 0;
      var PY = 0;
      var L1 = 0;
      var L2 = 0;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorForce;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         PX = impulse * this.m_axis.x;
         PY = impulse * this.m_axis.y;
         L1 = impulse * this.m_a1;
         L2 = impulse * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var f1 = this.m_impulse.Copy();
         var df = this.m_K.Solve(new b2Vec2(), (-Cdot1), (-Cdot2));
         this.m_impulse.Add(df);
         if (this.m_limitState == b2Joint.e_atLowerLimit) {
            this.m_impulse.y = b2Math.Max(this.m_impulse.y, 0.0);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            this.m_impulse.y = b2Math.Min(this.m_impulse.y, 0.0);
         }
         var b = (-Cdot1) - (this.m_impulse.y - f1.y) * this.m_K.col2.x;
         var f2r = 0;
         if (this.m_K.col1.x != 0.0) {
            f2r = b / this.m_K.col1.x + f1.x;
         }
         else {
            f2r = f1.x;
         }
         this.m_impulse.x = f2r;
         df.x = this.m_impulse.x - f1.x;
         df.y = this.m_impulse.y - f1.y;
         PX = df.x * this.m_perp.x + df.y * this.m_axis.x;
         PY = df.x * this.m_perp.y + df.y * this.m_axis.y;
         L1 = df.x * this.m_s1 + df.y * this.m_a1;
         L2 = df.x * this.m_s2 + df.y * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      else {
         var df2 = 0;
         if (this.m_K.col1.x != 0.0) {
            df2 = ((-Cdot1)) / this.m_K.col1.x;
         }
         else {
            df2 = 0.0;
         }
         this.m_impulse.x += df2;
         PX = df2 * this.m_perp.x;
         PY = df2 * this.m_perp.y;
         L1 = df2 * this.m_s1;
         L2 = df2 * this.m_s2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   };
   b2LineJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var limitC = 0;
      var oldLimitImpulse = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var c1 = bA.m_sweep.c;
      var a1 = bA.m_sweep.a;
      var c2 = bB.m_sweep.c;
      var a2 = bB.m_sweep.a;
      var tMat;
      var tX = 0;
      var m1 = 0;
      var m2 = 0;
      var i1 = 0;
      var i2 = 0;
      var linearError = 0.0;
      var angularError = 0.0;
      var active = false;
      var C2 = 0.0;
      var R1 = b2Mat22.FromAngle(a1);
      var R2 = b2Mat22.FromAngle(a2);
      tMat = R1;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = R2;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = c2.x + r2X - c1.x - r1X;
      var dY = c2.y + r2Y - c1.y - r1Y;
      if (this.m_enableLimit) {
         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         var translation = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            linearError = b2Math.Abs(translation);
            active = true;
         }
         else if (translation <= this.m_lowerTranslation) {
            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
            linearError = this.m_lowerTranslation - translation;
            active = true;
         }
         else if (translation >= this.m_upperTranslation) {
            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);
            linearError = translation - this.m_upperTranslation;
            active = true;
         }
      }
      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);
      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
      var impulse = new b2Vec2();
      var C1 = this.m_perp.x * dX + this.m_perp.y * dY;
      linearError = b2Math.Max(linearError, b2Math.Abs(C1));
      angularError = 0.0;
      if (active) {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
         this.m_K.Solve(impulse, (-C1), (-C2));
      }
      else {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         var impulse1 = 0;
         if (k11 != 0.0) {
            impulse1 = ((-C1)) / k11;
         }
         else {
            impulse1 = 0.0;
         }
         impulse.x = impulse1;
         impulse.y = 0.0;
      }
      var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;
      var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;
      var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;
      var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;
      c1.x -= this.m_invMassA * PX;
      c1.y -= this.m_invMassA * PY;
      a1 -= this.m_invIA * L1;
      c2.x += this.m_invMassB * PX;
      c2.y += this.m_invMassB * PY;
      a2 += this.m_invIB * L2;
      bA.m_sweep.a = a1;
      bB.m_sweep.a = a2;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   };
   Box2D.inherit(b2LineJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2LineJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2LineJointDef.b2LineJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
      this.localAxisA = new b2Vec2();
   };
   b2LineJointDef.prototype.b2LineJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_lineJoint;
      this.localAxisA.Set(1.0, 0.0);
      this.enableLimit = false;
      this.lowerTranslation = 0.0;
      this.upperTranslation = 0.0;
      this.enableMotor = false;
      this.maxMotorForce = 0.0;
      this.motorSpeed = 0.0;
   };
   b2LineJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.localAxisA = this.bodyA.GetLocalVector(axis);
   };
   Box2D.inherit(b2MouseJoint, Box2D.Dynamics.Joints.b2Joint);
   b2MouseJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2MouseJoint.b2MouseJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new b2Mat22();
      this.K1 = new b2Mat22();
      this.K2 = new b2Mat22();
      this.m_localAnchor = new b2Vec2();
      this.m_target = new b2Vec2();
      this.m_impulse = new b2Vec2();
      this.m_mass = new b2Mat22();
      this.m_C = new b2Vec2();
   };
   b2MouseJoint.prototype.GetAnchorA = function () {
      return this.m_target;
   };
   b2MouseJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor);
   };
   b2MouseJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   };
   b2MouseJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   };
   b2MouseJoint.prototype.GetTarget = function () {
      return this.m_target;
   };
   b2MouseJoint.prototype.SetTarget = function (target) {
      if (this.m_bodyB.IsAwake() == false) {
         this.m_bodyB.SetAwake(true);
      }
      this.m_target = target;
   };
   b2MouseJoint.prototype.GetMaxForce = function () {
      return this.m_maxForce;
   };
   b2MouseJoint.prototype.SetMaxForce = function (maxForce) {
      if (maxForce === undefined) maxForce = 0;
      this.m_maxForce = maxForce;
   };
   b2MouseJoint.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
   };
   b2MouseJoint.prototype.SetFrequency = function (hz) {
      if (hz === undefined) hz = 0;
      this.m_frequencyHz = hz;
   };
   b2MouseJoint.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
   };
   b2MouseJoint.prototype.SetDampingRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_dampingRatio = ratio;
   };
   b2MouseJoint.prototype.b2MouseJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_target.SetV(def.target);
      var tX = this.m_target.x - this.m_bodyB.m_xf.position.x;
      var tY = this.m_target.y - this.m_bodyB.m_xf.position.y;
      var tMat = this.m_bodyB.m_xf.R;
      this.m_localAnchor.x = (tX * tMat.col1.x + tY * tMat.col1.y);
      this.m_localAnchor.y = (tX * tMat.col2.x + tY * tMat.col2.y);
      this.m_maxForce = def.maxForce;
      this.m_impulse.SetZero();
      this.m_frequencyHz = def.frequencyHz;
      this.m_dampingRatio = def.dampingRatio;
      this.m_beta = 0.0;
      this.m_gamma = 0.0;
   };
   b2MouseJoint.prototype.InitVelocityConstraints = function (step) {
      var b = this.m_bodyB;
      var mass = b.GetMass();
      var omega = 2.0 * Math.PI * this.m_frequencyHz;
      var d = 2.0 * mass * this.m_dampingRatio * omega;
      var k = mass * omega * omega;
      this.m_gamma = step.dt * (d + step.dt * k);
      this.m_gamma = this.m_gamma != 0 ? 1 / this.m_gamma : 0.0;
      this.m_beta = step.dt * k * this.m_gamma;
      var tMat;tMat = b.m_xf.R;
      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * rX + tMat.col2.x * rY);rY = (tMat.col1.y * rX + tMat.col2.y * rY);
      rX = tX;
      var invMass = b.m_invMass;
      var invI = b.m_invI;this.K1.col1.x = invMass;
      this.K1.col2.x = 0.0;
      this.K1.col1.y = 0.0;
      this.K1.col2.y = invMass;
      this.K2.col1.x = invI * rY * rY;
      this.K2.col2.x = (-invI * rX * rY);
      this.K2.col1.y = (-invI * rX * rY);
      this.K2.col2.y = invI * rX * rX;
      this.K.SetM(this.K1);
      this.K.AddM(this.K2);
      this.K.col1.x += this.m_gamma;
      this.K.col2.y += this.m_gamma;
      this.K.GetInverse(this.m_mass);
      this.m_C.x = b.m_sweep.c.x + rX - this.m_target.x;
      this.m_C.y = b.m_sweep.c.y + rY - this.m_target.y;
      b.m_angularVelocity *= 0.98;
      this.m_impulse.x *= step.dtRatio;
      this.m_impulse.y *= step.dtRatio;
      b.m_linearVelocity.x += invMass * this.m_impulse.x;
      b.m_linearVelocity.y += invMass * this.m_impulse.y;
      b.m_angularVelocity += invI * (rX * this.m_impulse.y - rY * this.m_impulse.x);
   };
   b2MouseJoint.prototype.SolveVelocityConstraints = function (step) {
      var b = this.m_bodyB;
      var tMat;
      var tX = 0;
      var tY = 0;
      tMat = b.m_xf.R;
      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rX + tMat.col2.x * rY);
      rY = (tMat.col1.y * rX + tMat.col2.y * rY);
      rX = tX;
      var CdotX = b.m_linearVelocity.x + ((-b.m_angularVelocity * rY));
      var CdotY = b.m_linearVelocity.y + (b.m_angularVelocity * rX);
      tMat = this.m_mass;
      tX = CdotX + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;
      tY = CdotY + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
      var impulseX = (-(tMat.col1.x * tX + tMat.col2.x * tY));
      var impulseY = (-(tMat.col1.y * tX + tMat.col2.y * tY));
      var oldImpulseX = this.m_impulse.x;
      var oldImpulseY = this.m_impulse.y;
      this.m_impulse.x += impulseX;
      this.m_impulse.y += impulseY;
      var maxImpulse = step.dt * this.m_maxForce;
      if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {
         this.m_impulse.Multiply(maxImpulse / this.m_impulse.Length());
      }
      impulseX = this.m_impulse.x - oldImpulseX;
      impulseY = this.m_impulse.y - oldImpulseY;
      b.m_linearVelocity.x += b.m_invMass * impulseX;
      b.m_linearVelocity.y += b.m_invMass * impulseY;
      b.m_angularVelocity += b.m_invI * (rX * impulseY - rY * impulseX);
   };
   b2MouseJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return true;
   };
   Box2D.inherit(b2MouseJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2MouseJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2MouseJointDef.b2MouseJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.target = new b2Vec2();
   };
   b2MouseJointDef.prototype.b2MouseJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_mouseJoint;
      this.maxForce = 0.0;
      this.frequencyHz = 5.0;
      this.dampingRatio = 0.7;
   };
   Box2D.inherit(b2PrismaticJoint, Box2D.Dynamics.Joints.b2Joint);
   b2PrismaticJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2PrismaticJoint.b2PrismaticJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_localXAxis1 = new b2Vec2();
      this.m_localYAxis1 = new b2Vec2();
      this.m_axis = new b2Vec2();
      this.m_perp = new b2Vec2();
      this.m_K = new b2Mat33();
      this.m_impulse = new b2Vec3();
   };
   b2PrismaticJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   };
   b2PrismaticJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   };
   b2PrismaticJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
   };
   b2PrismaticJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.y;
   };
   b2PrismaticJoint.prototype.GetJointTranslation = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var p1 = bA.GetWorldPoint(this.m_localAnchor1);
      var p2 = bB.GetWorldPoint(this.m_localAnchor2);
      var dX = p2.x - p1.x;
      var dY = p2.y - p1.y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var translation = axis.x * dX + axis.y * dY;
      return translation;
   };
   b2PrismaticJoint.prototype.GetJointSpeed = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var v1 = bA.m_linearVelocity;
      var v2 = bB.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var w2 = bB.m_angularVelocity;
      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
      return speed;
   };
   b2PrismaticJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   };
   b2PrismaticJoint.prototype.EnableLimit = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableLimit = flag;
   };
   b2PrismaticJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
   };
   b2PrismaticJoint.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
   };
   b2PrismaticJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_lowerTranslation = lower;
      this.m_upperTranslation = upper;
   };
   b2PrismaticJoint.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
   };
   b2PrismaticJoint.prototype.EnableMotor = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableMotor = flag;
   };
   b2PrismaticJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   };
   b2PrismaticJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   };
   b2PrismaticJoint.prototype.SetMaxMotorForce = function (force) {
      if (force === undefined) force = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_maxMotorForce = force;
   };
   b2PrismaticJoint.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
   };
   b2PrismaticJoint.prototype.b2PrismaticJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_localXAxis1.SetV(def.localAxisA);
      this.m_localYAxis1.x = (-this.m_localXAxis1.y);
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_refAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorMass = 0.0;
      this.m_motorImpulse = 0.0;
      this.m_lowerTranslation = def.lowerTranslation;
      this.m_upperTranslation = def.upperTranslation;
      this.m_maxMotorForce = def.maxMotorForce;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
   };
   b2PrismaticJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      this.m_localCenterA.SetV(bA.GetLocalCenter());
      this.m_localCenterB.SetV(bB.GetLocalCenter());
      var xf1 = bA.GetTransform();
      var xf2 = bB.GetTransform();
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      this.m_invMassA = bA.m_invMass;
      this.m_invMassB = bB.m_invMass;
      this.m_invIA = bA.m_invI;
      this.m_invIB = bB.m_invI; {
         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
         if (this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass;
      } {
         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));
         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
         var m1 = this.m_invMassA;
         var m2 = this.m_invMassB;
         var i1 = this.m_invIA;
         var i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = i1 + i2;
         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
         this.m_K.col3.x = this.m_K.col1.z;
         this.m_K.col3.y = this.m_K.col2.z;
         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
      }
      if (this.m_enableLimit) {
         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointTransition <= this.m_lowerTranslation) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_limitState = b2Joint.e_atLowerLimit;
               this.m_impulse.z = 0.0;
            }
         }
         else if (jointTransition >= this.m_upperTranslation) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_limitState = b2Joint.e_atUpperLimit;
               this.m_impulse.z = 0.0;
            }
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.z = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;
         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;
         var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
         var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
         bA.m_linearVelocity.x -= this.m_invMassA * PX;
         bA.m_linearVelocity.y -= this.m_invMassA * PY;
         bA.m_angularVelocity -= this.m_invIA * L1;
         bB.m_linearVelocity.x += this.m_invMassB * PX;
         bB.m_linearVelocity.y += this.m_invMassB * PY;
         bB.m_angularVelocity += this.m_invIB * L2;
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   };
   b2PrismaticJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var PX = 0;
      var PY = 0;
      var L1 = 0;
      var L2 = 0;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorForce;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         PX = impulse * this.m_axis.x;
         PY = impulse * this.m_axis.y;
         L1 = impulse * this.m_a1;
         L2 = impulse * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
      var Cdot1Y = w2 - w1;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var f1 = this.m_impulse.Copy();
         var df = this.m_K.Solve33(new b2Vec3(), (-Cdot1X), (-Cdot1Y), (-Cdot2));
         this.m_impulse.Add(df);
         if (this.m_limitState == b2Joint.e_atLowerLimit) {
            this.m_impulse.z = b2Math.Max(this.m_impulse.z, 0.0);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            this.m_impulse.z = b2Math.Min(this.m_impulse.z, 0.0);
         }
         var bX = (-Cdot1X) - (this.m_impulse.z - f1.z) * this.m_K.col3.x;
         var bY = (-Cdot1Y) - (this.m_impulse.z - f1.z) * this.m_K.col3.y;
         var f2r = this.m_K.Solve22(new b2Vec2(), bX, bY);
         f2r.x += f1.x;
         f2r.y += f1.y;
         this.m_impulse.x = f2r.x;
         this.m_impulse.y = f2r.y;
         df.x = this.m_impulse.x - f1.x;
         df.y = this.m_impulse.y - f1.y;
         df.z = this.m_impulse.z - f1.z;
         PX = df.x * this.m_perp.x + df.z * this.m_axis.x;
         PY = df.x * this.m_perp.y + df.z * this.m_axis.y;
         L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;
         L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      else {
         var df2 = this.m_K.Solve22(new b2Vec2(), (-Cdot1X), (-Cdot1Y));
         this.m_impulse.x += df2.x;
         this.m_impulse.y += df2.y;
         PX = df2.x * this.m_perp.x;
         PY = df2.x * this.m_perp.y;
         L1 = df2.x * this.m_s1 + df2.y;
         L2 = df2.x * this.m_s2 + df2.y;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   };
   b2PrismaticJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var limitC = 0;
      var oldLimitImpulse = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var c1 = bA.m_sweep.c;
      var a1 = bA.m_sweep.a;
      var c2 = bB.m_sweep.c;
      var a2 = bB.m_sweep.a;
      var tMat;
      var tX = 0;
      var m1 = 0;
      var m2 = 0;
      var i1 = 0;
      var i2 = 0;
      var linearError = 0.0;
      var angularError = 0.0;
      var active = false;
      var C2 = 0.0;
      var R1 = b2Mat22.FromAngle(a1);
      var R2 = b2Mat22.FromAngle(a2);
      tMat = R1;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = R2;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = c2.x + r2X - c1.x - r1X;
      var dY = c2.y + r2Y - c1.y - r1Y;
      if (this.m_enableLimit) {
         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         var translation = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            linearError = b2Math.Abs(translation);
            active = true;
         }
         else if (translation <= this.m_lowerTranslation) {
            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
            linearError = this.m_lowerTranslation - translation;
            active = true;
         }
         else if (translation >= this.m_upperTranslation) {
            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);
            linearError = translation - this.m_upperTranslation;
            active = true;
         }
      }
      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);
      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
      var impulse = new b2Vec3();
      var C1X = this.m_perp.x * dX + this.m_perp.y * dY;
      var C1Y = a2 - a1 - this.m_refAngle;
      linearError = b2Math.Max(linearError, b2Math.Abs(C1X));
      angularError = b2Math.Abs(C1Y);
      if (active) {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = i1 + i2;
         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
         this.m_K.col3.x = this.m_K.col1.z;
         this.m_K.col3.y = this.m_K.col2.z;
         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
         this.m_K.Solve33(impulse, (-C1X), (-C1Y), (-C2));
      }
      else {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         var k12 = i1 * this.m_s1 + i2 * this.m_s2;
         var k22 = i1 + i2;
         this.m_K.col1.Set(k11, k12, 0.0);
         this.m_K.col2.Set(k12, k22, 0.0);
         var impulse1 = this.m_K.Solve22(new b2Vec2(), (-C1X), (-C1Y));
         impulse.x = impulse1.x;
         impulse.y = impulse1.y;
         impulse.z = 0.0;
      }
      var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;
      var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;
      var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;
      var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;
      c1.x -= this.m_invMassA * PX;
      c1.y -= this.m_invMassA * PY;
      a1 -= this.m_invIA * L1;
      c2.x += this.m_invMassB * PX;
      c2.y += this.m_invMassB * PY;
      a2 += this.m_invIB * L2;
      bA.m_sweep.a = a1;
      bB.m_sweep.a = a2;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   };
   Box2D.inherit(b2PrismaticJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2PrismaticJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2PrismaticJointDef.b2PrismaticJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
      this.localAxisA = new b2Vec2();
   };
   b2PrismaticJointDef.prototype.b2PrismaticJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_prismaticJoint;
      this.localAxisA.Set(1.0, 0.0);
      this.referenceAngle = 0.0;
      this.enableLimit = false;
      this.lowerTranslation = 0.0;
      this.upperTranslation = 0.0;
      this.enableMotor = false;
      this.maxMotorForce = 0.0;
      this.motorSpeed = 0.0;
   };
   b2PrismaticJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.localAxisA = this.bodyA.GetLocalVector(axis);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   };
   Box2D.inherit(b2PulleyJoint, Box2D.Dynamics.Joints.b2Joint);
   b2PulleyJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2PulleyJoint.b2PulleyJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new b2Vec2();
      this.m_groundAnchor2 = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_u1 = new b2Vec2();
      this.m_u2 = new b2Vec2();
   };
   b2PulleyJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   };
   b2PulleyJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   };
   b2PulleyJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_u2.x, inv_dt * this.m_impulse * this.m_u2.y);
   };
   b2PulleyJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   };
   b2PulleyJoint.prototype.GetGroundAnchorA = function () {
      var a = this.m_ground.m_xf.position.Copy();
      a.Add(this.m_groundAnchor1);
      return a;
   };
   b2PulleyJoint.prototype.GetGroundAnchorB = function () {
      var a = this.m_ground.m_xf.position.Copy();
      a.Add(this.m_groundAnchor2);
      return a;
   };
   b2PulleyJoint.prototype.GetLength1 = function () {
      var p = this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var dX = p.x - sX;
      var dY = p.y - sY;
      return Math.sqrt(dX * dX + dY * dY);
   };
   b2PulleyJoint.prototype.GetLength2 = function () {
      var p = this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      var dX = p.x - sX;
      var dY = p.y - sY;
      return Math.sqrt(dX * dX + dY * dY);
   };
   b2PulleyJoint.prototype.GetRatio = function () {
      return this.m_ratio;
   };
   b2PulleyJoint.prototype.b2PulleyJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_ground = this.m_bodyA.m_world.m_groundBody;
      this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;
      this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_ratio = def.ratio;
      this.m_constant = def.lengthA + this.m_ratio * def.lengthB;
      this.m_maxLength1 = b2Math.Min(def.maxLengthA, this.m_constant - this.m_ratio * b2PulleyJoint.b2_minPulleyLength);
      this.m_maxLength2 = b2Math.Min(def.maxLengthB, (this.m_constant - b2PulleyJoint.b2_minPulleyLength) / this.m_ratio);
      this.m_impulse = 0.0;
      this.m_limitImpulse1 = 0.0;
      this.m_limitImpulse2 = 0.0;
   };
   b2PulleyJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      this.m_u1.Set(p1X - s1X, p1Y - s1Y);
      this.m_u2.Set(p2X - s2X, p2Y - s2Y);
      var length1 = this.m_u1.Length();
      var length2 = this.m_u2.Length();
      if (length1 > b2Settings.b2_linearSlop) {
         this.m_u1.Multiply(1.0 / length1);
      }
      else {
         this.m_u1.SetZero();
      }
      if (length2 > b2Settings.b2_linearSlop) {
         this.m_u2.Multiply(1.0 / length2);
      }
      else {
         this.m_u2.SetZero();
      }
      var C = this.m_constant - length1 - this.m_ratio * length2;
      if (C > 0.0) {
         this.m_state = b2Joint.e_inactiveLimit;
         this.m_impulse = 0.0;
      }
      else {
         this.m_state = b2Joint.e_atUpperLimit;
      }
      if (length1 < this.m_maxLength1) {
         this.m_limitState1 = b2Joint.e_inactiveLimit;
         this.m_limitImpulse1 = 0.0;
      }
      else {
         this.m_limitState1 = b2Joint.e_atUpperLimit;
      }
      if (length2 < this.m_maxLength2) {
         this.m_limitState2 = b2Joint.e_inactiveLimit;
         this.m_limitImpulse2 = 0.0;
      }
      else {
         this.m_limitState2 = b2Joint.e_atUpperLimit;
      }
      var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;
      var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;
      this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;
      this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;
      this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
      this.m_limitMass1 = 1.0 / this.m_limitMass1;
      this.m_limitMass2 = 1.0 / this.m_limitMass2;
      this.m_pulleyMass = 1.0 / this.m_pulleyMass;
      if (step.warmStarting) {
         this.m_impulse *= step.dtRatio;
         this.m_limitImpulse1 *= step.dtRatio;
         this.m_limitImpulse2 *= step.dtRatio;
         var P1X = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.x;
         var P1Y = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.y;
         var P2X = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.x;
         var P2Y = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.y;
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
      else {
         this.m_impulse = 0.0;
         this.m_limitImpulse1 = 0.0;
         this.m_limitImpulse2 = 0.0;
      }
   };
   b2PulleyJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var v1X = 0;
      var v1Y = 0;
      var v2X = 0;
      var v2Y = 0;
      var P1X = 0;
      var P1Y = 0;
      var P2X = 0;
      var P2Y = 0;
      var Cdot = 0;
      var impulse = 0;
      var oldImpulse = 0;
      if (this.m_state == b2Joint.e_atUpperLimit) {
         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y)) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);
         impulse = this.m_pulleyMass * ((-Cdot));
         oldImpulse = this.m_impulse;
         this.m_impulse = b2Math.Max(0.0, this.m_impulse + impulse);
         impulse = this.m_impulse - oldImpulse;
         P1X = (-impulse * this.m_u1.x);
         P1Y = (-impulse * this.m_u1.y);
         P2X = (-this.m_ratio * impulse * this.m_u2.x);
         P2Y = (-this.m_ratio * impulse * this.m_u2.y);
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {
         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y));
         impulse = (-this.m_limitMass1 * Cdot);
         oldImpulse = this.m_limitImpulse1;
         this.m_limitImpulse1 = b2Math.Max(0.0, this.m_limitImpulse1 + impulse);
         impulse = this.m_limitImpulse1 - oldImpulse;
         P1X = (-impulse * this.m_u1.x);
         P1Y = (-impulse * this.m_u1.y);
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
      }
      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {
         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
         Cdot = (-(this.m_u2.x * v2X + this.m_u2.y * v2Y));
         impulse = (-this.m_limitMass2 * Cdot);
         oldImpulse = this.m_limitImpulse2;
         this.m_limitImpulse2 = b2Math.Max(0.0, this.m_limitImpulse2 + impulse);
         impulse = this.m_limitImpulse2 - oldImpulse;
         P2X = (-impulse * this.m_u2.x);
         P2Y = (-impulse * this.m_u2.y);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
   };
   b2PulleyJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      var r1X = 0;
      var r1Y = 0;
      var r2X = 0;
      var r2Y = 0;
      var p1X = 0;
      var p1Y = 0;
      var p2X = 0;
      var p2Y = 0;
      var length1 = 0;
      var length2 = 0;
      var C = 0;
      var impulse = 0;
      var oldImpulse = 0;
      var oldLimitPositionImpulse = 0;
      var tX = 0;
      var linearError = 0.0;
      if (this.m_state == b2Joint.e_atUpperLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         p1X = bA.m_sweep.c.x + r1X;
         p1Y = bA.m_sweep.c.y + r1Y;
         p2X = bB.m_sweep.c.x + r2X;
         p2Y = bB.m_sweep.c.y + r2Y;
         this.m_u1.Set(p1X - s1X, p1Y - s1Y);
         this.m_u2.Set(p2X - s2X, p2Y - s2Y);
         length1 = this.m_u1.Length();
         length2 = this.m_u2.Length();
         if (length1 > b2Settings.b2_linearSlop) {
            this.m_u1.Multiply(1.0 / length1);
         }
         else {
            this.m_u1.SetZero();
         }
         if (length2 > b2Settings.b2_linearSlop) {
            this.m_u2.Multiply(1.0 / length2);
         }
         else {
            this.m_u2.SetZero();
         }
         C = this.m_constant - length1 - this.m_ratio * length2;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_pulleyMass * C);
         p1X = (-impulse * this.m_u1.x);
         p1Y = (-impulse * this.m_u1.y);
         p2X = (-this.m_ratio * impulse * this.m_u2.x);
         p2Y = (-this.m_ratio * impulse * this.m_u2.y);
         bA.m_sweep.c.x += bA.m_invMass * p1X;
         bA.m_sweep.c.y += bA.m_invMass * p1Y;
         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
         bB.m_sweep.c.x += bB.m_invMass * p2X;
         bB.m_sweep.c.y += bB.m_invMass * p2Y;
         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      }
      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         p1X = bA.m_sweep.c.x + r1X;
         p1Y = bA.m_sweep.c.y + r1Y;
         this.m_u1.Set(p1X - s1X, p1Y - s1Y);
         length1 = this.m_u1.Length();
         if (length1 > b2Settings.b2_linearSlop) {
            this.m_u1.x *= 1.0 / length1;
            this.m_u1.y *= 1.0 / length1;
         }
         else {
            this.m_u1.SetZero();
         }
         C = this.m_maxLength1 - length1;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_limitMass1 * C);
         p1X = (-impulse * this.m_u1.x);
         p1Y = (-impulse * this.m_u1.y);
         bA.m_sweep.c.x += bA.m_invMass * p1X;
         bA.m_sweep.c.y += bA.m_invMass * p1Y;
         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
         bA.SynchronizeTransform();
      }
      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         p2X = bB.m_sweep.c.x + r2X;
         p2Y = bB.m_sweep.c.y + r2Y;
         this.m_u2.Set(p2X - s2X, p2Y - s2Y);
         length2 = this.m_u2.Length();
         if (length2 > b2Settings.b2_linearSlop) {
            this.m_u2.x *= 1.0 / length2;
            this.m_u2.y *= 1.0 / length2;
         }
         else {
            this.m_u2.SetZero();
         }
         C = this.m_maxLength2 - length2;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_limitMass2 * C);
         p2X = (-impulse * this.m_u2.x);
         p2Y = (-impulse * this.m_u2.y);
         bB.m_sweep.c.x += bB.m_invMass * p2X;
         bB.m_sweep.c.y += bB.m_invMass * p2Y;
         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
         bB.SynchronizeTransform();
      }
      return linearError < b2Settings.b2_linearSlop;
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength = 2.0;
   });
   Box2D.inherit(b2PulleyJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2PulleyJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2PulleyJointDef.b2PulleyJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.groundAnchorA = new b2Vec2();
      this.groundAnchorB = new b2Vec2();
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2PulleyJointDef.prototype.b2PulleyJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_pulleyJoint;
      this.groundAnchorA.Set((-1.0), 1.0);
      this.groundAnchorB.Set(1.0, 1.0);
      this.localAnchorA.Set((-1.0), 0.0);
      this.localAnchorB.Set(1.0, 0.0);
      this.lengthA = 0.0;
      this.maxLengthA = 0.0;
      this.lengthB = 0.0;
      this.maxLengthB = 0.0;
      this.ratio = 1.0;
      this.collideConnected = true;
   };
   b2PulleyJointDef.prototype.Initialize = function (bA, bB, gaA, gaB, anchorA, anchorB, r) {
      if (r === undefined) r = 0;
      this.bodyA = bA;
      this.bodyB = bB;
      this.groundAnchorA.SetV(gaA);
      this.groundAnchorB.SetV(gaB);
      this.localAnchorA = this.bodyA.GetLocalPoint(anchorA);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchorB);
      var d1X = anchorA.x - gaA.x;
      var d1Y = anchorA.y - gaA.y;
      this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);
      var d2X = anchorB.x - gaB.x;
      var d2Y = anchorB.y - gaB.y;
      this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);
      this.ratio = r;
      var C = this.lengthA + this.ratio * this.lengthB;
      this.maxLengthA = C - this.ratio * b2PulleyJoint.b2_minPulleyLength;
      this.maxLengthB = (C - b2PulleyJoint.b2_minPulleyLength) / this.ratio;
   };
   Box2D.inherit(b2RevoluteJoint, Box2D.Dynamics.Joints.b2Joint);
   b2RevoluteJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2RevoluteJoint.b2RevoluteJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new b2Mat22();
      this.K1 = new b2Mat22();
      this.K2 = new b2Mat22();
      this.K3 = new b2Mat22();
      this.impulse3 = new b2Vec3();
      this.impulse2 = new b2Vec2();
      this.reduced = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_impulse = new b2Vec3();
      this.m_mass = new b2Mat33();
   };
   b2RevoluteJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   };
   b2RevoluteJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   };
   b2RevoluteJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   };
   b2RevoluteJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.z;
   };
   b2RevoluteJoint.prototype.GetJointAngle = function () {
      return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
   };
   b2RevoluteJoint.prototype.GetJointSpeed = function () {
      return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
   };
   b2RevoluteJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   };
   b2RevoluteJoint.prototype.EnableLimit = function (flag) {
      this.m_enableLimit = flag;
   };
   b2RevoluteJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerAngle;
   };
   b2RevoluteJoint.prototype.GetUpperLimit = function () {
      return this.m_upperAngle;
   };
   b2RevoluteJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_lowerAngle = lower;
      this.m_upperAngle = upper;
   };
   b2RevoluteJoint.prototype.IsMotorEnabled = function () {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      return this.m_enableMotor;
   };
   b2RevoluteJoint.prototype.EnableMotor = function (flag) {
      this.m_enableMotor = flag;
   };
   b2RevoluteJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   };
   b2RevoluteJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   };
   b2RevoluteJoint.prototype.SetMaxMotorTorque = function (torque) {
      if (torque === undefined) torque = 0;
      this.m_maxMotorTorque = torque;
   };
   b2RevoluteJoint.prototype.GetMotorTorque = function () {
      return this.m_maxMotorTorque;
   };
   b2RevoluteJoint.prototype.b2RevoluteJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_referenceAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorImpulse = 0.0;
      this.m_lowerAngle = def.lowerAngle;
      this.m_upperAngle = def.upperAngle;
      this.m_maxMotorTorque = def.maxMotorTorque;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
   };
   b2RevoluteJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      if (this.m_enableMotor || this.m_enableLimit) {}
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var m1 = bA.m_invMass;
      var m2 = bB.m_invMass;
      var i1 = bA.m_invI;
      var i2 = bB.m_invI;
      this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
      this.m_mass.col2.x = (-r1Y * r1X * i1) - r2Y * r2X * i2;
      this.m_mass.col3.x = (-r1Y * i1) - r2Y * i2;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
      this.m_mass.col3.y = r1X * i1 + r2X * i2;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = i1 + i2;
      this.m_motorMass = 1.0 / (i1 + i2);
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (this.m_enableLimit) {
         var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
         if (b2Math.Abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * b2Settings.b2_angularSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointAngle <= this.m_lowerAngle) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_impulse.z = 0.0;
            }
            this.m_limitState = b2Joint.e_atLowerLimit;
         }
         else if (jointAngle >= this.m_upperAngle) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_impulse.z = 0.0;
            }
            this.m_limitState = b2Joint.e_atUpperLimit;
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.z = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x;
         var PY = this.m_impulse.y;
         bA.m_linearVelocity.x -= m1 * PX;
         bA.m_linearVelocity.y -= m1 * PY;
         bA.m_angularVelocity -= i1 * ((r1X * PY - r1Y * PX) + this.m_motorImpulse + this.m_impulse.z);
         bB.m_linearVelocity.x += m2 * PX;
         bB.m_linearVelocity.y += m2 * PY;
         bB.m_angularVelocity += i2 * ((r2X * PY - r2Y * PX) + this.m_motorImpulse + this.m_impulse.z);
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   };
   b2RevoluteJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      var newImpulse = 0;
      var r1X = 0;
      var r1Y = 0;
      var r2X = 0;
      var r2Y = 0;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var m1 = bA.m_invMass;
      var m2 = bB.m_invMass;
      var i1 = bA.m_invI;
      var i2 = bB.m_invI;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = w2 - w1 - this.m_motorSpeed;
         var impulse = this.m_motorMass * ((-Cdot));
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorTorque;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         w1 -= i1 * impulse;
         w2 += i2 * impulse;
      }
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var Cdot1X = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
         var Cdot1Y = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
         var Cdot2 = w2 - w1;
         this.m_mass.Solve33(this.impulse3, (-Cdot1X), (-Cdot1Y), (-Cdot2));
         if (this.m_limitState == b2Joint.e_equalLimits) {
            this.m_impulse.Add(this.impulse3);
         }
         else if (this.m_limitState == b2Joint.e_atLowerLimit) {
            newImpulse = this.m_impulse.z + this.impulse3.z;
            if (newImpulse < 0.0) {
               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
               this.impulse3.x = this.reduced.x;
               this.impulse3.y = this.reduced.y;
               this.impulse3.z = (-this.m_impulse.z);
               this.m_impulse.x += this.reduced.x;
               this.m_impulse.y += this.reduced.y;
               this.m_impulse.z = 0.0;
            }
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            newImpulse = this.m_impulse.z + this.impulse3.z;
            if (newImpulse > 0.0) {
               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
               this.impulse3.x = this.reduced.x;
               this.impulse3.y = this.reduced.y;
               this.impulse3.z = (-this.m_impulse.z);
               this.m_impulse.x += this.reduced.x;
               this.m_impulse.y += this.reduced.y;
               this.m_impulse.z = 0.0;
            }
         }
         v1.x -= m1 * this.impulse3.x;
         v1.y -= m1 * this.impulse3.y;
         w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);
         v2.x += m2 * this.impulse3.x;
         v2.y += m2 * this.impulse3.y;
         w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);
      }
      else {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var CdotX = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
         var CdotY = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
         this.m_mass.Solve22(this.impulse2, (-CdotX), (-CdotY));
         this.m_impulse.x += this.impulse2.x;
         this.m_impulse.y += this.impulse2.y;
         v1.x -= m1 * this.impulse2.x;
         v1.y -= m1 * this.impulse2.y;
         w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);
         v2.x += m2 * this.impulse2.x;
         v2.y += m2 * this.impulse2.y;
         w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   };
   b2RevoluteJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var oldLimitImpulse = 0;
      var C = 0;
      var tMat;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var angularError = 0.0;
      var positionError = 0.0;
      var tX = 0;
      var impulseX = 0;
      var impulseY = 0;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
         var limitImpulse = 0.0;
         if (this.m_limitState == b2Joint.e_equalLimits) {
            C = b2Math.Clamp(angle - this.m_lowerAngle, (-b2Settings.b2_maxAngularCorrection), b2Settings.b2_maxAngularCorrection);
            limitImpulse = (-this.m_motorMass * C);
            angularError = b2Math.Abs(C);
         }
         else if (this.m_limitState == b2Joint.e_atLowerLimit) {
            C = angle - this.m_lowerAngle;
            angularError = (-C);
            C = b2Math.Clamp(C + b2Settings.b2_angularSlop, (-b2Settings.b2_maxAngularCorrection), 0.0);
            limitImpulse = (-this.m_motorMass * C);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            C = angle - this.m_upperAngle;
            angularError = C;
            C = b2Math.Clamp(C - b2Settings.b2_angularSlop, 0.0, b2Settings.b2_maxAngularCorrection);
            limitImpulse = (-this.m_motorMass * C);
         }
         bA.m_sweep.a -= bA.m_invI * limitImpulse;
         bB.m_sweep.a += bB.m_invI * limitImpulse;
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      } {
         tMat = bA.m_xf.R;
         var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
         var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
         var CLengthSquared = CX * CX + CY * CY;
         var CLength = Math.sqrt(CLengthSquared);
         positionError = CLength;
         var invMass1 = bA.m_invMass;
         var invMass2 = bB.m_invMass;
         var invI1 = bA.m_invI;
         var invI2 = bB.m_invI;
         var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;
         if (CLengthSquared > k_allowedStretch * k_allowedStretch) {
            var uX = CX / CLength;
            var uY = CY / CLength;
            var k = invMass1 + invMass2;
            var m = 1.0 / k;
            impulseX = m * ((-CX));
            impulseY = m * ((-CY));
            var k_beta = 0.5;
            bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
            bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
            bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
            bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
            CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
            CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
         }
         this.K1.col1.x = invMass1 + invMass2;
         this.K1.col2.x = 0.0;
         this.K1.col1.y = 0.0;
         this.K1.col2.y = invMass1 + invMass2;
         this.K2.col1.x = invI1 * r1Y * r1Y;
         this.K2.col2.x = (-invI1 * r1X * r1Y);
         this.K2.col1.y = (-invI1 * r1X * r1Y);
         this.K2.col2.y = invI1 * r1X * r1X;
         this.K3.col1.x = invI2 * r2Y * r2Y;
         this.K3.col2.x = (-invI2 * r2X * r2Y);
         this.K3.col1.y = (-invI2 * r2X * r2Y);
         this.K3.col2.y = invI2 * r2X * r2X;
         this.K.SetM(this.K1);
         this.K.AddM(this.K2);
         this.K.AddM(this.K3);
         this.K.Solve(b2RevoluteJoint.tImpulse, (-CX), (-CY));
         impulseX = b2RevoluteJoint.tImpulse.x;
         impulseY = b2RevoluteJoint.tImpulse.y;
         bA.m_sweep.c.x -= bA.m_invMass * impulseX;
         bA.m_sweep.c.y -= bA.m_invMass * impulseY;
         bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
         bB.m_sweep.c.x += bB.m_invMass * impulseX;
         bB.m_sweep.c.y += bB.m_invMass * impulseY;
         bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      }
      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   };
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = new b2Vec2();
   });
   Box2D.inherit(b2RevoluteJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2RevoluteJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2RevoluteJointDef.b2RevoluteJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2RevoluteJointDef.prototype.b2RevoluteJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_revoluteJoint;
      this.localAnchorA.Set(0.0, 0.0);
      this.localAnchorB.Set(0.0, 0.0);
      this.referenceAngle = 0.0;
      this.lowerAngle = 0.0;
      this.upperAngle = 0.0;
      this.maxMotorTorque = 0.0;
      this.motorSpeed = 0.0;
      this.enableLimit = false;
      this.enableMotor = false;
   };
   b2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   };
   Box2D.inherit(b2WeldJoint, Box2D.Dynamics.Joints.b2Joint);
   b2WeldJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2WeldJoint.b2WeldJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new b2Vec2();
      this.m_localAnchorB = new b2Vec2();
      this.m_impulse = new b2Vec3();
      this.m_mass = new b2Mat33();
   };
   b2WeldJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
   };
   b2WeldJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
   };
   b2WeldJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   };
   b2WeldJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.z;
   };
   b2WeldJoint.prototype.b2WeldJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchorA.SetV(def.localAnchorA);
      this.m_localAnchorB.SetV(def.localAnchorB);
      this.m_referenceAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_mass = new b2Mat33();
   };
   b2WeldJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
      this.m_mass.col3.y = rAX * iA + rBX * iB;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = iA + iB;
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_impulse.z *= step.dtRatio;
         bA.m_linearVelocity.x -= mA * this.m_impulse.x;
         bA.m_linearVelocity.y -= mA * this.m_impulse.y;
         bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);
         bB.m_linearVelocity.x += mB * this.m_impulse.x;
         bB.m_linearVelocity.y += mB * this.m_impulse.y;
         bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);
      }
      else {
         this.m_impulse.SetZero();
      }
   };
   b2WeldJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var vA = bA.m_linearVelocity;
      var wA = bA.m_angularVelocity;
      var vB = bB.m_linearVelocity;
      var wB = bB.m_angularVelocity;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;
      var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;
      var Cdot2 = wB - wA;
      var impulse = new b2Vec3();
      this.m_mass.Solve33(impulse, (-Cdot1X), (-Cdot1Y), (-Cdot2));
      this.m_impulse.Add(impulse);
      vA.x -= mA * impulse.x;
      vA.y -= mA * impulse.y;
      wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
      vB.x += mB * impulse.x;
      vB.y += mB * impulse.y;
      wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
      bA.m_angularVelocity = wA;
      bB.m_angularVelocity = wB;
   };
   b2WeldJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;
      var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;
      var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
      var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;
      var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);
      var angularError = b2Math.Abs(C2);
      if (positionError > k_allowedStretch) {
         iA *= 1.0;
         iB *= 1.0;
      }
      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
      this.m_mass.col3.y = rAX * iA + rBX * iB;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = iA + iB;
      var impulse = new b2Vec3();
      this.m_mass.Solve33(impulse, (-C1X), (-C1Y), (-C2));
      bA.m_sweep.c.x -= mA * impulse.x;
      bA.m_sweep.c.y -= mA * impulse.y;
      bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
      bB.m_sweep.c.x += mB * impulse.x;
      bB.m_sweep.c.y += mB * impulse.y;
      bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   };
   Box2D.inherit(b2WeldJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2WeldJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2WeldJointDef.b2WeldJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2WeldJointDef.prototype.b2WeldJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_weldJoint;
      this.referenceAngle = 0.0;
   };
   b2WeldJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   };
})();
(function () {
   var b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
   b2DebugDraw.b2DebugDraw = function () {
      this.m_drawScale = 1.0;
      this.m_lineThickness = 1.0;
      this.m_alpha = 1.0;
      this.m_fillAlpha = 1.0;
      this.m_xformScale = 1.0;
      var __this = this;
      //#WORKAROUND
      this.m_sprite = {
         graphics: {
            clear: function () {
               __this.m_ctx.clearRect(0, 0, __this.m_ctx.canvas.width, __this.m_ctx.canvas.height);
            }
         }
      };
   };
   b2DebugDraw.prototype._color = function (color, alpha) {
      return "rgba(" + ((color & 0xFF0000) >> 16) + "," + ((color & 0xFF00) >> 8) + "," + (color & 0xFF) + "," + alpha + ")";
   };
   b2DebugDraw.prototype.b2DebugDraw = function () {
      this.m_drawFlags = 0;
   };
   b2DebugDraw.prototype.SetFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags = flags;
   };
   b2DebugDraw.prototype.GetFlags = function () {
      return this.m_drawFlags;
   };
   b2DebugDraw.prototype.AppendFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags |= flags;
   };
   b2DebugDraw.prototype.ClearFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags &= ~flags;
   };
   b2DebugDraw.prototype.SetSprite = function (sprite) {
      this.m_ctx = sprite;
   };
   b2DebugDraw.prototype.GetSprite = function () {
      return this.m_ctx;
   };
   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {
      if (drawScale === undefined) drawScale = 0;
      this.m_drawScale = drawScale;
   };
   b2DebugDraw.prototype.GetDrawScale = function () {
      return this.m_drawScale;
   };
   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {
      if (lineThickness === undefined) lineThickness = 0;
      this.m_lineThickness = lineThickness;
      this.m_ctx.strokeWidth = lineThickness;
   };
   b2DebugDraw.prototype.GetLineThickness = function () {
      return this.m_lineThickness;
   };
   b2DebugDraw.prototype.SetAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
      this.m_alpha = alpha;
   };
   b2DebugDraw.prototype.GetAlpha = function () {
      return this.m_alpha;
   };
   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
      this.m_fillAlpha = alpha;
   };
   b2DebugDraw.prototype.GetFillAlpha = function () {
      return this.m_fillAlpha;
   };
   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {
      if (xformScale === undefined) xformScale = 0;
      this.m_xformScale = xformScale;
   };
   b2DebugDraw.prototype.GetXFormScale = function () {
      return this.m_xformScale;
   };
   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {
      if (!vertexCount) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      for (var i = 1; i < vertexCount; i++) {
         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);
      }
      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {
      if (!vertexCount) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.fillStyle = this._color(color.color, this.m_fillAlpha);
      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      for (var i = 1; i < vertexCount; i++) {
         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);
      }
      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      s.closePath();
      s.fill();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {
      if (!radius) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.arc(center.x * drawScale, center.y * drawScale, radius * drawScale, 0, Math.PI * 2, true);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {
      if (!radius) return;
      var s = this.m_ctx,
         drawScale = this.m_drawScale,
         cx = center.x * drawScale,
         cy = center.y * drawScale;
      s.moveTo(0, 0);
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.fillStyle = this._color(color.color, this.m_fillAlpha);
      s.arc(cx, cy, radius * drawScale, 0, Math.PI * 2, true);
      s.moveTo(cx, cy);
      s.lineTo((center.x + axis.x * radius) * drawScale, (center.y + axis.y * radius) * drawScale);
      s.closePath();
      s.fill();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {
      var s = this.m_ctx,
         drawScale = this.m_drawScale;
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.beginPath();
      s.moveTo(p1.x * drawScale, p1.y * drawScale);
      s.lineTo(p2.x * drawScale, p2.y * drawScale);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawTransform = function (xf) {
      var s = this.m_ctx,
         drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(0xff0000, this.m_alpha);
      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);
      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col1.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col1.y) * drawScale);

      s.strokeStyle = this._color(0xff00, this.m_alpha);
      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);
      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col2.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col2.y) * drawScale);
      s.closePath();
      s.stroke();
   };
})(); //post-definitions
var i;
for (i = 0; i < Box2D.postDefs.length; ++i) Box2D.postDefs[i]();
delete Box2D.postDefs;

// stats.js r8 - http://github.com/mrdoob/stats.js
var Stats=function(){var h,a,n=0,o=0,i=Date.now(),u=i,p=i,l=0,q=1E3,r=0,e,j,f,b=[[16,16,48],[0,255,255]],m=0,s=1E3,t=0,d,k,g,c=[[16,48,16],[0,255,0]];h=document.createElement("div");h.style.cursor="pointer";h.style.width="80px";h.style.opacity="0.9";h.style.zIndex="10001";h.addEventListener("mousedown",function(a){a.preventDefault();n=(n+1)%2;n==0?(e.style.display="block",d.style.display="none"):(e.style.display="none",d.style.display="block");},!1);e=document.createElement("div");e.style.textAlign=
"left";e.style.lineHeight="1.2em";e.style.backgroundColor="rgb("+Math.floor(b[0][0]/2)+","+Math.floor(b[0][1]/2)+","+Math.floor(b[0][2]/2)+")";e.style.padding="0 0 3px 3px";h.appendChild(e);j=document.createElement("div");j.style.fontFamily="Helvetica, Arial, sans-serif";j.style.fontSize="9px";j.style.color="rgb("+b[1][0]+","+b[1][1]+","+b[1][2]+")";j.style.fontWeight="bold";j.innerHTML="FPS";e.appendChild(j);f=document.createElement("div");f.style.position="relative";f.style.width="74px";f.style.height=
"30px";f.style.backgroundColor="rgb("+b[1][0]+","+b[1][1]+","+b[1][2]+")";for(e.appendChild(f);f.children.length<74;)a=document.createElement("span"),a.style.width="1px",a.style.height="30px",a.style.cssFloat="left",a.style.backgroundColor="rgb("+b[0][0]+","+b[0][1]+","+b[0][2]+")",f.appendChild(a);d=document.createElement("div");d.style.textAlign="left";d.style.lineHeight="1.2em";d.style.backgroundColor="rgb("+Math.floor(c[0][0]/2)+","+Math.floor(c[0][1]/2)+","+Math.floor(c[0][2]/2)+")";d.style.padding=
"0 0 3px 3px";d.style.display="none";h.appendChild(d);k=document.createElement("div");k.style.fontFamily="Helvetica, Arial, sans-serif";k.style.fontSize="9px";k.style.color="rgb("+c[1][0]+","+c[1][1]+","+c[1][2]+")";k.style.fontWeight="bold";k.innerHTML="MS";d.appendChild(k);g=document.createElement("div");g.style.position="relative";g.style.width="74px";g.style.height="30px";g.style.backgroundColor="rgb("+c[1][0]+","+c[1][1]+","+c[1][2]+")";for(d.appendChild(g);g.children.length<74;)a=document.createElement("span"),
a.style.width="1px",a.style.height=Math.random()*30+"px",a.style.cssFloat="left",a.style.backgroundColor="rgb("+c[0][0]+","+c[0][1]+","+c[0][2]+")",g.appendChild(a);return {domElement:h,update:function(){i=Date.now();m=i-u;s=Math.min(s,m);t=Math.max(t,m);k.textContent=m+" MS ("+s+"-"+t+")";var a=Math.min(30,30-m/200*30);g.appendChild(g.firstChild).style.height=a+"px";u=i;o++;if(i>p+1E3)l=Math.round(o*1E3/(i-p)),q=Math.min(q,l),r=Math.max(r,l),j.textContent=l+" FPS ("+q+"-"+r+")",a=Math.min(30,30-l/
100*30),f.appendChild(f.firstChild).style.height=a+"px",p=i,o=0;}}};


// Three.js - http://github.com/mrdoob/three.js
'use strict';
var THREE = THREE || {
    REVISION: "49"
};
self.Int32Array || (self.Int32Array = Array, self.Float32Array = Array);
(function() {
    for (var a = 0, b = ["ms", "moz", "webkit", "o"], c = 0; c < b.length && !window.requestAnimationFrame; ++c) {
        window.requestAnimationFrame = window[b[c] + "RequestAnimationFrame"];
        window.cancelAnimationFrame = window[b[c] + "CancelAnimationFrame"] || window[b[c] + "CancelRequestAnimationFrame"];
    }
    if (!window.requestAnimationFrame) window.requestAnimationFrame = function(b) {
        var c = Date.now(),
            f = Math.max(0, 16 - (c - a)),
            g = window.setTimeout(function() {
                b(c + f);
            }, f);
        a = c + f;
        return g
    };
    if (!window.cancelAnimationFrame) window.cancelAnimationFrame =
        function(a) {
            clearTimeout(a);
        };
})();
THREE.Clock = function(a) {
    this.autoStart = a !== void 0 ? a : true;
    this.elapsedTime = this.oldTime = this.startTime = 0;
    this.running = false;
};
THREE.Clock.prototype.start = function() {
    this.oldTime = this.startTime = Date.now();
    this.running = true;
};
THREE.Clock.prototype.stop = function() {
    this.getElapsedTime();
    this.running = false;
};
THREE.Clock.prototype.getElapsedTime = function() {
    return this.elapsedTime = this.elapsedTime + this.getDelta()
};
THREE.Clock.prototype.getDelta = function() {
    var a = 0;
    this.autoStart && !this.running && this.start();
    if (this.running) {
        var b = Date.now(),
            a = 0.001 * (b - this.oldTime);
        this.oldTime = b;
        this.elapsedTime = this.elapsedTime + a;
    }
    return a
};
THREE.Color = function(a) {
    a !== void 0 && this.setHex(a);
    return this
};
THREE.Color.prototype = {
    constructor: THREE.Color,
    r: 1,
    g: 1,
    b: 1,
    copy: function(a) {
        this.r = a.r;
        this.g = a.g;
        this.b = a.b;
        return this
    },
    copyGammaToLinear: function(a) {
        this.r = a.r * a.r;
        this.g = a.g * a.g;
        this.b = a.b * a.b;
        return this
    },
    copyLinearToGamma: function(a) {
        this.r = Math.sqrt(a.r);
        this.g = Math.sqrt(a.g);
        this.b = Math.sqrt(a.b);
        return this
    },
    convertGammaToLinear: function() {
        var a = this.r,
            b = this.g,
            c = this.b;
        this.r = a * a;
        this.g = b * b;
        this.b = c * c;
        return this
    },
    convertLinearToGamma: function() {
        this.r = Math.sqrt(this.r);
        this.g = Math.sqrt(this.g);
        this.b = Math.sqrt(this.b);
        return this
    },
    setRGB: function(a, b, c) {
        this.r = a;
        this.g = b;
        this.b = c;
        return this
    },
    setHSV: function(a, b, c) {
        var d, e, f;
        if (c === 0) this.r = this.g = this.b = 0;
        else {
            d = Math.floor(a * 6);
            e = a * 6 - d;
            a = c * (1 - b);
            f = c * (1 - b * e);
            b = c * (1 - b * (1 - e));
            switch (d) {
                case 1:
                    this.r = f;
                    this.g = c;
                    this.b = a;
                    break;
                case 2:
                    this.r = a;
                    this.g = c;
                    this.b = b;
                    break;
                case 3:
                    this.r = a;
                    this.g = f;
                    this.b = c;
                    break;
                case 4:
                    this.r = b;
                    this.g = a;
                    this.b = c;
                    break;
                case 5:
                    this.r = c;
                    this.g = a;
                    this.b = f;
                    break;
                case 6:
                case 0:
                    this.r = c;
                    this.g = b;
                    this.b = a;
            }
        }
        return this
    },
    setHex: function(a) {
        a =
            Math.floor(a);
        this.r = (a >> 16 & 255) / 255;
        this.g = (a >> 8 & 255) / 255;
        this.b = (a & 255) / 255;
        return this
    },
    lerpSelf: function(a, b) {
        this.r = this.r + (a.r - this.r) * b;
        this.g = this.g + (a.g - this.g) * b;
        this.b = this.b + (a.b - this.b) * b;
        return this
    },
    getHex: function() {
        return Math.floor(this.r * 255) << 16 ^ Math.floor(this.g * 255) << 8 ^ Math.floor(this.b * 255)
    },
    getContextStyle: function() {
        return "rgb(" + Math.floor(this.r * 255) + "," + Math.floor(this.g * 255) + "," + Math.floor(this.b * 255) + ")"
    },
    clone: function() {
        return (new THREE.Color).setRGB(this.r, this.g, this.b)
    }
};
THREE.Vector2 = function(a, b) {
    this.x = a || 0;
    this.y = b || 0;
};
THREE.Vector2.prototype = {
    constructor: THREE.Vector2,
    set: function(a, b) {
        this.x = a;
        this.y = b;
        return this
    },
    copy: function(a) {
        this.x = a.x;
        this.y = a.y;
        return this
    },
    add: function(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this
    },
    addSelf: function(a) {
        this.x = this.x + a.x;
        this.y = this.y + a.y;
        return this
    },
    sub: function(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this
    },
    subSelf: function(a) {
        this.x = this.x - a.x;
        this.y = this.y - a.y;
        return this
    },
    multiplyScalar: function(a) {
        this.x = this.x * a;
        this.y = this.y * a;
        return this
    },
    divideScalar: function(a) {
        if (a) {
            this.x =
                this.x / a;
            this.y = this.y / a;
        } else this.set(0, 0);
        return this
    },
    negate: function() {
        return this.multiplyScalar(-1)
    },
    dot: function(a) {
        return this.x * a.x + this.y * a.y
    },
    lengthSq: function() {
        return this.x * this.x + this.y * this.y
    },
    length: function() {
        return Math.sqrt(this.lengthSq())
    },
    normalize: function() {
        return this.divideScalar(this.length())
    },
    distanceTo: function(a) {
        return Math.sqrt(this.distanceToSquared(a))
    },
    distanceToSquared: function(a) {
        var b = this.x - a.x,
            a = this.y - a.y;
        return b * b + a * a
    },
    setLength: function(a) {
        return this.normalize().multiplyScalar(a)
    },
    lerpSelf: function(a, b) {
        this.x = this.x + (a.x - this.x) * b;
        this.y = this.y + (a.y - this.y) * b;
        return this
    },
    equals: function(a) {
        return a.x === this.x && a.y === this.y
    },
    isZero: function() {
        return this.lengthSq() < 1.0E-4
    },
    clone: function() {
        return new THREE.Vector2(this.x, this.y)
    }
};
THREE.Vector3 = function(a, b, c) {
    this.x = a || 0;
    this.y = b || 0;
    this.z = c || 0;
};
THREE.Vector3.prototype = {
    constructor: THREE.Vector3,
    set: function(a, b, c) {
        this.x = a;
        this.y = b;
        this.z = c;
        return this
    },
    setX: function(a) {
        this.x = a;
        return this
    },
    setY: function(a) {
        this.y = a;
        return this
    },
    setZ: function(a) {
        this.z = a;
        return this
    },
    copy: function(a) {
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        return this
    },
    add: function(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this
    },
    addSelf: function(a) {
        this.x = this.x + a.x;
        this.y = this.y + a.y;
        this.z = this.z + a.z;
        return this
    },
    addScalar: function(a) {
        this.x = this.x + a;
        this.y = this.y +
            a;
        this.z = this.z + a;
        return this
    },
    sub: function(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this
    },
    subSelf: function(a) {
        this.x = this.x - a.x;
        this.y = this.y - a.y;
        this.z = this.z - a.z;
        return this
    },
    multiply: function(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this
    },
    multiplySelf: function(a) {
        this.x = this.x * a.x;
        this.y = this.y * a.y;
        this.z = this.z * a.z;
        return this
    },
    multiplyScalar: function(a) {
        this.x = this.x * a;
        this.y = this.y * a;
        this.z = this.z * a;
        return this
    },
    divideSelf: function(a) {
        this.x = this.x / a.x;
        this.y =
            this.y / a.y;
        this.z = this.z / a.z;
        return this
    },
    divideScalar: function(a) {
        if (a) {
            this.x = this.x / a;
            this.y = this.y / a;
            this.z = this.z / a;
        } else this.z = this.y = this.x = 0;
        return this
    },
    negate: function() {
        return this.multiplyScalar(-1)
    },
    dot: function(a) {
        return this.x * a.x + this.y * a.y + this.z * a.z
    },
    lengthSq: function() {
        return this.x * this.x + this.y * this.y + this.z * this.z
    },
    length: function() {
        return Math.sqrt(this.lengthSq())
    },
    lengthManhattan: function() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
    },
    normalize: function() {
        return this.divideScalar(this.length())
    },
    setLength: function(a) {
        return this.normalize().multiplyScalar(a)
    },
    lerpSelf: function(a, b) {
        this.x = this.x + (a.x - this.x) * b;
        this.y = this.y + (a.y - this.y) * b;
        this.z = this.z + (a.z - this.z) * b;
        return this
    },
    cross: function(a, b) {
        this.x = a.y * b.z - a.z * b.y;
        this.y = a.z * b.x - a.x * b.z;
        this.z = a.x * b.y - a.y * b.x;
        return this
    },
    crossSelf: function(a) {
        var b = this.x,
            c = this.y,
            d = this.z;
        this.x = c * a.z - d * a.y;
        this.y = d * a.x - b * a.z;
        this.z = b * a.y - c * a.x;
        return this
    },
    distanceTo: function(a) {
        return Math.sqrt(this.distanceToSquared(a))
    },
    distanceToSquared: function(a) {
        return (new THREE.Vector3).sub(this,
            a).lengthSq()
    },
    getPositionFromMatrix: function(a) {
        this.x = a.elements[12];
        this.y = a.elements[13];
        this.z = a.elements[14];
        return this
    },
    getRotationFromMatrix: function(a, b) {
        var c = b ? b.x : 1,
            d = b ? b.y : 1,
            e = b ? b.z : 1,
            f = a.elements[0] / c,
            g = a.elements[4] / d,
            c = a.elements[1] / c,
            d = a.elements[5] / d,
            h = a.elements[9] / e,
            j = a.elements[10] / e;
        this.y = Math.asin(a.elements[8] / e);
        e = Math.cos(this.y);
        if (Math.abs(e) > 1.0E-5) {
            this.x = Math.atan2(-h / e, j / e);
            this.z = Math.atan2(-g / e, f / e);
        } else {
            this.x = 0;
            this.z = Math.atan2(c, d);
        }
        return this
    },
    getScaleFromMatrix: function(a) {
        var b =
            this.set(a.elements[0], a.elements[1], a.elements[2]).length(),
            c = this.set(a.elements[4], a.elements[5], a.elements[6]).length(),
            a = this.set(a.elements[8], a.elements[9], a.elements[10]).length();
        this.x = b;
        this.y = c;
        this.z = a;
    },
    equals: function(a) {
        return a.x === this.x && a.y === this.y && a.z === this.z
    },
    isZero: function() {
        return this.lengthSq() < 1.0E-4
    },
    clone: function() {
        return new THREE.Vector3(this.x, this.y, this.z)
    }
};
THREE.Vector4 = function(a, b, c, d) {
    this.x = a || 0;
    this.y = b || 0;
    this.z = c || 0;
    this.w = d !== void 0 ? d : 1;
};
THREE.Vector4.prototype = {
    constructor: THREE.Vector4,
    set: function(a, b, c, d) {
        this.x = a;
        this.y = b;
        this.z = c;
        this.w = d;
        return this
    },
    copy: function(a) {
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        this.w = a.w !== void 0 ? a.w : 1;
        return this
    },
    add: function(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        this.w = a.w + b.w;
        return this
    },
    addSelf: function(a) {
        this.x = this.x + a.x;
        this.y = this.y + a.y;
        this.z = this.z + a.z;
        this.w = this.w + a.w;
        return this
    },
    sub: function(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        this.w = a.w - b.w;
        return this
    },
    subSelf: function(a) {
        this.x =
            this.x - a.x;
        this.y = this.y - a.y;
        this.z = this.z - a.z;
        this.w = this.w - a.w;
        return this
    },
    multiplyScalar: function(a) {
        this.x = this.x * a;
        this.y = this.y * a;
        this.z = this.z * a;
        this.w = this.w * a;
        return this
    },
    divideScalar: function(a) {
        if (a) {
            this.x = this.x / a;
            this.y = this.y / a;
            this.z = this.z / a;
            this.w = this.w / a;
        } else {
            this.z = this.y = this.x = 0;
            this.w = 1;
        }
        return this
    },
    negate: function() {
        return this.multiplyScalar(-1)
    },
    dot: function(a) {
        return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w
    },
    lengthSq: function() {
        return this.dot(this)
    },
    length: function() {
        return Math.sqrt(this.lengthSq())
    },
    normalize: function() {
        return this.divideScalar(this.length())
    },
    setLength: function(a) {
        return this.normalize().multiplyScalar(a)
    },
    lerpSelf: function(a, b) {
        this.x = this.x + (a.x - this.x) * b;
        this.y = this.y + (a.y - this.y) * b;
        this.z = this.z + (a.z - this.z) * b;
        this.w = this.w + (a.w - this.w) * b;
        return this
    },
    clone: function() {
        return new THREE.Vector4(this.x, this.y, this.z, this.w)
    }
};
THREE.Frustum = function() {
    this.planes = [new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4];
};
THREE.Frustum.prototype.setFromMatrix = function(a) {
    var b, c = this.planes,
        d = a.elements,
        a = d[0];
    b = d[1];
    var e = d[2],
        f = d[3],
        g = d[4],
        h = d[5],
        j = d[6],
        l = d[7],
        k = d[8],
        p = d[9],
        m = d[10],
        o = d[11],
        q = d[12],
        n = d[13],
        r = d[14],
        d = d[15];
    c[0].set(f - a, l - g, o - k, d - q);
    c[1].set(f + a, l + g, o + k, d + q);
    c[2].set(f + b, l + h, o + p, d + n);
    c[3].set(f - b, l - h, o - p, d - n);
    c[4].set(f - e, l - j, o - m, d - r);
    c[5].set(f + e, l + j, o + m, d + r);
    for (a = 0; a < 6; a++) {
        b = c[a];
        b.divideScalar(Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z));
    }
};
THREE.Frustum.prototype.contains = function(a) {
    for (var b = this.planes, c = a.matrixWorld, d = c.elements, c = -a.geometry.boundingSphere.radius * c.getMaxScaleOnAxis(), e = 0; e < 6; e++) {
        a = b[e].x * d[12] + b[e].y * d[13] + b[e].z * d[14] + b[e].w;
        if (a <= c) return false
    }
    return true
};
THREE.Frustum.__v1 = new THREE.Vector3;
THREE.Ray = function(a, b) {
    function c(a, b, c) {
        q.sub(c, a);
        u = q.dot(b);
        t = n.add(a, r.copy(b).multiplyScalar(u));
        return y = c.distanceTo(t)
    }

    function d(a, b, c, d) {
        q.sub(d, b);
        n.sub(c, b);
        r.sub(a, b);
        s = q.dot(q);
        w = q.dot(n);
        H = q.dot(r);
        E = n.dot(n);
        z = n.dot(r);
        v = 1 / (s * E - w * w);
        A = (E * H - w * z) * v;
        J = (s * z - w * H) * v;
        return A >= 0 && J >= 0 && A + J < 1
    }
    this.origin = a || new THREE.Vector3;
    this.direction = b || new THREE.Vector3;
    var e = 1.0E-4;
    this.setPrecision = function(a) {
        e = a;
    };
    var f = new THREE.Vector3,
        g = new THREE.Vector3,
        h = new THREE.Vector3,
        j = new THREE.Vector3,
        l = new THREE.Vector3,
        k = new THREE.Vector3,
        p = new THREE.Vector3,
        m = new THREE.Vector3,
        o = new THREE.Vector3;
    this.intersectObject = function(a) {
        var b, n = [];
        if (a instanceof THREE.Particle) {
            var q = c(this.origin, this.direction, a.matrixWorld.getPosition());
            if (q > a.scale.x) return [];
            b = {
                distance: q,
                point: a.position,
                face: null,
                object: a
            };
            n.push(b);
        } else if (a instanceof THREE.Mesh) {
            var q = c(this.origin, this.direction, a.matrixWorld.getPosition()),
                r = THREE.Frustum.__v1.set(a.matrixWorld.getColumnX().length(), a.matrixWorld.getColumnY().length(),
                    a.matrixWorld.getColumnZ().length());
            if (q > a.geometry.boundingSphere.radius * Math.max(r.x, Math.max(r.y, r.z))) return n;
            var s, i, t = a.geometry,
                u = t.vertices,
                C;
            a.matrixRotationWorld.extractRotation(a.matrixWorld);
            q = 0;
            for (r = t.faces.length; q < r; q++) {
                b = t.faces[q];
                l.copy(this.origin);
                k.copy(this.direction);
                C = a.matrixWorld;
                p = C.multiplyVector3(p.copy(b.centroid)).subSelf(l);
                m = a.matrixRotationWorld.multiplyVector3(m.copy(b.normal));
                s = k.dot(m);
                if (!(Math.abs(s) < e)) {
                    i = m.dot(p) / s;
                    if (!(i < 0) && (a.doubleSided || (a.flipSided ?
                            s > 0 : s < 0))) {
                        o.add(l, k.multiplyScalar(i));
                        if (b instanceof THREE.Face3) {
                            f = C.multiplyVector3(f.copy(u[b.a]));
                            g = C.multiplyVector3(g.copy(u[b.b]));
                            h = C.multiplyVector3(h.copy(u[b.c]));
                            if (d(o, f, g, h)) {
                                b = {
                                    distance: l.distanceTo(o),
                                    point: o.clone(),
                                    face: b,
                                    object: a
                                };
                                n.push(b);
                            }
                        } else if (b instanceof THREE.Face4) {
                            f = C.multiplyVector3(f.copy(u[b.a]));
                            g = C.multiplyVector3(g.copy(u[b.b]));
                            h = C.multiplyVector3(h.copy(u[b.c]));
                            j = C.multiplyVector3(j.copy(u[b.d]));
                            if (d(o, f, g, j) || d(o, g, h, j)) {
                                b = {
                                    distance: l.distanceTo(o),
                                    point: o.clone(),
                                    face: b,
                                    object: a
                                };
                                n.push(b);
                            }
                        }
                    }
                }
            }
        }
        return n
    };
    this.intersectObjects = function(a) {
        for (var b = [], c = 0, d = a.length; c < d; c++) Array.prototype.push.apply(b, this.intersectObject(a[c]));
        b.sort(function(a, b) {
            return a.distance - b.distance
        });
        return b
    };
    var q = new THREE.Vector3,
        n = new THREE.Vector3,
        r = new THREE.Vector3,
        u, t, y, s, w, H, E, z, v, A, J;
};
THREE.Rectangle = function() {
    function a() {
        f = d - b;
        g = e - c;
    }
    var b, c, d, e, f, g, h = true;
    this.getX = function() {
        return b
    };
    this.getY = function() {
        return c
    };
    this.getWidth = function() {
        return f
    };
    this.getHeight = function() {
        return g
    };
    this.getLeft = function() {
        return b
    };
    this.getTop = function() {
        return c
    };
    this.getRight = function() {
        return d
    };
    this.getBottom = function() {
        return e
    };
    this.set = function(f, g, k, p) {
        h = false;
        b = f;
        c = g;
        d = k;
        e = p;
        a();
    };
    this.addPoint = function(f, g) {
        if (h) {
            h = false;
            b = f;
            c = g;
            d = f;
            e = g;
        } else {
            b = b < f ? b : f;
            c = c < g ? c : g;
            d = d > f ? d : f;
            e = e > g ?
                e : g;
        }
        a();
    };
    this.add3Points = function(f, g, k, p, m, o) {
        if (h) {
            h = false;
            b = f < k ? f < m ? f : m : k < m ? k : m;
            c = g < p ? g < o ? g : o : p < o ? p : o;
            d = f > k ? f > m ? f : m : k > m ? k : m;
            e = g > p ? g > o ? g : o : p > o ? p : o;
        } else {
            b = f < k ? f < m ? f < b ? f : b : m < b ? m : b : k < m ? k < b ? k : b : m < b ? m : b;
            c = g < p ? g < o ? g < c ? g : c : o < c ? o : c : p < o ? p < c ? p : c : o < c ? o : c;
            d = f > k ? f > m ? f > d ? f : d : m > d ? m : d : k > m ? k > d ? k : d : m > d ? m : d;
            e = g > p ? g > o ? g > e ? g : e : o > e ? o : e : p > o ? p > e ? p : e : o > e ? o : e;
        }
        a();
    };
    this.addRectangle = function(f) {
        if (h) {
            h = false;
            b = f.getLeft();
            c = f.getTop();
            d = f.getRight();
            e = f.getBottom();
        } else {
            b = b < f.getLeft() ? b : f.getLeft();
            c = c < f.getTop() ? c : f.getTop();
            d = d > f.getRight() ? d : f.getRight();
            e = e > f.getBottom() ? e : f.getBottom();
        }
        a();
    };
    this.inflate = function(f) {
        b = b - f;
        c = c - f;
        d = d + f;
        e = e + f;
        a();
    };
    this.minSelf = function(f) {
        b = b > f.getLeft() ? b : f.getLeft();
        c = c > f.getTop() ? c : f.getTop();
        d = d < f.getRight() ? d : f.getRight();
        e = e < f.getBottom() ? e : f.getBottom();
        a();
    };
    this.intersects = function(a) {
        return d < a.getLeft() || b > a.getRight() || e < a.getTop() || c > a.getBottom() ? false : true
    };
    this.empty = function() {
        h = true;
        e = d = c = b = 0;
        a();
    };
    this.isEmpty = function() {
        return h
    };
};
THREE.Math = {
    clamp: function(a, b, c) {
        return a < b ? b : a > c ? c : a
    },
    clampBottom: function(a, b) {
        return a < b ? b : a
    },
    mapLinear: function(a, b, c, d, e) {
        return d + (a - b) * (e - d) / (c - b)
    },
    random16: function() {
        return (65280 * Math.random() + 255 * Math.random()) / 65535
    },
    randInt: function(a, b) {
        return a + Math.floor(Math.random() * (b - a + 1))
    },
    randFloat: function(a, b) {
        return a + Math.random() * (b - a)
    },
    randFloatSpread: function(a) {
        return a * (0.5 - Math.random())
    },
    sign: function(a) {
        return a < 0 ? -1 : a > 0 ? 1 : 0
    }
};
THREE.Matrix3 = function() {
    this.elements = new Float32Array(9);
};
THREE.Matrix3.prototype = {
    constructor: THREE.Matrix3,
    getInverse: function(a) {
        var b = a.elements,
            a = b[10] * b[5] - b[6] * b[9],
            c = -b[10] * b[1] + b[2] * b[9],
            d = b[6] * b[1] - b[2] * b[5],
            e = -b[10] * b[4] + b[6] * b[8],
            f = b[10] * b[0] - b[2] * b[8],
            g = -b[6] * b[0] + b[2] * b[4],
            h = b[9] * b[4] - b[5] * b[8],
            j = -b[9] * b[0] + b[1] * b[8],
            l = b[5] * b[0] - b[1] * b[4],
            b = b[0] * a + b[1] * e + b[2] * h;
        b === 0 && console.warn("Matrix3.getInverse(): determinant == 0");
        var b = 1 / b,
            k = this.elements;
        k[0] = b * a;
        k[1] = b * c;
        k[2] = b * d;
        k[3] = b * e;
        k[4] = b * f;
        k[5] = b * g;
        k[6] = b * h;
        k[7] = b * j;
        k[8] = b * l;
        return this
    },
    transpose: function() {
        var a, b = this.elements;
        a = b[1];
        b[1] = b[3];
        b[3] = a;
        a = b[2];
        b[2] = b[6];
        b[6] = a;
        a = b[5];
        b[5] = b[7];
        b[7] = a;
        return this
    },
    transposeIntoArray: function(a) {
        var b = this.m;
        a[0] = b[0];
        a[1] = b[3];
        a[2] = b[6];
        a[3] = b[1];
        a[4] = b[4];
        a[5] = b[7];
        a[6] = b[2];
        a[7] = b[5];
        a[8] = b[8];
        return this
    }
};
THREE.Matrix4 = function(a, b, c, d, e, f, g, h, j, l, k, p, m, o, q, n) {
    this.elements = new Float32Array(16);
    this.set(a !== void 0 ? a : 1, b || 0, c || 0, d || 0, e || 0, f !== void 0 ? f : 1, g || 0, h || 0, j || 0, l || 0, k !== void 0 ? k : 1, p || 0, m || 0, o || 0, q || 0, n !== void 0 ? n : 1);
};
THREE.Matrix4.prototype = {
    constructor: THREE.Matrix4,
    set: function(a, b, c, d, e, f, g, h, j, l, k, p, m, o, q, n) {
        var r = this.elements;
        r[0] = a;
        r[4] = b;
        r[8] = c;
        r[12] = d;
        r[1] = e;
        r[5] = f;
        r[9] = g;
        r[13] = h;
        r[2] = j;
        r[6] = l;
        r[10] = k;
        r[14] = p;
        r[3] = m;
        r[7] = o;
        r[11] = q;
        r[15] = n;
        return this
    },
    identity: function() {
        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this
    },
    copy: function(a) {
        a = a.elements;
        this.set(a[0], a[4], a[8], a[12], a[1], a[5], a[9], a[13], a[2], a[6], a[10], a[14], a[3], a[7], a[11], a[15]);
        return this
    },
    lookAt: function(a, b, c) {
        var d = this.elements,
            e = THREE.Matrix4.__v1,
            f = THREE.Matrix4.__v2,
            g = THREE.Matrix4.__v3;
        g.sub(a, b).normalize();
        if (g.length() === 0) g.z = 1;
        e.cross(c, g).normalize();
        if (e.length() === 0) {
            g.x = g.x + 1.0E-4;
            e.cross(c, g).normalize();
        }
        f.cross(g, e);
        d[0] = e.x;
        d[4] = f.x;
        d[8] = g.x;
        d[1] = e.y;
        d[5] = f.y;
        d[9] = g.y;
        d[2] = e.z;
        d[6] = f.z;
        d[10] = g.z;
        return this
    },
    multiply: function(a, b) {
        var c = a.elements,
            d = b.elements,
            e = this.elements,
            f = c[0],
            g = c[4],
            h = c[8],
            j = c[12],
            l = c[1],
            k = c[5],
            p = c[9],
            m = c[13],
            o = c[2],
            q = c[6],
            n = c[10],
            r = c[14],
            u = c[3],
            t = c[7],
            y = c[11],
            c = c[15],
            s = d[0],
            w = d[4],
            H = d[8],
            E = d[12],
            z = d[1],
            v = d[5],
            A = d[9],
            J = d[13],
            K = d[2],
            R = d[6],
            P = d[10],
            D = d[14],
            M = d[3],
            G = d[7],
            i = d[11],
            d = d[15];
        e[0] = f * s + g * z + h * K + j * M;
        e[4] = f * w + g * v + h * R + j * G;
        e[8] = f * H + g * A + h * P + j * i;
        e[12] = f * E + g * J + h * D + j * d;
        e[1] = l * s + k * z + p * K + m * M;
        e[5] = l * w + k * v + p * R + m * G;
        e[9] = l * H + k * A + p * P + m * i;
        e[13] = l * E + k * J + p * D + m * d;
        e[2] = o * s + q * z + n * K + r * M;
        e[6] = o * w + q * v + n * R + r * G;
        e[10] = o * H + q * A + n * P + r * i;
        e[14] = o * E + q * J + n * D + r * d;
        e[3] = u * s + t * z + y * K + c * M;
        e[7] = u * w + t * v + y * R + c * G;
        e[11] = u * H + t * A + y * P + c * i;
        e[15] = u * E + t * J + y * D + c * d;
        return this
    },
    multiplySelf: function(a) {
        return this.multiply(this,
            a)
    },
    multiplyToArray: function(a, b, c) {
        var d = this.elements;
        this.multiply(a, b);
        c[0] = d[0];
        c[1] = d[1];
        c[2] = d[2];
        c[3] = d[3];
        c[4] = d[4];
        c[5] = d[5];
        c[6] = d[6];
        c[7] = d[7];
        c[8] = d[8];
        c[9] = d[9];
        c[10] = d[10];
        c[11] = d[11];
        c[12] = d[12];
        c[13] = d[13];
        c[14] = d[14];
        c[15] = d[15];
        return this
    },
    multiplyScalar: function(a) {
        var b = this.elements;
        b[0] = b[0] * a;
        b[4] = b[4] * a;
        b[8] = b[8] * a;
        b[12] = b[12] * a;
        b[1] = b[1] * a;
        b[5] = b[5] * a;
        b[9] = b[9] * a;
        b[13] = b[13] * a;
        b[2] = b[2] * a;
        b[6] = b[6] * a;
        b[10] = b[10] * a;
        b[14] = b[14] * a;
        b[3] = b[3] * a;
        b[7] = b[7] * a;
        b[11] = b[11] * a;
        b[15] =
            b[15] * a;
        return this
    },
    multiplyVector3: function(a) {
        var b = this.elements,
            c = a.x,
            d = a.y,
            e = a.z,
            f = 1 / (b[3] * c + b[7] * d + b[11] * e + b[15]);
        a.x = (b[0] * c + b[4] * d + b[8] * e + b[12]) * f;
        a.y = (b[1] * c + b[5] * d + b[9] * e + b[13]) * f;
        a.z = (b[2] * c + b[6] * d + b[10] * e + b[14]) * f;
        return a
    },
    multiplyVector4: function(a) {
        var b = this.elements,
            c = a.x,
            d = a.y,
            e = a.z,
            f = a.w;
        a.x = b[0] * c + b[4] * d + b[8] * e + b[12] * f;
        a.y = b[1] * c + b[5] * d + b[9] * e + b[13] * f;
        a.z = b[2] * c + b[6] * d + b[10] * e + b[14] * f;
        a.w = b[3] * c + b[7] * d + b[11] * e + b[15] * f;
        return a
    },
    rotateAxis: function(a) {
        var b = this.elements,
            c = a.x,
            d = a.y,
            e = a.z;
        a.x = c * b[0] + d * b[4] + e * b[8];
        a.y = c * b[1] + d * b[5] + e * b[9];
        a.z = c * b[2] + d * b[6] + e * b[10];
        a.normalize();
        return a
    },
    crossVector: function(a) {
        var b = this.elements,
            c = new THREE.Vector4;
        c.x = b[0] * a.x + b[4] * a.y + b[8] * a.z + b[12] * a.w;
        c.y = b[1] * a.x + b[5] * a.y + b[9] * a.z + b[13] * a.w;
        c.z = b[2] * a.x + b[6] * a.y + b[10] * a.z + b[14] * a.w;
        c.w = a.w ? b[3] * a.x + b[7] * a.y + b[11] * a.z + b[15] * a.w : 1;
        return c
    },
    determinant: function() {
        var a = this.elements,
            b = a[0],
            c = a[4],
            d = a[8],
            e = a[12],
            f = a[1],
            g = a[5],
            h = a[9],
            j = a[13],
            l = a[2],
            k = a[6],
            p = a[10],
            m = a[14],
            o = a[3],
            q = a[7],
            n = a[11],
            a = a[15];
        return e * h * k * o - d * j * k * o - e * g * p * o + c * j * p * o + d * g * m * o - c * h * m * o - e * h * l * q + d * j * l * q + e * f * p * q - b * j * p * q - d * f * m * q + b * h * m * q + e * g * l * n - c * j * l * n - e * f * k * n + b * j * k * n + c * f * m * n - b * g * m * n - d * g * l * a + c * h * l * a + d * f * k * a - b * h * k * a - c * f * p * a + b * g * p * a
    },
    transpose: function() {
        var a = this.elements,
            b;
        b = a[1];
        a[1] = a[4];
        a[4] = b;
        b = a[2];
        a[2] = a[8];
        a[8] = b;
        b = a[6];
        a[6] = a[9];
        a[9] = b;
        b = a[3];
        a[3] = a[12];
        a[12] = b;
        b = a[7];
        a[7] = a[13];
        a[13] = b;
        b = a[11];
        a[11] = a[14];
        a[14] = b;
        return this
    },
    flattenToArray: function(a) {
        var b = this.elements;
        a[0] = b[0];
        a[1] = b[1];
        a[2] = b[2];
        a[3] = b[3];
        a[4] = b[4];
        a[5] = b[5];
        a[6] = b[6];
        a[7] = b[7];
        a[8] = b[8];
        a[9] = b[9];
        a[10] = b[10];
        a[11] = b[11];
        a[12] = b[12];
        a[13] = b[13];
        a[14] = b[14];
        a[15] = b[15];
        return a
    },
    flattenToArrayOffset: function(a, b) {
        var c = this.elements;
        a[b] = c[0];
        a[b + 1] = c[1];
        a[b + 2] = c[2];
        a[b + 3] = c[3];
        a[b + 4] = c[4];
        a[b + 5] = c[5];
        a[b + 6] = c[6];
        a[b + 7] = c[7];
        a[b + 8] = c[8];
        a[b + 9] = c[9];
        a[b + 10] = c[10];
        a[b + 11] = c[11];
        a[b + 12] = c[12];
        a[b + 13] = c[13];
        a[b + 14] = c[14];
        a[b + 15] = c[15];
        return a
    },
    getPosition: function() {
        var a = this.elements;
        return THREE.Matrix4.__v1.set(a[12], a[13],
            a[14])
    },
    setPosition: function(a) {
        var b = this.elements;
        b[12] = a.x;
        b[13] = a.y;
        b[14] = a.z;
        return this
    },
    getColumnX: function() {
        var a = this.elements;
        return THREE.Matrix4.__v1.set(a[0], a[1], a[2])
    },
    getColumnY: function() {
        var a = this.elements;
        return THREE.Matrix4.__v1.set(a[4], a[5], a[6])
    },
    getColumnZ: function() {
        var a = this.elements;
        return THREE.Matrix4.__v1.set(a[8], a[9], a[10])
    },
    getInverse: function(a) {
        var b = this.elements,
            c = a.elements,
            d = c[0],
            e = c[4],
            f = c[8],
            g = c[12],
            h = c[1],
            j = c[5],
            l = c[9],
            k = c[13],
            p = c[2],
            m = c[6],
            o = c[10],
            q =
            c[14],
            n = c[3],
            r = c[7],
            u = c[11],
            c = c[15];
        b[0] = l * q * r - k * o * r + k * m * u - j * q * u - l * m * c + j * o * c;
        b[4] = g * o * r - f * q * r - g * m * u + e * q * u + f * m * c - e * o * c;
        b[8] = f * k * r - g * l * r + g * j * u - e * k * u - f * j * c + e * l * c;
        b[12] = g * l * m - f * k * m - g * j * o + e * k * o + f * j * q - e * l * q;
        b[1] = k * o * n - l * q * n - k * p * u + h * q * u + l * p * c - h * o * c;
        b[5] = f * q * n - g * o * n + g * p * u - d * q * u - f * p * c + d * o * c;
        b[9] = g * l * n - f * k * n - g * h * u + d * k * u + f * h * c - d * l * c;
        b[13] = f * k * p - g * l * p + g * h * o - d * k * o - f * h * q + d * l * q;
        b[2] = j * q * n - k * m * n + k * p * r - h * q * r - j * p * c + h * m * c;
        b[6] = g * m * n - e * q * n - g * p * r + d * q * r + e * p * c - d * m * c;
        b[10] = e * k * n - g * j * n + g * h * r - d * k * r - e * h * c + d * j * c;
        b[14] = g * j * p -
            e * k * p - g * h * m + d * k * m + e * h * q - d * j * q;
        b[3] = l * m * n - j * o * n - l * p * r + h * o * r + j * p * u - h * m * u;
        b[7] = e * o * n - f * m * n + f * p * r - d * o * r - e * p * u + d * m * u;
        b[11] = f * j * n - e * l * n - f * h * r + d * l * r + e * h * u - d * j * u;
        b[15] = e * l * p - f * j * p + f * h * m - d * l * m - e * h * o + d * j * o;
        this.multiplyScalar(1 / a.determinant());
        return this
    },
    setRotationFromEuler: function(a, b) {
        var c = this.elements,
            d = a.x,
            e = a.y,
            f = a.z,
            g = Math.cos(d),
            d = Math.sin(d),
            h = Math.cos(e),
            e = Math.sin(e),
            j = Math.cos(f),
            f = Math.sin(f);
        switch (b) {
            case "YXZ":
                var l = h * j,
                    k = h * f,
                    p = e * j,
                    m = e * f;
                c[0] = l + m * d;
                c[4] = p * d - k;
                c[8] = g * e;
                c[1] = g * f;
                c[5] = g *
                    j;
                c[9] = -d;
                c[2] = k * d - p;
                c[6] = m + l * d;
                c[10] = g * h;
                break;
            case "ZXY":
                l = h * j;
                k = h * f;
                p = e * j;
                m = e * f;
                c[0] = l - m * d;
                c[4] = -g * f;
                c[8] = p + k * d;
                c[1] = k + p * d;
                c[5] = g * j;
                c[9] = m - l * d;
                c[2] = -g * e;
                c[6] = d;
                c[10] = g * h;
                break;
            case "ZYX":
                l = g * j;
                k = g * f;
                p = d * j;
                m = d * f;
                c[0] = h * j;
                c[4] = p * e - k;
                c[8] = l * e + m;
                c[1] = h * f;
                c[5] = m * e + l;
                c[9] = k * e - p;
                c[2] = -e;
                c[6] = d * h;
                c[10] = g * h;
                break;
            case "YZX":
                l = g * h;
                k = g * e;
                p = d * h;
                m = d * e;
                c[0] = h * j;
                c[4] = m - l * f;
                c[8] = p * f + k;
                c[1] = f;
                c[5] = g * j;
                c[9] = -d * j;
                c[2] = -e * j;
                c[6] = k * f + p;
                c[10] = l - m * f;
                break;
            case "XZY":
                l = g * h;
                k = g * e;
                p = d * h;
                m = d * e;
                c[0] = h * j;
                c[4] = -f;
                c[8] = e * j;
                c[1] = l * f + m;
                c[5] = g * j;
                c[9] = k * f - p;
                c[2] = p * f - k;
                c[6] = d * j;
                c[10] = m * f + l;
                break;
            default:
                l = g * j;
                k = g * f;
                p = d * j;
                m = d * f;
                c[0] = h * j;
                c[4] = -h * f;
                c[8] = e;
                c[1] = k + p * e;
                c[5] = l - m * e;
                c[9] = -d * h;
                c[2] = m - l * e;
                c[6] = p + k * e;
                c[10] = g * h;
        }
        return this
    },
    setRotationFromQuaternion: function(a) {
        var b = this.elements,
            c = a.x,
            d = a.y,
            e = a.z,
            f = a.w,
            g = c + c,
            h = d + d,
            j = e + e,
            a = c * g,
            l = c * h,
            c = c * j,
            k = d * h,
            d = d * j,
            e = e * j,
            g = f * g,
            h = f * h,
            f = f * j;
        b[0] = 1 - (k + e);
        b[4] = l - f;
        b[8] = c + h;
        b[1] = l + f;
        b[5] = 1 - (a + e);
        b[9] = d - g;
        b[2] = c - h;
        b[6] = d + g;
        b[10] = 1 - (a + k);
        return this
    },
    compose: function(a, b, c) {
        var d = this.elements,
            e = THREE.Matrix4.__m1,
            f = THREE.Matrix4.__m2;
        e.identity();
        e.setRotationFromQuaternion(b);
        f.makeScale(c.x, c.y, c.z);
        this.multiply(e, f);
        d[12] = a.x;
        d[13] = a.y;
        d[14] = a.z;
        return this
    },
    decompose: function(a, b, c) {
        var d = this.elements,
            e = THREE.Matrix4.__v1,
            f = THREE.Matrix4.__v2,
            g = THREE.Matrix4.__v3;
        e.set(d[0], d[1], d[2]);
        f.set(d[4], d[5], d[6]);
        g.set(d[8], d[9], d[10]);
        a = a instanceof THREE.Vector3 ? a : new THREE.Vector3;
        b = b instanceof THREE.Quaternion ? b : new THREE.Quaternion;
        c = c instanceof THREE.Vector3 ? c : new THREE.Vector3;
        c.x = e.length();
        c.y = f.length();
        c.z = g.length();
        a.x = d[12];
        a.y = d[13];
        a.z = d[14];
        d = THREE.Matrix4.__m1;
        d.copy(this);
        d.elements[0] = d.elements[0] / c.x;
        d.elements[1] = d.elements[1] / c.x;
        d.elements[2] = d.elements[2] / c.x;
        d.elements[4] = d.elements[4] / c.y;
        d.elements[5] = d.elements[5] / c.y;
        d.elements[6] = d.elements[6] / c.y;
        d.elements[8] = d.elements[8] / c.z;
        d.elements[9] = d.elements[9] / c.z;
        d.elements[10] = d.elements[10] / c.z;
        b.setFromRotationMatrix(d);
        return [a, b, c]
    },
    extractPosition: function(a) {
        var b = this.elements,
            a = a.elements;
        b[12] = a[12];
        b[13] = a[13];
        b[14] = a[14];
        return this
    },
    extractRotation: function(a) {
        var b = this.elements,
            a = a.elements,
            c = THREE.Matrix4.__v1,
            d = 1 / c.set(a[0], a[1], a[2]).length(),
            e = 1 / c.set(a[4], a[5], a[6]).length(),
            c = 1 / c.set(a[8], a[9], a[10]).length();
        b[0] = a[0] * d;
        b[1] = a[1] * d;
        b[2] = a[2] * d;
        b[4] = a[4] * e;
        b[5] = a[5] * e;
        b[6] = a[6] * e;
        b[8] = a[8] * c;
        b[9] = a[9] * c;
        b[10] = a[10] * c;
        return this
    },
    translate: function(a) {
        var b = this.elements,
            c = a.x,
            d = a.y,
            a = a.z;
        b[12] = b[0] * c + b[4] * d + b[8] * a + b[12];
        b[13] = b[1] * c + b[5] * d + b[9] * a + b[13];
        b[14] = b[2] * c + b[6] *
            d + b[10] * a + b[14];
        b[15] = b[3] * c + b[7] * d + b[11] * a + b[15];
        return this
    },
    rotateX: function(a) {
        var b = this.elements,
            c = b[4],
            d = b[5],
            e = b[6],
            f = b[7],
            g = b[8],
            h = b[9],
            j = b[10],
            l = b[11],
            k = Math.cos(a),
            a = Math.sin(a);
        b[4] = k * c + a * g;
        b[5] = k * d + a * h;
        b[6] = k * e + a * j;
        b[7] = k * f + a * l;
        b[8] = k * g - a * c;
        b[9] = k * h - a * d;
        b[10] = k * j - a * e;
        b[11] = k * l - a * f;
        return this
    },
    rotateY: function(a) {
        var b = this.elements,
            c = b[0],
            d = b[1],
            e = b[2],
            f = b[3],
            g = b[8],
            h = b[9],
            j = b[10],
            l = b[11],
            k = Math.cos(a),
            a = Math.sin(a);
        b[0] = k * c - a * g;
        b[1] = k * d - a * h;
        b[2] = k * e - a * j;
        b[3] = k * f - a * l;
        b[8] = k * g + a * c;
        b[9] =
            k * h + a * d;
        b[10] = k * j + a * e;
        b[11] = k * l + a * f;
        return this
    },
    rotateZ: function(a) {
        var b = this.elements,
            c = b[0],
            d = b[1],
            e = b[2],
            f = b[3],
            g = b[4],
            h = b[5],
            j = b[6],
            l = b[7],
            k = Math.cos(a),
            a = Math.sin(a);
        b[0] = k * c + a * g;
        b[1] = k * d + a * h;
        b[2] = k * e + a * j;
        b[3] = k * f + a * l;
        b[4] = k * g - a * c;
        b[5] = k * h - a * d;
        b[6] = k * j - a * e;
        b[7] = k * l - a * f;
        return this
    },
    rotateByAxis: function(a, b) {
        var c = this.elements;
        if (a.x === 1 && a.y === 0 && a.z === 0) return this.rotateX(b);
        if (a.x === 0 && a.y === 1 && a.z === 0) return this.rotateY(b);
        if (a.x === 0 && a.y === 0 && a.z === 1) return this.rotateZ(b);
        var d = a.x,
            e = a.y,
            f = a.z,
            g = Math.sqrt(d * d + e * e + f * f),
            d = d / g,
            e = e / g,
            f = f / g,
            g = d * d,
            h = e * e,
            j = f * f,
            l = Math.cos(b),
            k = Math.sin(b),
            p = 1 - l,
            m = d * e * p,
            o = d * f * p,
            p = e * f * p,
            d = d * k,
            q = e * k,
            k = f * k,
            f = g + (1 - g) * l,
            g = m + k,
            e = o - q,
            m = m - k,
            h = h + (1 - h) * l,
            k = p + d,
            o = o + q,
            p = p - d,
            j = j + (1 - j) * l,
            l = c[0],
            d = c[1],
            q = c[2],
            n = c[3],
            r = c[4],
            u = c[5],
            t = c[6],
            y = c[7],
            s = c[8],
            w = c[9],
            H = c[10],
            E = c[11];
        c[0] = f * l + g * r + e * s;
        c[1] = f * d + g * u + e * w;
        c[2] = f * q + g * t + e * H;
        c[3] = f * n + g * y + e * E;
        c[4] = m * l + h * r + k * s;
        c[5] = m * d + h * u + k * w;
        c[6] = m * q + h * t + k * H;
        c[7] = m * n + h * y + k * E;
        c[8] = o * l + p * r + j * s;
        c[9] = o * d + p * u + j * w;
        c[10] = o * q + p * t + j * H;
        c[11] =
            o * n + p * y + j * E;
        return this
    },
    scale: function(a) {
        var b = this.elements,
            c = a.x,
            d = a.y,
            a = a.z;
        b[0] = b[0] * c;
        b[4] = b[4] * d;
        b[8] = b[8] * a;
        b[1] = b[1] * c;
        b[5] = b[5] * d;
        b[9] = b[9] * a;
        b[2] = b[2] * c;
        b[6] = b[6] * d;
        b[10] = b[10] * a;
        b[3] = b[3] * c;
        b[7] = b[7] * d;
        b[11] = b[11] * a;
        return this
    },
    getMaxScaleOnAxis: function() {
        var a = this.elements;
        return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], Math.max(a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10])))
    },
    makeTranslation: function(a, b, c) {
        this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);
        return this
    },
    makeRotationX: function(a) {
        var b = Math.cos(a),
            a = Math.sin(a);
        this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);
        return this
    },
    makeRotationY: function(a) {
        var b = Math.cos(a),
            a = Math.sin(a);
        this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);
        return this
    },
    makeRotationZ: function(a) {
        var b = Math.cos(a),
            a = Math.sin(a);
        this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this
    },
    makeRotationAxis: function(a, b) {
        var c = Math.cos(b),
            d = Math.sin(b),
            e = 1 - c,
            f = a.x,
            g = a.y,
            h = a.z,
            j = e * f,
            l = e * g;
        this.set(j * f + c, j * g - d * h, j * h + d * g, 0, j * g + d * h, l * g + c, l * h - d * f, 0, j * h -
            d * g, l * h + d * f, e * h * h + c, 0, 0, 0, 0, 1);
        return this
    },
    makeScale: function(a, b, c) {
        this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);
        return this
    },
    makeFrustum: function(a, b, c, d, e, f) {
        var g = this.elements;
        g[0] = 2 * e / (b - a);
        g[4] = 0;
        g[8] = (b + a) / (b - a);
        g[12] = 0;
        g[1] = 0;
        g[5] = 2 * e / (d - c);
        g[9] = (d + c) / (d - c);
        g[13] = 0;
        g[2] = 0;
        g[6] = 0;
        g[10] = -(f + e) / (f - e);
        g[14] = -2 * f * e / (f - e);
        g[3] = 0;
        g[7] = 0;
        g[11] = -1;
        g[15] = 0;
        return this
    },
    makePerspective: function(a, b, c, d) {
        var a = c * Math.tan(a * Math.PI / 360),
            e = -a;
        return this.makeFrustum(e * b, a * b, e, a, c, d)
    },
    makeOrthographic: function(a,
        b, c, d, e, f) {
        var g = this.elements,
            h = b - a,
            j = c - d,
            l = f - e;
        g[0] = 2 / h;
        g[4] = 0;
        g[8] = 0;
        g[12] = -((b + a) / h);
        g[1] = 0;
        g[5] = 2 / j;
        g[9] = 0;
        g[13] = -((c + d) / j);
        g[2] = 0;
        g[6] = 0;
        g[10] = -2 / l;
        g[14] = -((f + e) / l);
        g[3] = 0;
        g[7] = 0;
        g[11] = 0;
        g[15] = 1;
        return this
    },
    clone: function() {
        var a = this.elements;
        return new THREE.Matrix4(a[0], a[4], a[8], a[12], a[1], a[5], a[9], a[13], a[2], a[6], a[10], a[14], a[3], a[7], a[11], a[15])
    }
};
THREE.Matrix4.__v1 = new THREE.Vector3;
THREE.Matrix4.__v2 = new THREE.Vector3;
THREE.Matrix4.__v3 = new THREE.Vector3;
THREE.Matrix4.__m1 = new THREE.Matrix4;
THREE.Matrix4.__m2 = new THREE.Matrix4;
THREE.Object3D = function() {
    this.id = THREE.Object3DCount++;
    this.name = "";
    this.parent = void 0;
    this.children = [];
    this.up = new THREE.Vector3(0, 1, 0);
    this.position = new THREE.Vector3;
    this.rotation = new THREE.Vector3;
    this.eulerOrder = "XYZ";
    this.scale = new THREE.Vector3(1, 1, 1);
    this.flipSided = this.doubleSided = false;
    this.renderDepth = null;
    this.rotationAutoUpdate = true;
    this.matrix = new THREE.Matrix4;
    this.matrixWorld = new THREE.Matrix4;
    this.matrixRotationWorld = new THREE.Matrix4;
    this.matrixWorldNeedsUpdate = this.matrixAutoUpdate =
        true;
    this.quaternion = new THREE.Quaternion;
    this.useQuaternion = false;
    this.boundRadius = 0;
    this.boundRadiusScale = 1;
    this.visible = true;
    this.receiveShadow = this.castShadow = false;
    this.frustumCulled = true;
    this._vector = new THREE.Vector3;
};
THREE.Object3D.prototype = {
    constructor: THREE.Object3D,
    applyMatrix: function(a) {
        this.matrix.multiply(a, this.matrix);
        this.scale.getScaleFromMatrix(this.matrix);
        this.rotation.getRotationFromMatrix(this.matrix, this.scale);
        this.position.getPositionFromMatrix(this.matrix);
    },
    translate: function(a, b) {
        this.matrix.rotateAxis(b);
        this.position.addSelf(b.multiplyScalar(a));
    },
    translateX: function(a) {
        this.translate(a, this._vector.set(1, 0, 0));
    },
    translateY: function(a) {
        this.translate(a, this._vector.set(0, 1, 0));
    },
    translateZ: function(a) {
        this.translate(a,
            this._vector.set(0, 0, 1));
    },
    lookAt: function(a) {
        this.matrix.lookAt(a, this.position, this.up);
        this.rotationAutoUpdate && this.rotation.getRotationFromMatrix(this.matrix);
    },
    add: function(a) {
        if (a === this) console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");
        else if (a instanceof THREE.Object3D) {
            a.parent !== void 0 && a.parent.remove(a);
            a.parent = this;
            this.children.push(a);
            for (var b = this; b.parent !== void 0;) b = b.parent;
            b !== void 0 && b instanceof THREE.Scene && b.__addObject(a);
        }
    },
    remove: function(a) {
        var b =
            this.children.indexOf(a);
        if (b !== -1) {
            a.parent = void 0;
            this.children.splice(b, 1);
            for (b = this; b.parent !== void 0;) b = b.parent;
            b !== void 0 && b instanceof THREE.Scene && b.__removeObject(a);
        }
    },
    getChildByName: function(a, b) {
        var c, d, e;
        c = 0;
        for (d = this.children.length; c < d; c++) {
            e = this.children[c];
            if (e.name === a) return e;
            if (b) {
                e = e.getChildByName(a, b);
                if (e !== void 0) return e
            }
        }
    },
    updateMatrix: function() {
        this.matrix.setPosition(this.position);
        this.useQuaternion ? this.matrix.setRotationFromQuaternion(this.quaternion) : this.matrix.setRotationFromEuler(this.rotation,
            this.eulerOrder);
        if (this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1) {
            this.matrix.scale(this.scale);
            this.boundRadiusScale = Math.max(this.scale.x, Math.max(this.scale.y, this.scale.z));
        }
        this.matrixWorldNeedsUpdate = true;
    },
    updateMatrixWorld: function(a) {
        this.matrixAutoUpdate && this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || a) {
            this.parent ? this.matrixWorld.multiply(this.parent.matrixWorld, this.matrix) : this.matrixWorld.copy(this.matrix);
            this.matrixWorldNeedsUpdate = false;
            a = true;
        }
        for (var b = 0, c = this.children.length; b <
            c; b++) this.children[b].updateMatrixWorld(a);
    }
};
THREE.Object3DCount = 0;
THREE.Projector = function() {
    function a() {
        var a = g[f] = g[f] || new THREE.RenderableObject;
        f++;
        return a
    }

    function b() {
        var a = l[j] = l[j] || new THREE.RenderableVertex;
        j++;
        return a
    }

    function c(a, b) {
        return b.z - a.z
    }

    function d(a, b) {
        var c = 0,
            d = 1,
            e = a.z + a.w,
            f = b.z + b.w,
            g = -a.z + a.w,
            h = -b.z + b.w;
        if (e >= 0 && f >= 0 && g >= 0 && h >= 0) return true;
        if (e < 0 && f < 0 || g < 0 && h < 0) return false;
        e < 0 ? c = Math.max(c, e / (e - f)) : f < 0 && (d = Math.min(d, e / (e - f)));
        g < 0 ? c = Math.max(c, g / (g - h)) : h < 0 && (d = Math.min(d, g / (g - h)));
        if (d < c) return false;
        a.lerpSelf(b, c);
        b.lerpSelf(a, 1 -
            d);
        return true
    }
    var e, f, g = [],
        h, j, l = [],
        k, p, m = [],
        o, q = [],
        n, r, u = [],
        t, y, s = [],
        w = {
            objects: [],
            sprites: [],
            lights: [],
            elements: []
        },
        H = new THREE.Vector3,
        E = new THREE.Vector4,
        z = new THREE.Matrix4,
        v = new THREE.Matrix4,
        A = new THREE.Frustum,
        J = new THREE.Vector4,
        K = new THREE.Vector4;
    this.projectVector = function(a, b) {
        b.matrixWorldInverse.getInverse(b.matrixWorld);
        z.multiply(b.projectionMatrix, b.matrixWorldInverse);
        z.multiplyVector3(a);
        return a
    };
    this.unprojectVector = function(a, b) {
        b.projectionMatrixInverse.getInverse(b.projectionMatrix);
        z.multiply(b.matrixWorld, b.projectionMatrixInverse);
        z.multiplyVector3(a);
        return a
    };
    this.pickingRay = function(a, b) {
        var c;
        a.z = -1;
        c = new THREE.Vector3(a.x, a.y, 1);
        this.unprojectVector(a, b);
        this.unprojectVector(c, b);
        c.subSelf(a).normalize();
        return new THREE.Ray(a, c)
    };
    this.projectGraph = function(b, d) {
        f = 0;
        w.objects.length = 0;
        w.sprites.length = 0;
        w.lights.length = 0;
        var g = function(b) {
            if (b.visible !== false) {
                if ((b instanceof THREE.Mesh || b instanceof THREE.Line) && (b.frustumCulled === false || A.contains(b))) {
                    H.copy(b.matrixWorld.getPosition());
                    z.multiplyVector3(H);
                    e = a();
                    e.object = b;
                    e.z = H.z;
                    w.objects.push(e);
                } else if (b instanceof THREE.Sprite || b instanceof THREE.Particle) {
                    H.copy(b.matrixWorld.getPosition());
                    z.multiplyVector3(H);
                    e = a();
                    e.object = b;
                    e.z = H.z;
                    w.sprites.push(e);
                } else b instanceof THREE.Light && w.lights.push(b);
                for (var c = 0, d = b.children.length; c < d; c++) g(b.children[c]);
            }
        };
        g(b);
        d && w.objects.sort(c);
        return w
    };
    this.projectScene = function(a, e, f) {
        var g = e.near,
            G = e.far,
            i = false,
            H, U, C, Y, F, ea, fa, ia, O, Q, Z, $, ha, Ma, Ka;
        y = r = o = p = 0;
        w.elements.length = 0;
        if (e.parent ===
            void 0) {
            console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it...");
            a.add(e);
        }
        a.updateMatrixWorld();
        e.matrixWorldInverse.getInverse(e.matrixWorld);
        z.multiply(e.projectionMatrix, e.matrixWorldInverse);
        A.setFromMatrix(z);
        w = this.projectGraph(a, false);
        a = 0;
        for (H = w.objects.length; a < H; a++) {
            O = w.objects[a].object;
            Q = O.matrixWorld;
            j = 0;
            if (O instanceof THREE.Mesh) {
                Z = O.geometry;
                $ = O.geometry.materials;
                Y = Z.vertices;
                ha = Z.faces;
                Ma = Z.faceVertexUvs;
                Z = O.matrixRotationWorld.extractRotation(Q);
                U = 0;
                for (C =
                    Y.length; U < C; U++) {
                    h = b();
                    h.positionWorld.copy(Y[U]);
                    Q.multiplyVector3(h.positionWorld);
                    h.positionScreen.copy(h.positionWorld);
                    z.multiplyVector4(h.positionScreen);
                    h.positionScreen.x = h.positionScreen.x / h.positionScreen.w;
                    h.positionScreen.y = h.positionScreen.y / h.positionScreen.w;
                    h.visible = h.positionScreen.z > g && h.positionScreen.z < G;
                }
                Y = 0;
                for (U = ha.length; Y < U; Y++) {
                    C = ha[Y];
                    if (C instanceof THREE.Face3) {
                        F = l[C.a];
                        ea = l[C.b];
                        fa = l[C.c];
                        if (F.visible && ea.visible && fa.visible) {
                            i = (fa.positionScreen.x - F.positionScreen.x) *
                                (ea.positionScreen.y - F.positionScreen.y) - (fa.positionScreen.y - F.positionScreen.y) * (ea.positionScreen.x - F.positionScreen.x) < 0;
                            if (O.doubleSided || i != O.flipSided) {
                                ia = m[p] = m[p] || new THREE.RenderableFace3;
                                p++;
                                k = ia;
                                k.v1.copy(F);
                                k.v2.copy(ea);
                                k.v3.copy(fa);
                            } else continue
                        } else continue
                    } else if (C instanceof THREE.Face4) {
                        F = l[C.a];
                        ea = l[C.b];
                        fa = l[C.c];
                        ia = l[C.d];
                        if (F.visible && ea.visible && fa.visible && ia.visible) {
                            i = (ia.positionScreen.x - F.positionScreen.x) * (ea.positionScreen.y - F.positionScreen.y) - (ia.positionScreen.y -
                                F.positionScreen.y) * (ea.positionScreen.x - F.positionScreen.x) < 0 || (ea.positionScreen.x - fa.positionScreen.x) * (ia.positionScreen.y - fa.positionScreen.y) - (ea.positionScreen.y - fa.positionScreen.y) * (ia.positionScreen.x - fa.positionScreen.x) < 0;
                            if (O.doubleSided || i != O.flipSided) {
                                Ka = q[o] = q[o] || new THREE.RenderableFace4;
                                o++;
                                k = Ka;
                                k.v1.copy(F);
                                k.v2.copy(ea);
                                k.v3.copy(fa);
                                k.v4.copy(ia);
                            } else continue
                        } else continue
                    }
                    k.normalWorld.copy(C.normal);
                    !i && (O.flipSided || O.doubleSided) && k.normalWorld.negate();
                    Z.multiplyVector3(k.normalWorld);
                    k.centroidWorld.copy(C.centroid);
                    Q.multiplyVector3(k.centroidWorld);
                    k.centroidScreen.copy(k.centroidWorld);
                    z.multiplyVector3(k.centroidScreen);
                    fa = C.vertexNormals;
                    F = 0;
                    for (ea = fa.length; F < ea; F++) {
                        ia = k.vertexNormalsWorld[F];
                        ia.copy(fa[F]);
                        !i && (O.flipSided || O.doubleSided) && ia.negate();
                        Z.multiplyVector3(ia);
                    }
                    F = 0;
                    for (ea = Ma.length; F < ea; F++)
                        if (Ka = Ma[F][Y]) {
                            fa = 0;
                            for (ia = Ka.length; fa < ia; fa++) k.uvs[F][fa] = Ka[fa];
                        } k.material = O.material;
                    k.faceMaterial = C.materialIndex !== null ? $[C.materialIndex] : null;
                    k.z = k.centroidScreen.z;
                    w.elements.push(k);
                }
            } else if (O instanceof THREE.Line) {
                v.multiply(z, Q);
                Y = O.geometry.vertices;
                F = b();
                F.positionScreen.copy(Y[0]);
                v.multiplyVector4(F.positionScreen);
                Q = O.type === THREE.LinePieces ? 2 : 1;
                U = 1;
                for (C = Y.length; U < C; U++) {
                    F = b();
                    F.positionScreen.copy(Y[U]);
                    v.multiplyVector4(F.positionScreen);
                    if (!((U + 1) % Q > 0)) {
                        ea = l[j - 2];
                        J.copy(F.positionScreen);
                        K.copy(ea.positionScreen);
                        if (d(J, K)) {
                            J.multiplyScalar(1 / J.w);
                            K.multiplyScalar(1 / K.w);
                            $ = u[r] = u[r] || new THREE.RenderableLine;
                            r++;
                            n = $;
                            n.v1.positionScreen.copy(J);
                            n.v2.positionScreen.copy(K);
                            n.z = Math.max(J.z, K.z);
                            n.material = O.material;
                            w.elements.push(n);
                        }
                    }
                }
            }
        }
        a = 0;
        for (H = w.sprites.length; a < H; a++) {
            O = w.sprites[a].object;
            Q = O.matrixWorld;
            if (O instanceof THREE.Particle) {
                E.set(Q.elements[12], Q.elements[13], Q.elements[14], 1);
                z.multiplyVector4(E);
                E.z = E.z / E.w;
                if (E.z > 0 && E.z < 1) {
                    g = s[y] = s[y] || new THREE.RenderableParticle;
                    y++;
                    t = g;
                    t.x = E.x / E.w;
                    t.y = E.y / E.w;
                    t.z = E.z;
                    t.rotation = O.rotation.z;
                    t.scale.x = O.scale.x * Math.abs(t.x - (E.x + e.projectionMatrix.elements[0]) / (E.w + e.projectionMatrix.elements[12]));
                    t.scale.y = O.scale.y * Math.abs(t.y - (E.y + e.projectionMatrix.elements[5]) / (E.w + e.projectionMatrix.elements[13]));
                    t.material = O.material;
                    w.elements.push(t);
                }
            }
        }
        f && w.elements.sort(c);
        return w
    };
};
THREE.Quaternion = function(a, b, c, d) {
    this.x = a || 0;
    this.y = b || 0;
    this.z = c || 0;
    this.w = d !== void 0 ? d : 1;
};
THREE.Quaternion.prototype = {
    constructor: THREE.Quaternion,
    set: function(a, b, c, d) {
        this.x = a;
        this.y = b;
        this.z = c;
        this.w = d;
        return this
    },
    copy: function(a) {
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        this.w = a.w;
        return this
    },
    setFromEuler: function(a) {
        var b = Math.PI / 360,
            c = a.x * b,
            d = a.y * b,
            e = a.z * b,
            a = Math.cos(d),
            d = Math.sin(d),
            b = Math.cos(-e),
            e = Math.sin(-e),
            f = Math.cos(c),
            c = Math.sin(c),
            g = a * b,
            h = d * e;
        this.w = g * f - h * c;
        this.x = g * c + h * f;
        this.y = d * b * f + a * e * c;
        this.z = a * e * f - d * b * c;
        return this
    },
    setFromAxisAngle: function(a, b) {
        var c = b / 2,
            d = Math.sin(c);
        this.x = a.x * d;
        this.y = a.y * d;
        this.z = a.z * d;
        this.w = Math.cos(c);
        return this
    },
    setFromRotationMatrix: function(a) {
        var b = Math.pow(a.determinant(), 1 / 3);
        this.w = Math.sqrt(Math.max(0, b + a.elements[0] + a.elements[5] + a.elements[10])) / 2;
        this.x = Math.sqrt(Math.max(0, b + a.elements[0] - a.elements[5] - a.elements[10])) / 2;
        this.y = Math.sqrt(Math.max(0, b - a.elements[0] + a.elements[5] - a.elements[10])) / 2;
        this.z = Math.sqrt(Math.max(0, b - a.elements[0] - a.elements[5] + a.elements[10])) / 2;
        this.x = a.elements[6] - a.elements[9] < 0 ? -Math.abs(this.x) :
            Math.abs(this.x);
        this.y = a.elements[8] - a.elements[2] < 0 ? -Math.abs(this.y) : Math.abs(this.y);
        this.z = a.elements[1] - a.elements[4] < 0 ? -Math.abs(this.z) : Math.abs(this.z);
        this.normalize();
        return this
    },
    calculateW: function() {
        this.w = -Math.sqrt(Math.abs(1 - this.x * this.x - this.y * this.y - this.z * this.z));
        return this
    },
    inverse: function() {
        this.x = this.x * -1;
        this.y = this.y * -1;
        this.z = this.z * -1;
        return this
    },
    length: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
    },
    normalize: function() {
        var a =
            Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        if (a === 0) this.w = this.z = this.y = this.x = 0;
        else {
            a = 1 / a;
            this.x = this.x * a;
            this.y = this.y * a;
            this.z = this.z * a;
            this.w = this.w * a;
        }
        return this
    },
    multiply: function(a, b) {
        this.x = a.x * b.w + a.y * b.z - a.z * b.y + a.w * b.x;
        this.y = -a.x * b.z + a.y * b.w + a.z * b.x + a.w * b.y;
        this.z = a.x * b.y - a.y * b.x + a.z * b.w + a.w * b.z;
        this.w = -a.x * b.x - a.y * b.y - a.z * b.z + a.w * b.w;
        return this
    },
    multiplySelf: function(a) {
        var b = this.x,
            c = this.y,
            d = this.z,
            e = this.w,
            f = a.x,
            g = a.y,
            h = a.z,
            a = a.w;
        this.x = b * a + e * f + c * h - d * g;
        this.y =
            c * a + e * g + d * f - b * h;
        this.z = d * a + e * h + b * g - c * f;
        this.w = e * a - b * f - c * g - d * h;
        return this
    },
    multiplyVector3: function(a, b) {
        b || (b = a);
        var c = a.x,
            d = a.y,
            e = a.z,
            f = this.x,
            g = this.y,
            h = this.z,
            j = this.w,
            l = j * c + g * e - h * d,
            k = j * d + h * c - f * e,
            p = j * e + f * d - g * c,
            c = -f * c - g * d - h * e;
        b.x = l * j + c * -f + k * -h - p * -g;
        b.y = k * j + c * -g + p * -f - l * -h;
        b.z = p * j + c * -h + l * -g - k * -f;
        return b
    },
    clone: function() {
        return new THREE.Quaternion(this.x, this.y, this.z, this.w)
    }
};
THREE.Quaternion.slerp = function(a, b, c, d) {
    var e = a.w * b.w + a.x * b.x + a.y * b.y + a.z * b.z;
    if (e < 0) {
        c.w = -b.w;
        c.x = -b.x;
        c.y = -b.y;
        c.z = -b.z;
        e = -e;
    } else c.copy(b);
    if (Math.abs(e) >= 1) {
        c.w = a.w;
        c.x = a.x;
        c.y = a.y;
        c.z = a.z;
        return c
    }
    var f = Math.acos(e),
        e = Math.sqrt(1 - e * e);
    if (Math.abs(e) < 0.001) {
        c.w = 0.5 * (a.w + b.w);
        c.x = 0.5 * (a.x + b.x);
        c.y = 0.5 * (a.y + b.y);
        c.z = 0.5 * (a.z + b.z);
        return c
    }
    b = Math.sin((1 - d) * f) / e;
    d = Math.sin(d * f) / e;
    c.w = a.w * b + c.w * d;
    c.x = a.x * b + c.x * d;
    c.y = a.y * b + c.y * d;
    c.z = a.z * b + c.z * d;
    return c
};
THREE.Vertex = function() {
    console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");
};
THREE.Face3 = function(a, b, c, d, e, f) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.normal = d instanceof THREE.Vector3 ? d : new THREE.Vector3;
    this.vertexNormals = d instanceof Array ? d : [];
    this.color = e instanceof THREE.Color ? e : new THREE.Color;
    this.vertexColors = e instanceof Array ? e : [];
    this.vertexTangents = [];
    this.materialIndex = f;
    this.centroid = new THREE.Vector3;
};
THREE.Face3.prototype = {
    constructor: THREE.Face3,
    clone: function() {
        var a = new THREE.Face3(this.a, this.b, this.c);
        a.normal.copy(this.normal);
        a.color.copy(this.color);
        a.centroid.copy(this.centroid);
        a.materialIndex = this.materialIndex;
        var b, c;
        b = 0;
        for (c = this.vertexNormals.length; b < c; b++) a.vertexNormals[b] = this.vertexNormals[b].clone();
        b = 0;
        for (c = this.vertexColors.length; b < c; b++) a.vertexColors[b] = this.vertexColors[b].clone();
        b = 0;
        for (c = this.vertexTangents.length; b < c; b++) a.vertexTangents[b] = this.vertexTangents[b].clone();
        return a
    }
};
THREE.Face4 = function(a, b, c, d, e, f, g) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.normal = e instanceof THREE.Vector3 ? e : new THREE.Vector3;
    this.vertexNormals = e instanceof Array ? e : [];
    this.color = f instanceof THREE.Color ? f : new THREE.Color;
    this.vertexColors = f instanceof Array ? f : [];
    this.vertexTangents = [];
    this.materialIndex = g;
    this.centroid = new THREE.Vector3;
};
THREE.Face4.prototype = {
    constructor: THREE.Face4,
    clone: function() {
        var a = new THREE.Face4(this.a, this.b, this.c, this.d);
        a.normal.copy(this.normal);
        a.color.copy(this.color);
        a.centroid.copy(this.centroid);
        a.materialIndex = this.materialIndex;
        var b, c;
        b = 0;
        for (c = this.vertexNormals.length; b < c; b++) a.vertexNormals[b] = this.vertexNormals[b].clone();
        b = 0;
        for (c = this.vertexColors.length; b < c; b++) a.vertexColors[b] = this.vertexColors[b].clone();
        b = 0;
        for (c = this.vertexTangents.length; b < c; b++) a.vertexTangents[b] = this.vertexTangents[b].clone();
        return a
    }
};
THREE.UV = function(a, b) {
    this.u = a || 0;
    this.v = b || 0;
};
THREE.UV.prototype = {
    constructor: THREE.UV,
    set: function(a, b) {
        this.u = a;
        this.v = b;
        return this
    },
    copy: function(a) {
        this.u = a.u;
        this.v = a.v;
        return this
    },
    lerpSelf: function(a, b) {
        this.u = this.u + (a.u - this.u) * b;
        this.v = this.v + (a.v - this.v) * b;
        return this
    },
    clone: function() {
        return new THREE.UV(this.u, this.v)
    }
};
THREE.Geometry = function() {
    this.id = THREE.GeometryCount++;
    this.vertices = [];
    this.colors = [];
    this.materials = [];
    this.faces = [];
    this.faceUvs = [
        []
    ];
    this.faceVertexUvs = [
        []
    ];
    this.morphTargets = [];
    this.morphColors = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;
    this.dynamic = this.hasTangents = false;
};
THREE.Geometry.prototype = {
    constructor: THREE.Geometry,
    applyMatrix: function(a) {
        var b = new THREE.Matrix4;
        b.extractRotation(a);
        for (var c = 0, d = this.vertices.length; c < d; c++) a.multiplyVector3(this.vertices[c]);
        c = 0;
        for (d = this.faces.length; c < d; c++) {
            var e = this.faces[c];
            b.multiplyVector3(e.normal);
            for (var f = 0, g = e.vertexNormals.length; f < g; f++) b.multiplyVector3(e.vertexNormals[f]);
            a.multiplyVector3(e.centroid);
        }
    },
    computeCentroids: function() {
        var a, b, c;
        a = 0;
        for (b = this.faces.length; a < b; a++) {
            c = this.faces[a];
            c.centroid.set(0,
                0, 0);
            if (c instanceof THREE.Face3) {
                c.centroid.addSelf(this.vertices[c.a]);
                c.centroid.addSelf(this.vertices[c.b]);
                c.centroid.addSelf(this.vertices[c.c]);
                c.centroid.divideScalar(3);
            } else if (c instanceof THREE.Face4) {
                c.centroid.addSelf(this.vertices[c.a]);
                c.centroid.addSelf(this.vertices[c.b]);
                c.centroid.addSelf(this.vertices[c.c]);
                c.centroid.addSelf(this.vertices[c.d]);
                c.centroid.divideScalar(4);
            }
        }
    },
    computeFaceNormals: function() {
        var a, b, c, d, e, f, g = new THREE.Vector3,
            h = new THREE.Vector3;
        a = 0;
        for (b = this.faces.length; a <
            b; a++) {
            c = this.faces[a];
            d = this.vertices[c.a];
            e = this.vertices[c.b];
            f = this.vertices[c.c];
            g.sub(f, e);
            h.sub(d, e);
            g.crossSelf(h);
            g.isZero() || g.normalize();
            c.normal.copy(g);
        }
    },
    computeVertexNormals: function() {
        var a, b, c, d;
        if (this.__tmpVertices === void 0) {
            d = this.__tmpVertices = Array(this.vertices.length);
            a = 0;
            for (b = this.vertices.length; a < b; a++) d[a] = new THREE.Vector3;
            a = 0;
            for (b = this.faces.length; a < b; a++) {
                c = this.faces[a];
                if (c instanceof THREE.Face3) c.vertexNormals = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
                else if (c instanceof THREE.Face4) c.vertexNormals = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
            }
        } else {
            d = this.__tmpVertices;
            a = 0;
            for (b = this.vertices.length; a < b; a++) d[a].set(0, 0, 0);
        }
        a = 0;
        for (b = this.faces.length; a < b; a++) {
            c = this.faces[a];
            if (c instanceof THREE.Face3) {
                d[c.a].addSelf(c.normal);
                d[c.b].addSelf(c.normal);
                d[c.c].addSelf(c.normal);
            } else if (c instanceof THREE.Face4) {
                d[c.a].addSelf(c.normal);
                d[c.b].addSelf(c.normal);
                d[c.c].addSelf(c.normal);
                d[c.d].addSelf(c.normal);
            }
        }
        a = 0;
        for (b = this.vertices.length; a < b; a++) d[a].normalize();
        a = 0;
        for (b = this.faces.length; a < b; a++) {
            c = this.faces[a];
            if (c instanceof THREE.Face3) {
                c.vertexNormals[0].copy(d[c.a]);
                c.vertexNormals[1].copy(d[c.b]);
                c.vertexNormals[2].copy(d[c.c]);
            } else if (c instanceof THREE.Face4) {
                c.vertexNormals[0].copy(d[c.a]);
                c.vertexNormals[1].copy(d[c.b]);
                c.vertexNormals[2].copy(d[c.c]);
                c.vertexNormals[3].copy(d[c.d]);
            }
        }
    },
    computeMorphNormals: function() {
        var a, b, c, d, e;
        c = 0;
        for (d = this.faces.length; c < d; c++) {
            e = this.faces[c];
            e.__originalFaceNormal ?
                e.__originalFaceNormal.copy(e.normal) : e.__originalFaceNormal = e.normal.clone();
            if (!e.__originalVertexNormals) e.__originalVertexNormals = [];
            a = 0;
            for (b = e.vertexNormals.length; a < b; a++) e.__originalVertexNormals[a] ? e.__originalVertexNormals[a].copy(e.vertexNormals[a]) : e.__originalVertexNormals[a] = e.vertexNormals[a].clone();
        }
        var f = new THREE.Geometry;
        f.faces = this.faces;
        a = 0;
        for (b = this.morphTargets.length; a < b; a++) {
            if (!this.morphNormals[a]) {
                this.morphNormals[a] = {};
                this.morphNormals[a].faceNormals = [];
                this.morphNormals[a].vertexNormals = [];
                var g = this.morphNormals[a].faceNormals,
                    h = this.morphNormals[a].vertexNormals,
                    j, l;
                c = 0;
                for (d = this.faces.length; c < d; c++) {
                    e = this.faces[c];
                    j = new THREE.Vector3;
                    l = e instanceof THREE.Face3 ? {
                        a: new THREE.Vector3,
                        b: new THREE.Vector3,
                        c: new THREE.Vector3
                    } : {
                        a: new THREE.Vector3,
                        b: new THREE.Vector3,
                        c: new THREE.Vector3,
                        d: new THREE.Vector3
                    };
                    g.push(j);
                    h.push(l);
                }
            }
            g = this.morphNormals[a];
            f.vertices = this.morphTargets[a].vertices;
            f.computeFaceNormals();
            f.computeVertexNormals();
            c = 0;
            for (d = this.faces.length; c < d; c++) {
                e = this.faces[c];
                j = g.faceNormals[c];
                l = g.vertexNormals[c];
                j.copy(e.normal);
                if (e instanceof THREE.Face3) {
                    l.a.copy(e.vertexNormals[0]);
                    l.b.copy(e.vertexNormals[1]);
                    l.c.copy(e.vertexNormals[2]);
                } else {
                    l.a.copy(e.vertexNormals[0]);
                    l.b.copy(e.vertexNormals[1]);
                    l.c.copy(e.vertexNormals[2]);
                    l.d.copy(e.vertexNormals[3]);
                }
            }
        }
        c = 0;
        for (d = this.faces.length; c < d; c++) {
            e = this.faces[c];
            e.normal = e.__originalFaceNormal;
            e.vertexNormals = e.__originalVertexNormals;
        }
    },
    computeTangents: function() {
        function a(a, b, c, d, e, f, F) {
            h = a.vertices[b];
            j = a.vertices[c];
            l = a.vertices[d];
            k = g[e];
            p = g[f];
            m = g[F];
            o = j.x - h.x;
            q = l.x - h.x;
            n = j.y - h.y;
            r = l.y - h.y;
            u = j.z - h.z;
            t = l.z - h.z;
            y = p.u - k.u;
            s = m.u - k.u;
            w = p.v - k.v;
            H = m.v - k.v;
            E = 1 / (y * H - s * w);
            J.set((H * o - w * q) * E, (H * n - w * r) * E, (H * u - w * t) * E);
            K.set((y * q - s * o) * E, (y * r - s * n) * E, (y * t - s * u) * E);
            v[b].addSelf(J);
            v[c].addSelf(J);
            v[d].addSelf(J);
            A[b].addSelf(K);
            A[c].addSelf(K);
            A[d].addSelf(K);
        }
        var b, c, d, e, f, g, h, j, l, k, p, m, o, q, n, r, u, t, y, s, w, H, E, z, v = [],
            A = [],
            J = new THREE.Vector3,
            K = new THREE.Vector3,
            R = new THREE.Vector3,
            P = new THREE.Vector3,
            D = new THREE.Vector3;
        b = 0;
        for (c =
            this.vertices.length; b < c; b++) {
            v[b] = new THREE.Vector3;
            A[b] = new THREE.Vector3;
        }
        b = 0;
        for (c = this.faces.length; b < c; b++) {
            f = this.faces[b];
            g = this.faceVertexUvs[0][b];
            if (f instanceof THREE.Face3) a(this, f.a, f.b, f.c, 0, 1, 2);
            else if (f instanceof THREE.Face4) {
                a(this, f.a, f.b, f.d, 0, 1, 3);
                a(this, f.b, f.c, f.d, 1, 2, 3);
            }
        }
        var M = ["a", "b", "c", "d"];
        b = 0;
        for (c = this.faces.length; b < c; b++) {
            f = this.faces[b];
            for (d = 0; d < f.vertexNormals.length; d++) {
                D.copy(f.vertexNormals[d]);
                e = f[M[d]];
                z = v[e];
                R.copy(z);
                R.subSelf(D.multiplyScalar(D.dot(z))).normalize();
                P.cross(f.vertexNormals[d], z);
                e = P.dot(A[e]);
                e = e < 0 ? -1 : 1;
                f.vertexTangents[d] = new THREE.Vector4(R.x, R.y, R.z, e);
            }
        }
        this.hasTangents = true;
    },
    computeBoundingBox: function() {
        if (!this.boundingBox) this.boundingBox = {
            min: new THREE.Vector3,
            max: new THREE.Vector3
        };
        if (this.vertices.length > 0) {
            var a;
            a = this.vertices[0];
            this.boundingBox.min.copy(a);
            this.boundingBox.max.copy(a);
            for (var b = this.boundingBox.min, c = this.boundingBox.max, d = 1, e = this.vertices.length; d < e; d++) {
                a = this.vertices[d];
                if (a.x < b.x) b.x = a.x;
                else if (a.x > c.x) c.x =
                    a.x;
                if (a.y < b.y) b.y = a.y;
                else if (a.y > c.y) c.y = a.y;
                if (a.z < b.z) b.z = a.z;
                else if (a.z > c.z) c.z = a.z;
            }
        } else {
            this.boundingBox.min.set(0, 0, 0);
            this.boundingBox.max.set(0, 0, 0);
        }
    },
    computeBoundingSphere: function() {
        if (!this.boundingSphere) this.boundingSphere = {
            radius: 0
        };
        for (var a, b = 0, c = 0, d = this.vertices.length; c < d; c++) {
            a = this.vertices[c].length();
            a > b && (b = a);
        }
        this.boundingSphere.radius = b;
    },
    mergeVertices: function() {
        var a = {},
            b = [],
            c = [],
            d, e = Math.pow(10, 4),
            f, g, h;
        f = 0;
        for (g = this.vertices.length; f < g; f++) {
            d = this.vertices[f];
            d = [Math.round(d.x *
                e), Math.round(d.y * e), Math.round(d.z * e)].join("_");
            if (a[d] === void 0) {
                a[d] = f;
                b.push(this.vertices[f]);
                c[f] = b.length - 1;
            } else c[f] = c[a[d]];
        }
        f = 0;
        for (g = this.faces.length; f < g; f++) {
            e = this.faces[f];
            if (e instanceof THREE.Face3) {
                e.a = c[e.a];
                e.b = c[e.b];
                e.c = c[e.c];
            } else if (e instanceof THREE.Face4) {
                e.a = c[e.a];
                e.b = c[e.b];
                e.c = c[e.c];
                e.d = c[e.d];
                d = [e.a, e.b, e.c, e.d];
                for (a = 3; a > 0; a--)
                    if (d.indexOf(e["abcd" [a]]) != a) {
                        d.splice(a, 1);
                        this.faces[f] = new THREE.Face3(d[0], d[1], d[2]);
                        e = 0;
                        for (d = this.faceVertexUvs.length; e < d; e++)(h =
                            this.faceVertexUvs[e][f]) && h.splice(a, 1);
                        break
                    }
            }
        }
        c = this.vertices.length - b.length;
        this.vertices = b;
        return c
    }
};
THREE.GeometryCount = 0;
THREE.Spline = function(a) {
    function b(a, b, c, d, e, f, g) {
        a = (c - a) * 0.5;
        d = (d - b) * 0.5;
        return (2 * (b - c) + a + d) * g + (-3 * (b - c) - 2 * a - d) * f + a * e + b
    }
    this.points = a;
    var c = [],
        d = {
            x: 0,
            y: 0,
            z: 0
        },
        e, f, g, h, j, l, k, p, m;
    this.initFromArray = function(a) {
        this.points = [];
        for (var b = 0; b < a.length; b++) this.points[b] = {
            x: a[b][0],
            y: a[b][1],
            z: a[b][2]
        };
    };
    this.getPoint = function(a) {
        e = (this.points.length - 1) * a;
        f = Math.floor(e);
        g = e - f;
        c[0] = f === 0 ? f : f - 1;
        c[1] = f;
        c[2] = f > this.points.length - 2 ? this.points.length - 1 : f + 1;
        c[3] = f > this.points.length - 3 ? this.points.length - 1 :
            f + 2;
        l = this.points[c[0]];
        k = this.points[c[1]];
        p = this.points[c[2]];
        m = this.points[c[3]];
        h = g * g;
        j = g * h;
        d.x = b(l.x, k.x, p.x, m.x, g, h, j);
        d.y = b(l.y, k.y, p.y, m.y, g, h, j);
        d.z = b(l.z, k.z, p.z, m.z, g, h, j);
        return d
    };
    this.getControlPointsArray = function() {
        var a, b, c = this.points.length,
            d = [];
        for (a = 0; a < c; a++) {
            b = this.points[a];
            d[a] = [b.x, b.y, b.z];
        }
        return d
    };
    this.getLength = function(a) {
        var b, c, d, e = b = b = 0,
            f = new THREE.Vector3,
            g = new THREE.Vector3,
            h = [],
            j = 0;
        h[0] = 0;
        a || (a = 100);
        c = this.points.length * a;
        f.copy(this.points[0]);
        for (a = 1; a < c; a++) {
            b =
                a / c;
            d = this.getPoint(b);
            g.copy(d);
            j = j + g.distanceTo(f);
            f.copy(d);
            b = (this.points.length - 1) * b;
            b = Math.floor(b);
            if (b != e) {
                h[b] = j;
                e = b;
            }
        }
        h[h.length] = j;
        return {
            chunks: h,
            total: j
        }
    };
    this.reparametrizeByArcLength = function(a) {
        var b, c, d, e, f, g, h = [],
            j = new THREE.Vector3,
            k = this.getLength();
        h.push(j.copy(this.points[0]).clone());
        for (b = 1; b < this.points.length; b++) {
            c = k.chunks[b] - k.chunks[b - 1];
            g = Math.ceil(a * c / k.total);
            e = (b - 1) / (this.points.length - 1);
            f = b / (this.points.length - 1);
            for (c = 1; c < g - 1; c++) {
                d = e + c * (1 / g) * (f - e);
                d = this.getPoint(d);
                h.push(j.copy(d).clone());
            }
            h.push(j.copy(this.points[b]).clone());
        }
        this.points = h;
    };
};
THREE.Camera = function() {
    THREE.Object3D.call(this);
    this.matrixWorldInverse = new THREE.Matrix4;
    this.projectionMatrix = new THREE.Matrix4;
    this.projectionMatrixInverse = new THREE.Matrix4;
};
THREE.Camera.prototype = new THREE.Object3D;
THREE.Camera.prototype.constructor = THREE.Camera;
THREE.Camera.prototype.lookAt = function(a) {
    this.matrix.lookAt(this.position, a, this.up);
    this.rotationAutoUpdate && this.rotation.getRotationFromMatrix(this.matrix);
};
THREE.OrthographicCamera = function(a, b, c, d, e, f) {
    THREE.Camera.call(this);
    this.left = a;
    this.right = b;
    this.top = c;
    this.bottom = d;
    this.near = e !== void 0 ? e : 0.1;
    this.far = f !== void 0 ? f : 2E3;
    this.updateProjectionMatrix();
};
THREE.OrthographicCamera.prototype = new THREE.Camera;
THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;
THREE.OrthographicCamera.prototype.updateProjectionMatrix = function() {
    this.projectionMatrix.makeOrthographic(this.left, this.right, this.top, this.bottom, this.near, this.far);
};
THREE.PerspectiveCamera = function(a, b, c, d) {
    THREE.Camera.call(this);
    this.fov = a !== void 0 ? a : 50;
    this.aspect = b !== void 0 ? b : 1;
    this.near = c !== void 0 ? c : 0.1;
    this.far = d !== void 0 ? d : 2E3;
    this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype = new THREE.Camera;
THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;
THREE.PerspectiveCamera.prototype.setLens = function(a, b) {
    this.fov = 2 * Math.atan((b !== void 0 ? b : 24) / (a * 2)) * (180 / Math.PI);
    this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype.setViewOffset = function(a, b, c, d, e, f) {
    this.fullWidth = a;
    this.fullHeight = b;
    this.x = c;
    this.y = d;
    this.width = e;
    this.height = f;
    this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function() {
    if (this.fullWidth) {
        var a = this.fullWidth / this.fullHeight,
            b = Math.tan(this.fov * Math.PI / 360) * this.near,
            c = -b,
            d = a * c,
            a = Math.abs(a * b - d),
            c = Math.abs(b - c);
        this.projectionMatrix.makeFrustum(d + this.x * a / this.fullWidth, d + (this.x + this.width) * a / this.fullWidth, b - (this.y + this.height) * c / this.fullHeight, b - this.y * c / this.fullHeight, this.near, this.far);
    } else this.projectionMatrix.makePerspective(this.fov, this.aspect, this.near, this.far);
};
THREE.Light = function(a) {
    THREE.Object3D.call(this);
    this.color = new THREE.Color(a);
};
THREE.Light.prototype = new THREE.Object3D;
THREE.Light.prototype.constructor = THREE.Light;
THREE.Light.prototype.supr = THREE.Object3D.prototype;
THREE.AmbientLight = function(a) {
    THREE.Light.call(this, a);
};
THREE.AmbientLight.prototype = new THREE.Light;
THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;
THREE.DirectionalLight = function(a, b, c) {
    THREE.Light.call(this, a);
    this.position = new THREE.Vector3(0, 1, 0);
    this.target = new THREE.Object3D;
    this.intensity = b !== void 0 ? b : 1;
    this.distance = c !== void 0 ? c : 0;
    this.onlyShadow = this.castShadow = false;
    this.shadowCameraNear = 50;
    this.shadowCameraFar = 5E3;
    this.shadowCameraLeft = -500;
    this.shadowCameraTop = this.shadowCameraRight = 500;
    this.shadowCameraBottom = -500;
    this.shadowCameraVisible = false;
    this.shadowBias = 0;
    this.shadowDarkness = 0.5;
    this.shadowMapHeight = this.shadowMapWidth = 512;
    this.shadowCascade = false;
    this.shadowCascadeOffset = new THREE.Vector3(0, 0, -1E3);
    this.shadowCascadeCount = 2;
    this.shadowCascadeBias = [0, 0, 0];
    this.shadowCascadeWidth = [512, 512, 512];
    this.shadowCascadeHeight = [512, 512, 512];
    this.shadowCascadeNearZ = [-1, 0.99, 0.998];
    this.shadowCascadeFarZ = [0.99, 0.998, 1];
    this.shadowCascadeArray = [];
    this.shadowMatrix = this.shadowCamera = this.shadowMapSize = this.shadowMap = null;
};
THREE.DirectionalLight.prototype = new THREE.Light;
THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;
THREE.PointLight = function(a, b, c) {
    THREE.Light.call(this, a);
    this.position = new THREE.Vector3(0, 0, 0);
    this.intensity = b !== void 0 ? b : 1;
    this.distance = c !== void 0 ? c : 0;
};
THREE.PointLight.prototype = new THREE.Light;
THREE.PointLight.prototype.constructor = THREE.PointLight;
THREE.SpotLight = function(a, b, c, d, e) {
    THREE.Light.call(this, a);
    this.position = new THREE.Vector3(0, 1, 0);
    this.target = new THREE.Object3D;
    this.intensity = b !== void 0 ? b : 1;
    this.distance = c !== void 0 ? c : 0;
    this.angle = d !== void 0 ? d : Math.PI / 2;
    this.exponent = e !== void 0 ? e : 10;
    this.onlyShadow = this.castShadow = false;
    this.shadowCameraNear = 50;
    this.shadowCameraFar = 5E3;
    this.shadowCameraFov = 50;
    this.shadowCameraVisible = false;
    this.shadowBias = 0;
    this.shadowDarkness = 0.5;
    this.shadowMapHeight = this.shadowMapWidth = 512;
    this.shadowMatrix =
        this.shadowCamera = this.shadowMapSize = this.shadowMap = null;
};
THREE.SpotLight.prototype = new THREE.Light;
THREE.SpotLight.prototype.constructor = THREE.SpotLight;
THREE.Loader = function(a) {
    this.statusDomElement = (this.showStatus = a) ? THREE.Loader.prototype.addStatusElement() : null;
    this.onLoadStart = function() {};
    this.onLoadProgress = function() {};
    this.onLoadComplete = function() {};
};
THREE.Loader.prototype = {
    constructor: THREE.Loader,
    crossOrigin: "anonymous",
    addStatusElement: function() {
        var a = document.createElement("div");
        a.style.position = "absolute";
        a.style.right = "0px";
        a.style.top = "0px";
        a.style.fontSize = "0.8em";
        a.style.textAlign = "left";
        a.style.background = "rgba(0,0,0,0.25)";
        a.style.color = "#fff";
        a.style.width = "120px";
        a.style.padding = "0.5em 0.5em 0.5em 0.5em";
        a.style.zIndex = 1E3;
        a.innerHTML = "Loading ...";
        return a
    },
    updateProgress: function(a) {
        var b = "Loaded ",
            b = a.total ? b + ((100 * a.loaded /
                a.total).toFixed(0) + "%") : b + ((a.loaded / 1E3).toFixed(2) + " KB");
        this.statusDomElement.innerHTML = b;
    },
    extractUrlBase: function(a) {
        a = a.split("/");
        a.pop();
        return (a.length < 1 ? "." : a.join("/")) + "/"
    },
    initMaterials: function(a, b, c) {
        a.materials = [];
        for (var d = 0; d < b.length; ++d) a.materials[d] = THREE.Loader.prototype.createMaterial(b[d], c);
    },
    hasNormals: function(a) {
        var b, c, d = a.materials.length;
        for (c = 0; c < d; c++) {
            b = a.materials[c];
            if (b instanceof THREE.ShaderMaterial) return true
        }
        return false
    },
    createMaterial: function(a, b) {
        function c(a) {
            a =
                Math.log(a) / Math.LN2;
            return Math.floor(a) == a
        }

        function d(a) {
            a = Math.log(a) / Math.LN2;
            return Math.pow(2, Math.round(a))
        }

        function e(a, b) {
            var e = new Image;
            e.onload = function() {
                if (!c(this.width) || !c(this.height)) {
                    var b = d(this.width),
                        e = d(this.height);
                    a.image.width = b;
                    a.image.height = e;
                    a.image.getContext("2d").drawImage(this, 0, 0, b, e);
                } else a.image = this;
                a.needsUpdate = true;
            };
            e.crossOrigin = h.crossOrigin;
            e.src = b;
        }

        function f(a, c, d, f, g, h) {
            var j = document.createElement("canvas");
            a[c] = new THREE.Texture(j);
            a[c].sourceFile =
                d;
            if (f) {
                a[c].repeat.set(f[0], f[1]);
                if (f[0] != 1) a[c].wrapS = THREE.RepeatWrapping;
                if (f[1] != 1) a[c].wrapT = THREE.RepeatWrapping;
            }
            g && a[c].offset.set(g[0], g[1]);
            if (h) {
                f = {
                    repeat: THREE.RepeatWrapping,
                    mirror: THREE.MirroredRepeatWrapping
                };
                if (f[h[0]] !== void 0) a[c].wrapS = f[h[0]];
                if (f[h[1]] !== void 0) a[c].wrapT = f[h[1]];
            }
            e(a[c], b + "/" + d);
        }

        function g(a) {
            return (a[0] * 255 << 16) + (a[1] * 255 << 8) + a[2] * 255
        }
        var h = this,
            j = "MeshLambertMaterial",
            l = {
                color: 15658734,
                opacity: 1,
                map: null,
                lightMap: null,
                normalMap: null,
                wireframe: a.wireframe
            };
        if (a.shading) {
            var k = a.shading.toLowerCase();
            k === "phong" ? j = "MeshPhongMaterial" : k === "basic" && (j = "MeshBasicMaterial");
        }
        if (a.blending !== void 0 && THREE[a.blending] !== void 0) l.blending = THREE[a.blending];
        if (a.transparent !== void 0 || a.opacity < 1) l.transparent = a.transparent;
        if (a.depthTest !== void 0) l.depthTest = a.depthTest;
        if (a.depthWrite !== void 0) l.depthWrite = a.depthWrite;
        if (a.vertexColors !== void 0)
            if (a.vertexColors == "face") l.vertexColors = THREE.FaceColors;
            else if (a.vertexColors) l.vertexColors = THREE.VertexColors;
        if (a.colorDiffuse) l.color = g(a.colorDiffuse);
        else if (a.DbgColor) l.color = a.DbgColor;
        if (a.colorSpecular) l.specular = g(a.colorSpecular);
        if (a.colorAmbient) l.ambient = g(a.colorAmbient);
        if (a.transparency) l.opacity = a.transparency;
        if (a.specularCoef) l.shininess = a.specularCoef;
        a.mapDiffuse && b && f(l, "map", a.mapDiffuse, a.mapDiffuseRepeat, a.mapDiffuseOffset, a.mapDiffuseWrap);
        a.mapLight && b && f(l, "lightMap", a.mapLight, a.mapLightRepeat, a.mapLightOffset, a.mapLightWrap);
        a.mapNormal && b && f(l, "normalMap", a.mapNormal, a.mapNormalRepeat,
            a.mapNormalOffset, a.mapNormalWrap);
        a.mapSpecular && b && f(l, "specularMap", a.mapSpecular, a.mapSpecularRepeat, a.mapSpecularOffset, a.mapSpecularWrap);
        if (a.mapNormal) {
            j = THREE.ShaderUtils.lib.normal;
            k = THREE.UniformsUtils.clone(j.uniforms);
            k.tNormal.texture = l.normalMap;
            if (a.mapNormalFactor) k.uNormalScale.value = a.mapNormalFactor;
            if (l.map) {
                k.tDiffuse.texture = l.map;
                k.enableDiffuse.value = true;
            }
            if (l.specularMap) {
                k.tSpecular.texture = l.specularMap;
                k.enableSpecular.value = true;
            }
            if (l.lightMap) {
                k.tAO.texture = l.lightMap;
                k.enableAO.value = true;
            }
            k.uDiffuseColor.value.setHex(l.color);
            k.uSpecularColor.value.setHex(l.specular);
            k.uAmbientColor.value.setHex(l.ambient);
            k.uShininess.value = l.shininess;
            if (l.opacity !== void 0) k.uOpacity.value = l.opacity;
            l = new THREE.ShaderMaterial({
                fragmentShader: j.fragmentShader,
                vertexShader: j.vertexShader,
                uniforms: k,
                lights: true,
                fog: true
            });
        } else l = new THREE[j](l);
        if (a.DbgName !== void 0) l.name = a.DbgName;
        return l
    }
};
THREE.BinaryLoader = function(a) {
    THREE.Loader.call(this, a);
};
THREE.BinaryLoader.prototype = new THREE.Loader;
THREE.BinaryLoader.prototype.constructor = THREE.BinaryLoader;
THREE.BinaryLoader.prototype.load = function(a, b, c, d) {
    var c = c ? c : this.extractUrlBase(a),
        d = d ? d : this.extractUrlBase(a),
        e = this.showProgress ? THREE.Loader.prototype.updateProgress : null;
    this.onLoadStart();
    this.loadAjaxJSON(this, a, b, c, d, e);
};
THREE.BinaryLoader.prototype.loadAjaxJSON = function(a, b, c, d, e, f) {
    var g = new XMLHttpRequest;
    g.onreadystatechange = function() {
        if (g.readyState == 4)
            if (g.status == 200 || g.status == 0) {
                var h = JSON.parse(g.responseText);
                a.loadAjaxBuffers(h, c, e, d, f);
            } else console.error("THREE.BinaryLoader: Couldn't load [" + b + "] [" + g.status + "]");
    };
    g.open("GET", b, true);
    g.overrideMimeType && g.overrideMimeType("text/plain; charset=x-user-defined");
    g.setRequestHeader("Content-Type", "text/plain");
    g.send(null);
};
THREE.BinaryLoader.prototype.loadAjaxBuffers = function(a, b, c, d, e) {
    var f = new XMLHttpRequest,
        g = c + "/" + a.buffers,
        h = 0;
    f.onreadystatechange = function() {
        if (f.readyState == 4) f.status == 200 || f.status == 0 ? THREE.BinaryLoader.prototype.createBinModel(f.response, b, d, a.materials) : console.error("THREE.BinaryLoader: Couldn't load [" + g + "] [" + f.status + "]");
        else if (f.readyState == 3) {
            if (e) {
                h == 0 && (h = f.getResponseHeader("Content-Length"));
                e({
                    total: h,
                    loaded: f.responseText.length
                });
            }
        } else f.readyState == 2 && (h = f.getResponseHeader("Content-Length"));
    };
    f.open("GET", g, true);
    f.responseType = "arraybuffer";
    f.send(null);
};
THREE.BinaryLoader.prototype.createBinModel = function(a, b, c, d) {
    var e = function(b) {
        var c, e, j, l, k, p, m, o, q, n, r, u, t, y, s;

        function w(a) {
            return a % 4 ? 4 - a % 4 : 0
        }

        function H(a, b) {
            return (new Uint8Array(a, b, 1))[0]
        }

        function E(a, b) {
            return (new Uint32Array(a, b, 1))[0]
        }

        function z(b, c) {
            var d, e, f, g, h, i, j, k, l = new Uint32Array(a, c, 3 * b);
            for (d = 0; d < b; d++) {
                e = l[d * 3];
                f = l[d * 3 + 1];
                g = l[d * 3 + 2];
                h = G[e * 2];
                e = G[e * 2 + 1];
                i = G[f * 2];
                j = G[f * 2 + 1];
                f = G[g * 2];
                k = G[g * 2 + 1];
                g = P.faceVertexUvs[0];
                var m = [];
                m.push(new THREE.UV(h, e));
                m.push(new THREE.UV(i, j));
                m.push(new THREE.UV(f,
                    k));
                g.push(m);
            }
        }

        function v(b, c) {
            var d, e, f, g, h, i, j, k, l, m, n = new Uint32Array(a, c, 4 * b);
            for (d = 0; d < b; d++) {
                e = n[d * 4];
                f = n[d * 4 + 1];
                g = n[d * 4 + 2];
                h = n[d * 4 + 3];
                i = G[e * 2];
                e = G[e * 2 + 1];
                j = G[f * 2];
                l = G[f * 2 + 1];
                k = G[g * 2];
                m = G[g * 2 + 1];
                g = G[h * 2];
                f = G[h * 2 + 1];
                h = P.faceVertexUvs[0];
                var o = [];
                o.push(new THREE.UV(i, e));
                o.push(new THREE.UV(j, l));
                o.push(new THREE.UV(k, m));
                o.push(new THREE.UV(g, f));
                h.push(o);
            }
        }

        function A(b, c, d) {
            for (var e, f, g, h, c = new Uint32Array(a, c, 3 * b), i = new Uint16Array(a, d, b), d = 0; d < b; d++) {
                e = c[d * 3];
                f = c[d * 3 + 1];
                g = c[d * 3 + 2];
                h = i[d];
                P.faces.push(new THREE.Face3(e, f, g, null, null, h));
            }
        }

        function J(b, c, d) {
            for (var e, f, g, h, i, c = new Uint32Array(a, c, 4 * b), j = new Uint16Array(a, d, b), d = 0; d < b; d++) {
                e = c[d * 4];
                f = c[d * 4 + 1];
                g = c[d * 4 + 2];
                h = c[d * 4 + 3];
                i = j[d];
                P.faces.push(new THREE.Face4(e, f, g, h, null, null, i));
            }
        }

        function K(b, c, d, e) {
            for (var f, g, h, i, j, k, l, c = new Uint32Array(a, c, 3 * b), d = new Uint32Array(a, d, 3 * b), m = new Uint16Array(a, e, b), e = 0; e < b; e++) {
                f = c[e * 3];
                g = c[e * 3 + 1];
                h = c[e * 3 + 2];
                j = d[e * 3];
                k = d[e * 3 + 1];
                l = d[e * 3 + 2];
                i = m[e];
                var n = M[k * 3],
                    o = M[k * 3 + 1];
                k = M[k * 3 + 2];
                var p = M[l * 3],
                    q = M[l * 3 + 1];
                l = M[l * 3 + 2];
                P.faces.push(new THREE.Face3(f, g, h, [new THREE.Vector3(M[j * 3], M[j * 3 + 1], M[j * 3 + 2]), new THREE.Vector3(n, o, k), new THREE.Vector3(p, q, l)], null, i));
            }
        }

        function R(b, c, d, e) {
            for (var f, g, h, i, j, k, l, m, n, c = new Uint32Array(a, c, 4 * b), d = new Uint32Array(a, d, 4 * b), o = new Uint16Array(a, e, b), e = 0; e < b; e++) {
                f = c[e * 4];
                g = c[e * 4 + 1];
                h = c[e * 4 + 2];
                i = c[e * 4 + 3];
                k = d[e * 4];
                l = d[e * 4 + 1];
                m = d[e * 4 + 2];
                n = d[e * 4 + 3];
                j = o[e];
                var p = M[l * 3],
                    q = M[l * 3 + 1];
                l = M[l * 3 + 2];
                var r = M[m * 3],
                    s = M[m * 3 + 1];
                m = M[m * 3 + 2];
                var t = M[n * 3],
                    u = M[n * 3 + 1];
                n = M[n * 3 + 2];
                P.faces.push(new THREE.Face4(f,
                    g, h, i, [new THREE.Vector3(M[k * 3], M[k * 3 + 1], M[k * 3 + 2]), new THREE.Vector3(p, q, l), new THREE.Vector3(r, s, m), new THREE.Vector3(t, u, n)], null, j));
            }
        }
        var P = this,
            D = 0,
            M = [],
            G = [],
            i, T, U;
        THREE.Geometry.call(this);
        THREE.Loader.prototype.initMaterials(P, d, b);
        (function(a, b, c) {
            for (var a = new Uint8Array(a, b, c), d = "", e = 0; e < c; e++) d = d + String.fromCharCode(a[b + e]);
            return d
        })(a, D, 12);
        c = H(a, D + 12);
        H(a, D + 13);
        H(a, D + 14);
        H(a, D + 15);
        e = H(a, D + 16);
        j = H(a, D + 17);
        l = H(a, D + 18);
        k = H(a, D + 19);
        p = E(a, D + 20);
        m = E(a, D + 20 + 4);
        o = E(a, D + 20 + 8);
        b = E(a, D + 20 + 12);
        q =
            E(a, D + 20 + 16);
        n = E(a, D + 20 + 20);
        r = E(a, D + 20 + 24);
        u = E(a, D + 20 + 28);
        t = E(a, D + 20 + 32);
        y = E(a, D + 20 + 36);
        s = E(a, D + 20 + 40);
        D = D + c;
        c = e * 3 + k;
        U = e * 4 + k;
        i = b * c;
        T = q * (c + j * 3);
        e = n * (c + l * 3);
        k = r * (c + j * 3 + l * 3);
        c = u * U;
        j = t * (U + j * 4);
        l = y * (U + l * 4);
        D = D + function(b) {
            var b = new Float32Array(a, b, p * 3),
                c, d, e, f;
            for (c = 0; c < p; c++) {
                d = b[c * 3];
                e = b[c * 3 + 1];
                f = b[c * 3 + 2];
                P.vertices.push(new THREE.Vector3(d, e, f));
            }
            return p * 3 * Float32Array.BYTES_PER_ELEMENT
        }(D);
        D = D + function(b) {
            if (m) {
                var b = new Int8Array(a, b, m * 3),
                    c, d, e, f;
                for (c = 0; c < m; c++) {
                    d = b[c * 3];
                    e = b[c * 3 + 1];
                    f = b[c * 3 + 2];
                    M.push(d /
                        127, e / 127, f / 127);
                }
            }
            return m * 3 * Int8Array.BYTES_PER_ELEMENT
        }(D);
        D = D + w(m * 3);
        D = D + function(b) {
            if (o) {
                var b = new Float32Array(a, b, o * 2),
                    c, d, e;
                for (c = 0; c < o; c++) {
                    d = b[c * 2];
                    e = b[c * 2 + 1];
                    G.push(d, e);
                }
            }
            return o * 2 * Float32Array.BYTES_PER_ELEMENT
        }(D);
        i = D + i + w(b * 2);
        T = i + T + w(q * 2);
        e = T + e + w(n * 2);
        k = e + k + w(r * 2);
        c = k + c + w(u * 2);
        j = c + j + w(t * 2);
        l = j + l + w(y * 2);
        (function(a) {
            if (n) {
                var b = a + n * Uint32Array.BYTES_PER_ELEMENT * 3;
                A(n, a, b + n * Uint32Array.BYTES_PER_ELEMENT * 3);
                z(n, b);
            }
        })(T);
        (function(a) {
            if (r) {
                var b = a + r * Uint32Array.BYTES_PER_ELEMENT * 3,
                    c = b +
                    r * Uint32Array.BYTES_PER_ELEMENT * 3;
                K(r, a, b, c + r * Uint32Array.BYTES_PER_ELEMENT * 3);
                z(r, c);
            }
        })(e);
        (function(a) {
            if (y) {
                var b = a + y * Uint32Array.BYTES_PER_ELEMENT * 4;
                J(y, a, b + y * Uint32Array.BYTES_PER_ELEMENT * 4);
                v(y, b);
            }
        })(j);
        (function(a) {
            if (s) {
                var b = a + s * Uint32Array.BYTES_PER_ELEMENT * 4,
                    c = b + s * Uint32Array.BYTES_PER_ELEMENT * 4;
                R(s, a, b, c + s * Uint32Array.BYTES_PER_ELEMENT * 4);
                v(s, c);
            }
        })(l);
        b && A(b, D, D + b * Uint32Array.BYTES_PER_ELEMENT * 3);
        (function(a) {
            if (q) {
                var b = a + q * Uint32Array.BYTES_PER_ELEMENT * 3;
                K(q, a, b, b + q * Uint32Array.BYTES_PER_ELEMENT *
                    3);
            }
        })(i);
        u && J(u, k, k + u * Uint32Array.BYTES_PER_ELEMENT * 4);
        (function(a) {
            if (t) {
                var b = a + t * Uint32Array.BYTES_PER_ELEMENT * 4;
                R(t, a, b, b + t * Uint32Array.BYTES_PER_ELEMENT * 4);
            }
        })(c);
        this.computeCentroids();
        this.computeFaceNormals();
        THREE.Loader.prototype.hasNormals(this) && this.computeTangents();
    };
    e.prototype = new THREE.Geometry;
    e.prototype.constructor = e;
    b(new e(c));
};
THREE.JSONLoader = function(a) {
    THREE.Loader.call(this, a);
};
THREE.JSONLoader.prototype = new THREE.Loader;
THREE.JSONLoader.prototype.constructor = THREE.JSONLoader;
THREE.JSONLoader.prototype.load = function(a, b, c) {
    c = c ? c : this.extractUrlBase(a);
    this.onLoadStart();
    this.loadAjaxJSON(this, a, b, c);
};
THREE.JSONLoader.prototype.loadAjaxJSON = function(a, b, c, d, e) {
    var f = new XMLHttpRequest,
        g = 0;
    f.onreadystatechange = function() {
        if (f.readyState === f.DONE)
            if (f.status === 200 || f.status === 0) {
                if (f.responseText) {
                    var h = JSON.parse(f.responseText);
                    a.createModel(h, c, d);
                } else console.warn("THREE.JSONLoader: [" + b + "] seems to be unreachable or file there is empty");
                a.onLoadComplete();
            } else console.error("THREE.JSONLoader: Couldn't load [" + b + "] [" + f.status + "]");
        else if (f.readyState === f.LOADING) {
            if (e) {
                g === 0 && (g = f.getResponseHeader("Content-Length"));
                e({
                    total: g,
                    loaded: f.responseText.length
                });
            }
        } else f.readyState === f.HEADERS_RECEIVED && (g = f.getResponseHeader("Content-Length"));
    };
    f.open("GET", b, true);
    f.overrideMimeType && f.overrideMimeType("text/plain; charset=x-user-defined");
    f.setRequestHeader("Content-Type", "text/plain");
    f.send(null);
};
THREE.JSONLoader.prototype.createModel = function(a, b, c) {
    var d = new THREE.Geometry,
        e = a.scale !== void 0 ? 1 / a.scale : 1;
    this.initMaterials(d, a.materials, c);
    (function(b) {
        var c, e, j, l, k, p, m, o, q, n, r, u, t, y, s = a.faces;
        p = a.vertices;
        var w = a.normals,
            H = a.colors,
            E = 0;
        for (c = 0; c < a.uvs.length; c++) a.uvs[c].length && E++;
        for (c = 0; c < E; c++) {
            d.faceUvs[c] = [];
            d.faceVertexUvs[c] = [];
        }
        l = 0;
        for (k = p.length; l < k;) {
            m = new THREE.Vector3;
            m.x = p[l++] * b;
            m.y = p[l++] * b;
            m.z = p[l++] * b;
            d.vertices.push(m);
        }
        l = 0;
        for (k = s.length; l < k;) {
            b = s[l++];
            p = b & 1;
            j = b & 2;
            c = b &
                4;
            e = b & 8;
            o = b & 16;
            m = b & 32;
            n = b & 64;
            b = b & 128;
            if (p) {
                r = new THREE.Face4;
                r.a = s[l++];
                r.b = s[l++];
                r.c = s[l++];
                r.d = s[l++];
                p = 4;
            } else {
                r = new THREE.Face3;
                r.a = s[l++];
                r.b = s[l++];
                r.c = s[l++];
                p = 3;
            }
            if (j) {
                j = s[l++];
                r.materialIndex = j;
            }
            j = d.faces.length;
            if (c)
                for (c = 0; c < E; c++) {
                    u = a.uvs[c];
                    q = s[l++];
                    y = u[q * 2];
                    q = u[q * 2 + 1];
                    d.faceUvs[c][j] = new THREE.UV(y, q);
                }
            if (e)
                for (c = 0; c < E; c++) {
                    u = a.uvs[c];
                    t = [];
                    for (e = 0; e < p; e++) {
                        q = s[l++];
                        y = u[q * 2];
                        q = u[q * 2 + 1];
                        t[e] = new THREE.UV(y, q);
                    }
                    d.faceVertexUvs[c][j] = t;
                }
            if (o) {
                o = s[l++] * 3;
                e = new THREE.Vector3;
                e.x = w[o++];
                e.y = w[o++];
                e.z = w[o];
                r.normal = e;
            }
            if (m)
                for (c = 0; c < p; c++) {
                    o = s[l++] * 3;
                    e = new THREE.Vector3;
                    e.x = w[o++];
                    e.y = w[o++];
                    e.z = w[o];
                    r.vertexNormals.push(e);
                }
            if (n) {
                m = s[l++];
                m = new THREE.Color(H[m]);
                r.color = m;
            }
            if (b)
                for (c = 0; c < p; c++) {
                    m = s[l++];
                    m = new THREE.Color(H[m]);
                    r.vertexColors.push(m);
                }
            d.faces.push(r);
        }
    })(e);
    (function() {
        var b, c, e, j;
        if (a.skinWeights) {
            b = 0;
            for (c = a.skinWeights.length; b < c; b = b + 2) {
                e = a.skinWeights[b];
                j = a.skinWeights[b + 1];
                d.skinWeights.push(new THREE.Vector4(e, j, 0, 0));
            }
        }
        if (a.skinIndices) {
            b = 0;
            for (c = a.skinIndices.length; b < c; b =
                b + 2) {
                e = a.skinIndices[b];
                j = a.skinIndices[b + 1];
                d.skinIndices.push(new THREE.Vector4(e, j, 0, 0));
            }
        }
        d.bones = a.bones;
        d.animation = a.animation;
    })();
    (function(b) {
        if (a.morphTargets !== void 0) {
            var c, e, j, l, k, p;
            c = 0;
            for (e = a.morphTargets.length; c < e; c++) {
                d.morphTargets[c] = {};
                d.morphTargets[c].name = a.morphTargets[c].name;
                d.morphTargets[c].vertices = [];
                k = d.morphTargets[c].vertices;
                p = a.morphTargets[c].vertices;
                j = 0;
                for (l = p.length; j < l; j = j + 3) {
                    var m = new THREE.Vector3;
                    m.x = p[j] * b;
                    m.y = p[j + 1] * b;
                    m.z = p[j + 2] * b;
                    k.push(m);
                }
            }
        }
        if (a.morphColors !==
            void 0) {
            c = 0;
            for (e = a.morphColors.length; c < e; c++) {
                d.morphColors[c] = {};
                d.morphColors[c].name = a.morphColors[c].name;
                d.morphColors[c].colors = [];
                l = d.morphColors[c].colors;
                k = a.morphColors[c].colors;
                b = 0;
                for (j = k.length; b < j; b = b + 3) {
                    p = new THREE.Color(16755200);
                    p.setRGB(k[b], k[b + 1], k[b + 2]);
                    l.push(p);
                }
            }
        }
    })(e);
    d.computeCentroids();
    d.computeFaceNormals();
    this.hasNormals(d) && d.computeTangents();
    b(d);
};
THREE.SceneLoader = function() {
    this.onLoadStart = function() {};
    this.onLoadProgress = function() {};
    this.onLoadComplete = function() {};
    this.callbackSync = function() {};
    this.callbackProgress = function() {};
};
THREE.SceneLoader.prototype.constructor = THREE.SceneLoader;
THREE.SceneLoader.prototype.load = function(a, b) {
    var c = this,
        d = new XMLHttpRequest;
    d.onreadystatechange = function() {
        if (d.readyState == 4)
            if (d.status == 200 || d.status == 0) {
                var e = JSON.parse(d.responseText);
                c.createScene(e, b, a);
            } else console.error("THREE.SceneLoader: Couldn't load [" + a + "] [" + d.status + "]");
    };
    d.open("GET", a, true);
    d.overrideMimeType && d.overrideMimeType("text/plain; charset=x-user-defined");
    d.setRequestHeader("Content-Type", "text/plain");
    d.send(null);
};
THREE.SceneLoader.prototype.createScene = function(a, b, c) {
    function d(a, b) {
        return b == "relativeToHTML" ? a : l + "/" + a
    }

    function e() {
        var a;
        for (m in D.objects)
            if (!C.objects[m]) {
                u = D.objects[m];
                if (u.geometry !== void 0) {
                    if (J = C.geometries[u.geometry]) {
                        a = false;
                        K = C.materials[u.materials[0]];
                        (a = K instanceof THREE.ShaderMaterial) && J.computeTangents();
                        w = u.position;
                        H = u.rotation;
                        E = u.quaternion;
                        z = u.scale;
                        t = u.matrix;
                        E = 0;
                        u.materials.length == 0 && (K = new THREE.MeshFaceMaterial);
                        u.materials.length > 1 && (K = new THREE.MeshFaceMaterial);
                        a = new THREE.Mesh(J, K);
                        a.name = m;
                        if (t) {
                            a.matrixAutoUpdate = false;
                            a.matrix.set(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15]);
                        } else {
                            a.position.set(w[0], w[1], w[2]);
                            if (E) {
                                a.quaternion.set(E[0], E[1], E[2], E[3]);
                                a.useQuaternion = true;
                            } else a.rotation.set(H[0], H[1], H[2]);
                            a.scale.set(z[0], z[1], z[2]);
                        }
                        a.visible = u.visible;
                        a.doubleSided = u.doubleSided;
                        a.castShadow = u.castShadow;
                        a.receiveShadow = u.receiveShadow;
                        C.scene.add(a);
                        C.objects[m] = a;
                    }
                } else {
                    w = u.position;
                    H = u.rotation;
                    E = u.quaternion;
                    z = u.scale;
                    E = 0;
                    a = new THREE.Object3D;
                    a.name = m;
                    a.position.set(w[0], w[1], w[2]);
                    if (E) {
                        a.quaternion.set(E[0], E[1], E[2], E[3]);
                        a.useQuaternion = true;
                    } else a.rotation.set(H[0], H[1], H[2]);
                    a.scale.set(z[0], z[1], z[2]);
                    a.visible = u.visible !== void 0 ? u.visible : false;
                    C.scene.add(a);
                    C.objects[m] = a;
                    C.empties[m] = a;
                }
            }
    }

    function f(a) {
        return function(b) {
            C.geometries[a] = b;
            e();
            G = G - 1;
            j.onLoadComplete();
            h();
        }
    }

    function g(a) {
        return function(b) {
            C.geometries[a] = b;
        }
    }

    function h() {
        j.callbackProgress({
            totalModels: T,
            totalTextures: U,
            loadedModels: T -
                G,
            loadedTextures: U - i
        }, C);
        j.onLoadProgress();
        G == 0 && i == 0 && b(C);
    }
    var j = this,
        l = THREE.Loader.prototype.extractUrlBase(c),
        k, p, m, o, q, n, r, u, t, y, s, w, H, E, z, v, A, J, K, R, P, D, M, G, i, T, U, C;
    D = a;
    c = new THREE.BinaryLoader;
    M = new THREE.JSONLoader;
    i = G = 0;
    C = {
        scene: new THREE.Scene,
        geometries: {},
        materials: {},
        textures: {},
        objects: {},
        cameras: {},
        lights: {},
        fogs: {},
        empties: {}
    };
    if (D.transform) {
        a = D.transform.position;
        y = D.transform.rotation;
        v = D.transform.scale;
        a && C.scene.position.set(a[0], a[1], a[2]);
        y && C.scene.rotation.set(y[0], y[1],
            y[2]);
        v && C.scene.scale.set(v[0], v[1], v[2]);
        if (a || y || v) {
            C.scene.updateMatrix();
            C.scene.updateMatrixWorld();
        }
    }
    a = function() {
        i = i - 1;
        h();
        j.onLoadComplete();
    };
    for (q in D.cameras) {
        v = D.cameras[q];
        v.type == "perspective" ? R = new THREE.PerspectiveCamera(v.fov, v.aspect, v.near, v.far) : v.type == "ortho" && (R = new THREE.OrthographicCamera(v.left, v.right, v.top, v.bottom, v.near, v.far));
        w = v.position;
        y = v.target;
        v = v.up;
        R.position.set(w[0], w[1], w[2]);
        R.target = new THREE.Vector3(y[0], y[1], y[2]);
        v && R.up.set(v[0], v[1], v[2]);
        C.cameras[q] =
            R;
    }
    for (o in D.lights) {
        y = D.lights[o];
        q = y.color !== void 0 ? y.color : 16777215;
        R = y.intensity !== void 0 ? y.intensity : 1;
        if (y.type == "directional") {
            w = y.direction;
            s = new THREE.DirectionalLight(q, R);
            s.position.set(w[0], w[1], w[2]);
            s.position.normalize();
        } else if (y.type == "point") {
            w = y.position;
            s = y.distance;
            s = new THREE.PointLight(q, R, s);
            s.position.set(w[0], w[1], w[2]);
        } else y.type == "ambient" && (s = new THREE.AmbientLight(q));
        C.scene.add(s);
        C.lights[o] = s;
    }
    for (n in D.fogs) {
        o = D.fogs[n];
        o.type == "linear" ? P = new THREE.Fog(0, o.near,
            o.far) : o.type == "exp2" && (P = new THREE.FogExp2(0, o.density));
        v = o.color;
        P.color.setRGB(v[0], v[1], v[2]);
        C.fogs[n] = P;
    }
    if (C.cameras && D.defaults.camera) C.currentCamera = C.cameras[D.defaults.camera];
    if (C.fogs && D.defaults.fog) C.scene.fog = C.fogs[D.defaults.fog];
    v = D.defaults.bgcolor;
    C.bgColor = new THREE.Color;
    C.bgColor.setRGB(v[0], v[1], v[2]);
    C.bgColorAlpha = D.defaults.bgalpha;
    for (k in D.geometries) {
        n = D.geometries[k];
        if (n.type == "bin_mesh" || n.type == "ascii_mesh") {
            G = G + 1;
            j.onLoadStart();
        }
    }
    T = G;
    for (k in D.geometries) {
        n =
            D.geometries[k];
        if (n.type == "cube") {
            J = new THREE.CubeGeometry(n.width, n.height, n.depth, n.segmentsWidth, n.segmentsHeight, n.segmentsDepth, null, n.flipped, n.sides);
            C.geometries[k] = J;
        } else if (n.type == "plane") {
            J = new THREE.PlaneGeometry(n.width, n.height, n.segmentsWidth, n.segmentsHeight);
            C.geometries[k] = J;
        } else if (n.type == "sphere") {
            J = new THREE.SphereGeometry(n.radius, n.segmentsWidth, n.segmentsHeight);
            C.geometries[k] = J;
        } else if (n.type == "cylinder") {
            J = new THREE.CylinderGeometry(n.topRad, n.botRad, n.height, n.radSegs,
                n.heightSegs);
            C.geometries[k] = J;
        } else if (n.type == "torus") {
            J = new THREE.TorusGeometry(n.radius, n.tube, n.segmentsR, n.segmentsT);
            C.geometries[k] = J;
        } else if (n.type == "icosahedron") {
            J = new THREE.IcosahedronGeometry(n.radius, n.subdivisions);
            C.geometries[k] = J;
        } else if (n.type == "bin_mesh") c.load(d(n.url, D.urlBaseType), f(k));
        else if (n.type == "ascii_mesh") M.load(d(n.url, D.urlBaseType), f(k));
        else if (n.type == "embedded_mesh") {
            n = D.embeds[n.id];
            n.metadata = D.metadata;
            n && M.createModel(n, g(k), "");
        }
    }
    for (r in D.textures) {
        k = D.textures[r];
        if (k.url instanceof Array) {
            i = i + k.url.length;
            for (n = 0; n < k.url.length; n++) j.onLoadStart();
        } else {
            i = i + 1;
            j.onLoadStart();
        }
    }
    U = i;
    for (r in D.textures) {
        k = D.textures[r];
        if (k.mapping != void 0 && THREE[k.mapping] != void 0) k.mapping = new THREE[k.mapping];
        if (k.url instanceof Array) {
            n = [];
            for (P = 0; P < k.url.length; P++) n[P] = d(k.url[P], D.urlBaseType);
            n = THREE.ImageUtils.loadTextureCube(n, k.mapping, a);
        } else {
            n = THREE.ImageUtils.loadTexture(d(k.url, D.urlBaseType), k.mapping, a);
            if (THREE[k.minFilter] != void 0) n.minFilter = THREE[k.minFilter];
            if (THREE[k.magFilter] != void 0) n.magFilter = THREE[k.magFilter];
            if (k.repeat) {
                n.repeat.set(k.repeat[0], k.repeat[1]);
                if (k.repeat[0] != 1) n.wrapS = THREE.RepeatWrapping;
                if (k.repeat[1] != 1) n.wrapT = THREE.RepeatWrapping;
            }
            k.offset && n.offset.set(k.offset[0], k.offset[1]);
            if (k.wrap) {
                P = {
                    repeat: THREE.RepeatWrapping,
                    mirror: THREE.MirroredRepeatWrapping
                };
                if (P[k.wrap[0]] !== void 0) n.wrapS = P[k.wrap[0]];
                if (P[k.wrap[1]] !== void 0) n.wrapT = P[k.wrap[1]];
            }
        }
        C.textures[r] = n;
    }
    for (p in D.materials) {
        t = D.materials[p];
        for (A in t.parameters)
            if (A ==
                "envMap" || A == "map" || A == "lightMap") t.parameters[A] = C.textures[t.parameters[A]];
            else if (A == "shading") t.parameters[A] = t.parameters[A] == "flat" ? THREE.FlatShading : THREE.SmoothShading;
        else if (A == "blending") t.parameters[A] = THREE[t.parameters[A]] ? THREE[t.parameters[A]] : THREE.NormalBlending;
        else if (A == "combine") t.parameters[A] = t.parameters[A] == "MixOperation" ? THREE.MixOperation : THREE.MultiplyOperation;
        else if (A == "vertexColors")
            if (t.parameters[A] == "face") t.parameters[A] = THREE.FaceColors;
            else if (t.parameters[A]) t.parameters[A] =
            THREE.VertexColors;
        if (t.parameters.opacity !== void 0 && t.parameters.opacity < 1) t.parameters.transparent = true;
        if (t.parameters.normalMap) {
            r = THREE.ShaderUtils.lib.normal;
            a = THREE.UniformsUtils.clone(r.uniforms);
            k = t.parameters.color;
            n = t.parameters.specular;
            P = t.parameters.ambient;
            c = t.parameters.shininess;
            a.tNormal.texture = C.textures[t.parameters.normalMap];
            if (t.parameters.normalMapFactor) a.uNormalScale.value = t.parameters.normalMapFactor;
            if (t.parameters.map) {
                a.tDiffuse.texture = t.parameters.map;
                a.enableDiffuse.value =
                    true;
            }
            if (t.parameters.lightMap) {
                a.tAO.texture = t.parameters.lightMap;
                a.enableAO.value = true;
            }
            if (t.parameters.specularMap) {
                a.tSpecular.texture = C.textures[t.parameters.specularMap];
                a.enableSpecular.value = true;
            }
            a.uDiffuseColor.value.setHex(k);
            a.uSpecularColor.value.setHex(n);
            a.uAmbientColor.value.setHex(P);
            a.uShininess.value = c;
            if (t.parameters.opacity) a.uOpacity.value = t.parameters.opacity;
            K = new THREE.ShaderMaterial({
                fragmentShader: r.fragmentShader,
                vertexShader: r.vertexShader,
                uniforms: a,
                lights: true,
                fog: true
            });
        } else K =
            new THREE[t.type](t.parameters);
        C.materials[p] = K;
    }
    e();
    j.callbackSync(C);
    h();
};
THREE.Material = function(a) {
    a = a || {};
    this.id = THREE.MaterialCount++;
    this.name = "";
    this.opacity = a.opacity !== void 0 ? a.opacity : 1;
    this.transparent = a.transparent !== void 0 ? a.transparent : false;
    this.blending = a.blending !== void 0 ? a.blending : THREE.NormalBlending;
    this.blendSrc = a.blendSrc !== void 0 ? a.blendSrc : THREE.SrcAlphaFactor;
    this.blendDst = a.blendDst !== void 0 ? a.blendDst : THREE.OneMinusSrcAlphaFactor;
    this.blendEquation = a.blendEquation !== void 0 ? a.blendEquation : THREE.AddEquation;
    this.depthTest = a.depthTest !== void 0 ?
        a.depthTest : true;
    this.depthWrite = a.depthWrite !== void 0 ? a.depthWrite : true;
    this.polygonOffset = a.polygonOffset !== void 0 ? a.polygonOffset : false;
    this.polygonOffsetFactor = a.polygonOffsetFactor !== void 0 ? a.polygonOffsetFactor : 0;
    this.polygonOffsetUnits = a.polygonOffsetUnits !== void 0 ? a.polygonOffsetUnits : 0;
    this.alphaTest = a.alphaTest !== void 0 ? a.alphaTest : 0;
    this.overdraw = a.overdraw !== void 0 ? a.overdraw : false;
    this.needsUpdate = this.visible = true;
};
THREE.MaterialCount = 0;
THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;
THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;
THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.AdditiveAlphaBlending = 5;
THREE.CustomBlending = 6;
THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;
THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;
THREE.LineBasicMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.color = a.color !== void 0 ? new THREE.Color(a.color) : new THREE.Color(16777215);
    this.linewidth = a.linewidth !== void 0 ? a.linewidth : 1;
    this.linecap = a.linecap !== void 0 ? a.linecap : "round";
    this.linejoin = a.linejoin !== void 0 ? a.linejoin : "round";
    this.vertexColors = a.vertexColors ? a.vertexColors : false;
    this.fog = a.fog !== void 0 ? a.fog : true;
};
THREE.LineBasicMaterial.prototype = new THREE.Material;
THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;
THREE.MeshBasicMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.color = a.color !== void 0 ? new THREE.Color(a.color) : new THREE.Color(16777215);
    this.map = a.map !== void 0 ? a.map : null;
    this.lightMap = a.lightMap !== void 0 ? a.lightMap : null;
    this.envMap = a.envMap !== void 0 ? a.envMap : null;
    this.combine = a.combine !== void 0 ? a.combine : THREE.MultiplyOperation;
    this.reflectivity = a.reflectivity !== void 0 ? a.reflectivity : 1;
    this.refractionRatio = a.refractionRatio !== void 0 ? a.refractionRatio : 0.98;
    this.fog = a.fog !== void 0 ? a.fog :
        true;
    this.shading = a.shading !== void 0 ? a.shading : THREE.SmoothShading;
    this.wireframe = a.wireframe !== void 0 ? a.wireframe : false;
    this.wireframeLinewidth = a.wireframeLinewidth !== void 0 ? a.wireframeLinewidth : 1;
    this.wireframeLinecap = a.wireframeLinecap !== void 0 ? a.wireframeLinecap : "round";
    this.wireframeLinejoin = a.wireframeLinejoin !== void 0 ? a.wireframeLinejoin : "round";
    this.vertexColors = a.vertexColors !== void 0 ? a.vertexColors : THREE.NoColors;
    this.skinning = a.skinning !== void 0 ? a.skinning : false;
    this.morphTargets = a.morphTargets !==
        void 0 ? a.morphTargets : false;
};
THREE.MeshBasicMaterial.prototype = new THREE.Material;
THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;
THREE.MeshLambertMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.color = a.color !== void 0 ? new THREE.Color(a.color) : new THREE.Color(16777215);
    this.ambient = a.ambient !== void 0 ? new THREE.Color(a.ambient) : new THREE.Color(16777215);
    this.emissive = a.emissive !== void 0 ? new THREE.Color(a.emissive) : new THREE.Color(0);
    this.wrapAround = a.wrapAround !== void 0 ? a.wrapAround : false;
    this.wrapRGB = new THREE.Vector3(1, 1, 1);
    this.map = a.map !== void 0 ? a.map : null;
    this.lightMap = a.lightMap !== void 0 ? a.lightMap : null;
    this.envMap =
        a.envMap !== void 0 ? a.envMap : null;
    this.combine = a.combine !== void 0 ? a.combine : THREE.MultiplyOperation;
    this.reflectivity = a.reflectivity !== void 0 ? a.reflectivity : 1;
    this.refractionRatio = a.refractionRatio !== void 0 ? a.refractionRatio : 0.98;
    this.fog = a.fog !== void 0 ? a.fog : true;
    this.shading = a.shading !== void 0 ? a.shading : THREE.SmoothShading;
    this.wireframe = a.wireframe !== void 0 ? a.wireframe : false;
    this.wireframeLinewidth = a.wireframeLinewidth !== void 0 ? a.wireframeLinewidth : 1;
    this.wireframeLinecap = a.wireframeLinecap !== void 0 ?
        a.wireframeLinecap : "round";
    this.wireframeLinejoin = a.wireframeLinejoin !== void 0 ? a.wireframeLinejoin : "round";
    this.vertexColors = a.vertexColors !== void 0 ? a.vertexColors : THREE.NoColors;
    this.skinning = a.skinning !== void 0 ? a.skinning : false;
    this.morphTargets = a.morphTargets !== void 0 ? a.morphTargets : false;
    this.morphNormals = a.morphNormals !== void 0 ? a.morphNormals : false;
};
THREE.MeshLambertMaterial.prototype = new THREE.Material;
THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;
THREE.MeshPhongMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.color = a.color !== void 0 ? new THREE.Color(a.color) : new THREE.Color(16777215);
    this.ambient = a.ambient !== void 0 ? new THREE.Color(a.ambient) : new THREE.Color(16777215);
    this.emissive = a.emissive !== void 0 ? new THREE.Color(a.emissive) : new THREE.Color(0);
    this.specular = a.specular !== void 0 ? new THREE.Color(a.specular) : new THREE.Color(1118481);
    this.shininess = a.shininess !== void 0 ? a.shininess : 30;
    this.metal = a.metal !== void 0 ? a.metal : false;
    this.perPixel =
        a.perPixel !== void 0 ? a.perPixel : false;
    this.wrapAround = a.wrapAround !== void 0 ? a.wrapAround : false;
    this.wrapRGB = new THREE.Vector3(1, 1, 1);
    this.map = a.map !== void 0 ? a.map : null;
    this.lightMap = a.lightMap !== void 0 ? a.lightMap : null;
    this.envMap = a.envMap !== void 0 ? a.envMap : null;
    this.combine = a.combine !== void 0 ? a.combine : THREE.MultiplyOperation;
    this.reflectivity = a.reflectivity !== void 0 ? a.reflectivity : 1;
    this.refractionRatio = a.refractionRatio !== void 0 ? a.refractionRatio : 0.98;
    this.fog = a.fog !== void 0 ? a.fog : true;
    this.shading =
        a.shading !== void 0 ? a.shading : THREE.SmoothShading;
    this.wireframe = a.wireframe !== void 0 ? a.wireframe : false;
    this.wireframeLinewidth = a.wireframeLinewidth !== void 0 ? a.wireframeLinewidth : 1;
    this.wireframeLinecap = a.wireframeLinecap !== void 0 ? a.wireframeLinecap : "round";
    this.wireframeLinejoin = a.wireframeLinejoin !== void 0 ? a.wireframeLinejoin : "round";
    this.vertexColors = a.vertexColors !== void 0 ? a.vertexColors : THREE.NoColors;
    this.skinning = a.skinning !== void 0 ? a.skinning : false;
    this.morphTargets = a.morphTargets !== void 0 ?
        a.morphTargets : false;
    this.morphNormals = a.morphNormals !== void 0 ? a.morphNormals : false;
};
THREE.MeshPhongMaterial.prototype = new THREE.Material;
THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;
THREE.MeshDepthMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.shading = a.shading !== void 0 ? a.shading : THREE.SmoothShading;
    this.wireframe = a.wireframe !== void 0 ? a.wireframe : false;
    this.wireframeLinewidth = a.wireframeLinewidth !== void 0 ? a.wireframeLinewidth : 1;
};
THREE.MeshDepthMaterial.prototype = new THREE.Material;
THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;
THREE.MeshNormalMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.shading = a.shading ? a.shading : THREE.FlatShading;
    this.wireframe = a.wireframe ? a.wireframe : false;
    this.wireframeLinewidth = a.wireframeLinewidth ? a.wireframeLinewidth : 1;
};
THREE.MeshNormalMaterial.prototype = new THREE.Material;
THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;
THREE.MeshFaceMaterial = function() {};
THREE.ParticleBasicMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.color = a.color !== void 0 ? new THREE.Color(a.color) : new THREE.Color(16777215);
    this.map = a.map !== void 0 ? a.map : null;
    this.size = a.size !== void 0 ? a.size : 1;
    this.sizeAttenuation = a.sizeAttenuation !== void 0 ? a.sizeAttenuation : true;
    this.vertexColors = a.vertexColors !== void 0 ? a.vertexColors : false;
    this.fog = a.fog !== void 0 ? a.fog : true;
};
THREE.ParticleBasicMaterial.prototype = new THREE.Material;
THREE.ParticleBasicMaterial.prototype.constructor = THREE.ParticleBasicMaterial;
THREE.ParticleCanvasMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.color = a.color !== void 0 ? new THREE.Color(a.color) : new THREE.Color(16777215);
    this.program = a.program !== void 0 ? a.program : function() {};
};
THREE.ParticleCanvasMaterial.prototype = new THREE.Material;
THREE.ParticleCanvasMaterial.prototype.constructor = THREE.ParticleCanvasMaterial;
THREE.ParticleDOMMaterial = function(a) {
    THREE.Material.call(this);
    this.domElement = a;
};
THREE.ShaderMaterial = function(a) {
    THREE.Material.call(this, a);
    a = a || {};
    this.fragmentShader = a.fragmentShader !== void 0 ? a.fragmentShader : "void main() {}";
    this.vertexShader = a.vertexShader !== void 0 ? a.vertexShader : "void main() {}";
    this.uniforms = a.uniforms !== void 0 ? a.uniforms : {};
    this.attributes = a.attributes;
    this.shading = a.shading !== void 0 ? a.shading : THREE.SmoothShading;
    this.wireframe = a.wireframe !== void 0 ? a.wireframe : false;
    this.wireframeLinewidth = a.wireframeLinewidth !== void 0 ? a.wireframeLinewidth : 1;
    this.fog =
        a.fog !== void 0 ? a.fog : false;
    this.lights = a.lights !== void 0 ? a.lights : false;
    this.vertexColors = a.vertexColors !== void 0 ? a.vertexColors : THREE.NoColors;
    this.skinning = a.skinning !== void 0 ? a.skinning : false;
    this.morphTargets = a.morphTargets !== void 0 ? a.morphTargets : false;
    this.morphNormals = a.morphNormals !== void 0 ? a.morphNormals : false;
};
THREE.ShaderMaterial.prototype = new THREE.Material;
THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;
THREE.Texture = function(a, b, c, d, e, f, g, h) {
    this.id = THREE.TextureCount++;
    this.image = a;
    this.mapping = b !== void 0 ? b : new THREE.UVMapping;
    this.wrapS = c !== void 0 ? c : THREE.ClampToEdgeWrapping;
    this.wrapT = d !== void 0 ? d : THREE.ClampToEdgeWrapping;
    this.magFilter = e !== void 0 ? e : THREE.LinearFilter;
    this.minFilter = f !== void 0 ? f : THREE.LinearMipMapLinearFilter;
    this.format = g !== void 0 ? g : THREE.RGBAFormat;
    this.type = h !== void 0 ? h : THREE.UnsignedByteType;
    this.offset = new THREE.Vector2(0, 0);
    this.repeat = new THREE.Vector2(1, 1);
    this.generateMipmaps =
        true;
    this.needsUpdate = this.premultiplyAlpha = false;
    this.onUpdate = null;
};
THREE.Texture.prototype = {
    constructor: THREE.Texture,
    clone: function() {
        var a = new THREE.Texture(this.image, this.mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter, this.format, this.type);
        a.offset.copy(this.offset);
        a.repeat.copy(this.repeat);
        return a
    }
};
THREE.TextureCount = 0;
THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.UVMapping = function() {};
THREE.CubeReflectionMapping = function() {};
THREE.CubeRefractionMapping = function() {};
THREE.SphericalReflectionMapping = function() {};
THREE.SphericalRefractionMapping = function() {};
THREE.RepeatWrapping = 0;
THREE.ClampToEdgeWrapping = 1;
THREE.MirroredRepeatWrapping = 2;
THREE.NearestFilter = 3;
THREE.NearestMipMapNearestFilter = 4;
THREE.NearestMipMapLinearFilter = 5;
THREE.LinearFilter = 6;
THREE.LinearMipMapNearestFilter = 7;
THREE.LinearMipMapLinearFilter = 8;
THREE.ByteType = 9;
THREE.UnsignedByteType = 10;
THREE.ShortType = 11;
THREE.UnsignedShortType = 12;
THREE.IntType = 13;
THREE.UnsignedIntType = 14;
THREE.FloatType = 15;
THREE.AlphaFormat = 16;
THREE.RGBFormat = 17;
THREE.RGBAFormat = 18;
THREE.LuminanceFormat = 19;
THREE.LuminanceAlphaFormat = 20;
THREE.DataTexture = function(a, b, c, d, e, f, g, h, j, l) {
    THREE.Texture.call(this, null, f, g, h, j, l, d, e);
    this.image = {
        data: a,
        width: b,
        height: c
    };
};
THREE.DataTexture.prototype = new THREE.Texture;
THREE.DataTexture.prototype.constructor = THREE.DataTexture;
THREE.DataTexture.prototype.clone = function() {
    var a = new THREE.DataTexture(this.image.data, this.image.width, this.image.height, this.format, this.type, this.mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter);
    a.offset.copy(this.offset);
    a.repeat.copy(this.repeat);
    return a
};
THREE.Particle = function(a) {
    THREE.Object3D.call(this);
    this.material = a;
};
THREE.Particle.prototype = new THREE.Object3D;
THREE.Particle.prototype.constructor = THREE.Particle;
THREE.ParticleSystem = function(a, b) {
    THREE.Object3D.call(this);
    this.geometry = a;
    this.material = b !== void 0 ? b : new THREE.ParticleBasicMaterial({
        color: Math.random() * 16777215
    });
    this.sortParticles = false;
    if (this.geometry) {
        this.geometry.boundingSphere || this.geometry.computeBoundingSphere();
        this.boundRadius = a.boundingSphere.radius;
    }
    this.frustumCulled = false;
};
THREE.ParticleSystem.prototype = new THREE.Object3D;
THREE.ParticleSystem.prototype.constructor = THREE.ParticleSystem;
THREE.Line = function(a, b, c) {
    THREE.Object3D.call(this);
    this.geometry = a;
    this.material = b !== void 0 ? b : new THREE.LineBasicMaterial({
        color: Math.random() * 16777215
    });
    this.type = c !== void 0 ? c : THREE.LineStrip;
    this.geometry && (this.geometry.boundingSphere || this.geometry.computeBoundingSphere());
};
THREE.LineStrip = 0;
THREE.LinePieces = 1;
THREE.Line.prototype = new THREE.Object3D;
THREE.Line.prototype.constructor = THREE.Line;
THREE.Mesh = function(a, b) {
    THREE.Object3D.call(this);
    this.geometry = a;
    this.material = b !== void 0 ? b : new THREE.MeshBasicMaterial({
        color: Math.random() * 16777215,
        wireframe: true
    });
    if (this.geometry) {
        this.geometry.boundingSphere || this.geometry.computeBoundingSphere();
        this.boundRadius = a.boundingSphere.radius;
        if (this.geometry.morphTargets.length) {
            this.morphTargetBase = -1;
            this.morphTargetForcedOrder = [];
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (var c = 0; c < this.geometry.morphTargets.length; c++) {
                this.morphTargetInfluences.push(0);
                this.morphTargetDictionary[this.geometry.morphTargets[c].name] = c;
            }
        }
    }
};
THREE.Mesh.prototype = new THREE.Object3D;
THREE.Mesh.prototype.constructor = THREE.Mesh;
THREE.Mesh.prototype.supr = THREE.Object3D.prototype;
THREE.Mesh.prototype.getMorphTargetIndexByName = function(a) {
    if (this.morphTargetDictionary[a] !== void 0) return this.morphTargetDictionary[a];
    console.log("THREE.Mesh.getMorphTargetIndexByName: morph target " + a + " does not exist. Returning 0.");
    return 0
};
THREE.Bone = function(a) {
    THREE.Object3D.call(this);
    this.skin = a;
    this.skinMatrix = new THREE.Matrix4;
};
THREE.Bone.prototype = new THREE.Object3D;
THREE.Bone.prototype.constructor = THREE.Bone;
THREE.Bone.prototype.supr = THREE.Object3D.prototype;
THREE.Bone.prototype.update = function(a, b) {
    this.matrixAutoUpdate && (b = b | this.updateMatrix());
    if (b || this.matrixWorldNeedsUpdate) {
        a ? this.skinMatrix.multiply(a, this.matrix) : this.skinMatrix.copy(this.matrix);
        this.matrixWorldNeedsUpdate = false;
        b = true;
    }
    var c, d = this.children.length;
    for (c = 0; c < d; c++) this.children[c].update(this.skinMatrix, b);
};
THREE.SkinnedMesh = function(a, b) {
    THREE.Mesh.call(this, a, b);
    this.identityMatrix = new THREE.Matrix4;
    this.bones = [];
    this.boneMatrices = [];
    var c, d, e, f, g, h;
    if (this.geometry.bones !== void 0) {
        for (c = 0; c < this.geometry.bones.length; c++) {
            e = this.geometry.bones[c];
            f = e.pos;
            g = e.rotq;
            h = e.scl;
            d = this.addBone();
            d.name = e.name;
            d.position.set(f[0], f[1], f[2]);
            d.quaternion.set(g[0], g[1], g[2], g[3]);
            d.useQuaternion = true;
            h !== void 0 ? d.scale.set(h[0], h[1], h[2]) : d.scale.set(1, 1, 1);
        }
        for (c = 0; c < this.bones.length; c++) {
            e = this.geometry.bones[c];
            d = this.bones[c];
            e.parent === -1 ? this.add(d) : this.bones[e.parent].add(d);
        }
        this.boneMatrices = new Float32Array(16 * this.bones.length);
        this.pose();
    }
};
THREE.SkinnedMesh.prototype = new THREE.Mesh;
THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;
THREE.SkinnedMesh.prototype.addBone = function(a) {
    a === void 0 && (a = new THREE.Bone(this));
    this.bones.push(a);
    return a
};
THREE.SkinnedMesh.prototype.updateMatrixWorld = function(a) {
    this.matrixAutoUpdate && this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || a) {
        this.parent ? this.matrixWorld.multiply(this.parent.matrixWorld, this.matrix) : this.matrixWorld.copy(this.matrix);
        this.matrixWorldNeedsUpdate = false;
    }
    for (var a = 0, b = this.children.length; a < b; a++) {
        var c = this.children[a];
        c instanceof THREE.Bone ? c.update(this.identityMatrix, false) : c.updateMatrixWorld(true);
    }
    for (var b = this.bones.length, c = this.bones, d = this.boneMatrices, a = 0; a < b; a++) c[a].skinMatrix.flattenToArrayOffset(d,
        a * 16);
};
THREE.SkinnedMesh.prototype.pose = function() {
    this.updateMatrixWorld(true);
    for (var a, b = [], c = 0; c < this.bones.length; c++) {
        a = this.bones[c];
        var d = new THREE.Matrix4;
        d.getInverse(a.skinMatrix);
        b.push(d);
        a.skinMatrix.flattenToArrayOffset(this.boneMatrices, c * 16);
    }
    if (this.geometry.skinVerticesA === void 0) {
        this.geometry.skinVerticesA = [];
        this.geometry.skinVerticesB = [];
        for (a = 0; a < this.geometry.skinIndices.length; a++) {
            var c = this.geometry.vertices[a],
                e = this.geometry.skinIndices[a].x,
                f = this.geometry.skinIndices[a].y,
                d =
                new THREE.Vector3(c.x, c.y, c.z);
            this.geometry.skinVerticesA.push(b[e].multiplyVector3(d));
            d = new THREE.Vector3(c.x, c.y, c.z);
            this.geometry.skinVerticesB.push(b[f].multiplyVector3(d));
            if (this.geometry.skinWeights[a].x + this.geometry.skinWeights[a].y !== 1) {
                c = (1 - (this.geometry.skinWeights[a].x + this.geometry.skinWeights[a].y)) * 0.5;
                this.geometry.skinWeights[a].x = this.geometry.skinWeights[a].x + c;
                this.geometry.skinWeights[a].y = this.geometry.skinWeights[a].y + c;
            }
        }
    }
};
THREE.MorphAnimMesh = function(a, b) {
    THREE.Mesh.call(this, a, b);
    this.duration = 1E3;
    this.mirroredLoop = false;
    this.currentKeyframe = this.lastKeyframe = this.time = 0;
    this.direction = 1;
    this.directionBackwards = false;
    this.setFrameRange(0, this.geometry.morphTargets.length - 1);
};
THREE.MorphAnimMesh.prototype = new THREE.Mesh;
THREE.MorphAnimMesh.prototype.constructor = THREE.MorphAnimMesh;
THREE.MorphAnimMesh.prototype.setFrameRange = function(a, b) {
    this.startKeyframe = a;
    this.endKeyframe = b;
    this.length = this.endKeyframe - this.startKeyframe + 1;
};
THREE.MorphAnimMesh.prototype.setDirectionForward = function() {
    this.direction = 1;
    this.directionBackwards = false;
};
THREE.MorphAnimMesh.prototype.setDirectionBackward = function() {
    this.direction = -1;
    this.directionBackwards = true;
};
THREE.MorphAnimMesh.prototype.parseAnimations = function() {
    var a = this.geometry;
    if (!a.animations) a.animations = {};
    for (var b, c = a.animations, d = /([a-z]+)(\d+)/, e = 0, f = a.morphTargets.length; e < f; e++) {
        var g = a.morphTargets[e].name.match(d);
        if (g && g.length > 1) {
            g = g[1];
            c[g] || (c[g] = {
                start: Infinity,
                end: -Infinity
            });
            var h = c[g];
            if (e < h.start) h.start = e;
            if (e > h.end) h.end = e;
            b || (b = g);
        }
    }
    a.firstAnimation = b;
};
THREE.MorphAnimMesh.prototype.setAnimationLabel = function(a, b, c) {
    if (!this.geometry.animations) this.geometry.animations = {};
    this.geometry.animations[a] = {
        start: b,
        end: c
    };
};
THREE.MorphAnimMesh.prototype.playAnimation = function(a, b) {
    var c = this.geometry.animations[a];
    if (c) {
        this.setFrameRange(c.start, c.end);
        this.duration = 1E3 * ((c.end - c.start) / b);
        this.time = 0;
    } else console.warn("animation[" + a + "] undefined");
};
THREE.MorphAnimMesh.prototype.updateAnimation = function(a) {
    var b = this.duration / this.length;
    this.time = this.time + this.direction * a;
    if (this.mirroredLoop) {
        if (this.time > this.duration || this.time < 0) {
            this.direction = this.direction * -1;
            if (this.time > this.duration) {
                this.time = this.duration;
                this.directionBackwards = true;
            }
            if (this.time < 0) {
                this.time = 0;
                this.directionBackwards = false;
            }
        }
    } else {
        this.time = this.time % this.duration;
        if (this.time < 0) this.time = this.time + this.duration;
    }
    a = this.startKeyframe + THREE.Math.clamp(Math.floor(this.time /
        b), 0, this.length - 1);
    if (a !== this.currentKeyframe) {
        this.morphTargetInfluences[this.lastKeyframe] = 0;
        this.morphTargetInfluences[this.currentKeyframe] = 1;
        this.morphTargetInfluences[a] = 0;
        this.lastKeyframe = this.currentKeyframe;
        this.currentKeyframe = a;
    }
    b = this.time % b / b;
    this.directionBackwards && (b = 1 - b);
    this.morphTargetInfluences[this.currentKeyframe] = b;
    this.morphTargetInfluences[this.lastKeyframe] = 1 - b;
};
THREE.Ribbon = function(a, b) {
    THREE.Object3D.call(this);
    this.geometry = a;
    this.material = b;
};
THREE.Ribbon.prototype = new THREE.Object3D;
THREE.Ribbon.prototype.constructor = THREE.Ribbon;
THREE.LOD = function() {
    THREE.Object3D.call(this);
    this.LODs = [];
};
THREE.LOD.prototype = new THREE.Object3D;
THREE.LOD.prototype.constructor = THREE.LOD;
THREE.LOD.prototype.supr = THREE.Object3D.prototype;
THREE.LOD.prototype.addLevel = function(a, b) {
    b === void 0 && (b = 0);
    for (var b = Math.abs(b), c = 0; c < this.LODs.length; c++)
        if (b < this.LODs[c].visibleAtDistance) break;
    this.LODs.splice(c, 0, {
        visibleAtDistance: b,
        object3D: a
    });
    this.add(a);
};
THREE.LOD.prototype.update = function(a) {
    if (this.LODs.length > 1) {
        a.matrixWorldInverse.getInverse(a.matrixWorld);
        a = a.matrixWorldInverse;
        a = -(a.elements[2] * this.matrixWorld.elements[12] + a.elements[6] * this.matrixWorld.elements[13] + a.elements[10] * this.matrixWorld.elements[14] + a.elements[14]);
        this.LODs[0].object3D.visible = true;
        for (var b = 1; b < this.LODs.length; b++)
            if (a >= this.LODs[b].visibleAtDistance) {
                this.LODs[b - 1].object3D.visible = false;
                this.LODs[b].object3D.visible = true;
            } else break;
        for (; b < this.LODs.length; b++) this.LODs[b].object3D.visible =
            false;
    }
};
THREE.Sprite = function(a) {
    THREE.Object3D.call(this);
    this.color = a.color !== void 0 ? new THREE.Color(a.color) : new THREE.Color(16777215);
    this.map = a.map !== void 0 ? a.map : new THREE.Texture;
    this.blending = a.blending !== void 0 ? a.blending : THREE.NormalBlending;
    this.blendSrc = a.blendSrc !== void 0 ? a.blendSrc : THREE.SrcAlphaFactor;
    this.blendDst = a.blendDst !== void 0 ? a.blendDst : THREE.OneMinusSrcAlphaFactor;
    this.blendEquation = a.blendEquation !== void 0 ? a.blendEquation : THREE.AddEquation;
    this.useScreenCoordinates = a.useScreenCoordinates !== void 0 ?
        a.useScreenCoordinates : true;
    this.mergeWith3D = a.mergeWith3D !== void 0 ? a.mergeWith3D : !this.useScreenCoordinates;
    this.affectedByDistance = a.affectedByDistance !== void 0 ? a.affectedByDistance : !this.useScreenCoordinates;
    this.scaleByViewport = a.scaleByViewport !== void 0 ? a.scaleByViewport : !this.affectedByDistance;
    this.alignment = a.alignment instanceof THREE.Vector2 ? a.alignment : THREE.SpriteAlignment.center;
    this.rotation3d = this.rotation;
    this.rotation = 0;
    this.opacity = 1;
    this.uvOffset = new THREE.Vector2(0, 0);
    this.uvScale =
        new THREE.Vector2(1, 1);
};
THREE.Sprite.prototype = new THREE.Object3D;
THREE.Sprite.prototype.constructor = THREE.Sprite;
THREE.Sprite.prototype.updateMatrix = function() {
    this.matrix.setPosition(this.position);
    this.rotation3d.set(0, 0, this.rotation);
    this.matrix.setRotationFromEuler(this.rotation3d);
    if (this.scale.x !== 1 || this.scale.y !== 1) {
        this.matrix.scale(this.scale);
        this.boundRadiusScale = Math.max(this.scale.x, this.scale.y);
    }
    this.matrixWorldNeedsUpdate = true;
};
THREE.SpriteAlignment = {};
THREE.SpriteAlignment.topLeft = new THREE.Vector2(1, -1);
THREE.SpriteAlignment.topCenter = new THREE.Vector2(0, -1);
THREE.SpriteAlignment.topRight = new THREE.Vector2(-1, -1);
THREE.SpriteAlignment.centerLeft = new THREE.Vector2(1, 0);
THREE.SpriteAlignment.center = new THREE.Vector2(0, 0);
THREE.SpriteAlignment.centerRight = new THREE.Vector2(-1, 0);
THREE.SpriteAlignment.bottomLeft = new THREE.Vector2(1, 1);
THREE.SpriteAlignment.bottomCenter = new THREE.Vector2(0, 1);
THREE.SpriteAlignment.bottomRight = new THREE.Vector2(-1, 1);
THREE.Scene = function() {
    THREE.Object3D.call(this);
    this.overrideMaterial = this.fog = null;
    this.matrixAutoUpdate = false;
    this.__objects = [];
    this.__lights = [];
    this.__objectsAdded = [];
    this.__objectsRemoved = [];
};
THREE.Scene.prototype = new THREE.Object3D;
THREE.Scene.prototype.constructor = THREE.Scene;
THREE.Scene.prototype.__addObject = function(a) {
    if (a instanceof THREE.Light) this.__lights.indexOf(a) === -1 && this.__lights.push(a);
    else if (!(a instanceof THREE.Camera || a instanceof THREE.Bone) && this.__objects.indexOf(a) === -1) {
        this.__objects.push(a);
        this.__objectsAdded.push(a);
        var b = this.__objectsRemoved.indexOf(a);
        b !== -1 && this.__objectsRemoved.splice(b, 1);
    }
    for (b = 0; b < a.children.length; b++) this.__addObject(a.children[b]);
};
THREE.Scene.prototype.__removeObject = function(a) {
    if (a instanceof THREE.Light) {
        var b = this.__lights.indexOf(a);
        b !== -1 && this.__lights.splice(b, 1);
    } else if (!(a instanceof THREE.Camera)) {
        b = this.__objects.indexOf(a);
        if (b !== -1) {
            this.__objects.splice(b, 1);
            this.__objectsRemoved.push(a);
            b = this.__objectsAdded.indexOf(a);
            b !== -1 && this.__objectsAdded.splice(b, 1);
        }
    }
    for (b = 0; b < a.children.length; b++) this.__removeObject(a.children[b]);
};
THREE.Fog = function(a, b, c) {
    this.color = new THREE.Color(a);
    this.near = b !== void 0 ? b : 1;
    this.far = c !== void 0 ? c : 1E3;
};
THREE.FogExp2 = function(a, b) {
    this.color = new THREE.Color(a);
    this.density = b !== void 0 ? b : 2.5E-4;
};
THREE.DOMRenderer = function() {
    console.log("THREE.DOMRenderer", THREE.REVISION);
    var a, b, c, d, e, f, g, h = new THREE.Projector;
    g = function(a) {
        for (var b = document.documentElement, c = 0; c < a.length; c++)
            if (typeof b.style[a[c]] === "string") return a[c];
        return null
    }(["transform", "MozTransform", "WebkitTransform", "msTransform", "OTransform"]);
    this.domElement = document.createElement("div");
    this.setSize = function(a, b) {
        c = a;
        d = b;
        e = c / 2;
        f = d / 2;
    };
    this.render = function(c, d) {
        var k, p, m, o, q, n;
        a = h.projectScene(c, d);
        b = a.elements;
        k = 0;
        for (p =
            b.length; k < p; k++) {
            m = b[k];
            if (m instanceof THREE.RenderableParticle && m.material instanceof THREE.ParticleDOMMaterial) {
                o = m.material.domElement;
                q = m.x * e + e - (o.offsetWidth >> 1);
                n = m.y * f + f - (o.offsetHeight >> 1);
                o.style.left = q + "px";
                o.style.top = n + "px";
                o.style.zIndex = Math.abs(Math.floor((1 - m.z) * d.far / d.near));
                g && (o.style[g] = "scale(" + m.scale.x * e + "," + m.scale.y * f + ")");
            }
        }
    };
};
THREE.CanvasRenderer = function(a) {
    function b(a) {
        if (t != a) n.globalAlpha = t = a;
    }

    function c(a) {
        if (y != a) {
            switch (a) {
                case THREE.NormalBlending:
                    n.globalCompositeOperation = "source-over";
                    break;
                case THREE.AdditiveBlending:
                    n.globalCompositeOperation = "lighter";
            }
            y = a;
        }
    }

    function d(a) {
        if (s != a) n.strokeStyle = s = a;
    }

    function e(a) {
        if (w != a) n.fillStyle = w = a;
    }
    console.log("THREE.CanvasRenderer", THREE.REVISION);
    var a = a || {},
        f = this,
        g, h, j, l = new THREE.Projector,
        k = a.canvas !== void 0 ? a.canvas : document.createElement("canvas"),
        p, m, o, q, n = k.getContext("2d"),
        r = new THREE.Color(0),
        u = 0,
        t = 1,
        y = 0,
        s = null,
        w = null,
        H = null,
        E = null,
        z = null,
        v, A, J, K, R = new THREE.RenderableVertex,
        P = new THREE.RenderableVertex,
        D, M, G, i, T, U, C, Y, F, ea, fa, ia, O = new THREE.Color,
        Q = new THREE.Color,
        Z = new THREE.Color,
        $ = new THREE.Color,
        ha = new THREE.Color,
        Ma = [],
        Ka = [],
        Ra, La, Sa, Na, Kb, lb, gb, Lb, hb, Cb, Wa = new THREE.Rectangle,
        Ba = new THREE.Rectangle,
        xa = new THREE.Rectangle,
        $a = false,
        aa = new THREE.Color,
        Ta = new THREE.Color,
        Qa = new THREE.Color,
        oa = new THREE.Vector3,
        ib, Db, Sc, ab, pc, Bc, a = 16;
    ib = document.createElement("canvas");
    ib.width = ib.height = 2;
    Db = ib.getContext("2d");
    Db.fillStyle = "rgba(0,0,0,1)";
    Db.fillRect(0, 0, 2, 2);
    Sc = Db.getImageData(0, 0, 2, 2);
    ab = Sc.data;
    pc = document.createElement("canvas");
    pc.width = pc.height = a;
    Bc = pc.getContext("2d");
    Bc.translate(-a / 2, -a / 2);
    Bc.scale(a, a);
    a--;
    this.domElement = k;
    this.sortElements = this.sortObjects = this.autoClear = true;
    this.info = {
        render: {
            vertices: 0,
            faces: 0
        }
    };
    this.setSize = function(a, b) {
        p = a;
        m = b;
        o = Math.floor(p / 2);
        q = Math.floor(m / 2);
        k.width = p;
        k.height = m;
        Wa.set(-o, -q, o, q);
        Ba.set(-o, -q, o, q);
        t = 1;
        y =
            0;
        z = E = H = w = s = null;
    };
    this.setClearColor = function(a, b) {
        r.copy(a);
        u = b !== void 0 ? b : 1;
        Ba.set(-o, -q, o, q);
    };
    this.setClearColorHex = function(a, b) {
        r.setHex(a);
        u = b !== void 0 ? b : 1;
        Ba.set(-o, -q, o, q);
    };
    this.clear = function() {
        n.setTransform(1, 0, 0, -1, o, q);
        if (!Ba.isEmpty()) {
            Ba.minSelf(Wa);
            Ba.inflate(2);
            u < 1 && n.clearRect(Math.floor(Ba.getX()), Math.floor(Ba.getY()), Math.floor(Ba.getWidth()), Math.floor(Ba.getHeight()));
            if (u > 0) {
                c(THREE.NormalBlending);
                b(1);
                e("rgba(" + Math.floor(r.r * 255) + "," + Math.floor(r.g * 255) + "," + Math.floor(r.b *
                    255) + "," + u + ")");
                n.fillRect(Math.floor(Ba.getX()), Math.floor(Ba.getY()), Math.floor(Ba.getWidth()), Math.floor(Ba.getHeight()));
            }
            Ba.empty();
        }
    };
    this.render = function(a, k) {
        function m(a) {
            var b, c, d, e;
            aa.setRGB(0, 0, 0);
            Ta.setRGB(0, 0, 0);
            Qa.setRGB(0, 0, 0);
            b = 0;
            for (c = a.length; b < c; b++) {
                d = a[b];
                e = d.color;
                if (d instanceof THREE.AmbientLight) {
                    aa.r = aa.r + e.r;
                    aa.g = aa.g + e.g;
                    aa.b = aa.b + e.b;
                } else if (d instanceof THREE.DirectionalLight) {
                    Ta.r = Ta.r + e.r;
                    Ta.g = Ta.g + e.g;
                    Ta.b = Ta.b + e.b;
                } else if (d instanceof THREE.PointLight) {
                    Qa.r = Qa.r + e.r;
                    Qa.g = Qa.g + e.g;
                    Qa.b = Qa.b + e.b;
                }
            }
        }

        function p(a, b, c, d) {
            var e, f, g, i, h, j;
            e = 0;
            for (f = a.length; e < f; e++) {
                g = a[e];
                i = g.color;
                if (g instanceof THREE.DirectionalLight) {
                    h = g.matrixWorld.getPosition();
                    j = c.dot(h);
                    if (!(j <= 0)) {
                        j = j * g.intensity;
                        d.r = d.r + i.r * j;
                        d.g = d.g + i.g * j;
                        d.b = d.b + i.b * j;
                    }
                } else if (g instanceof THREE.PointLight) {
                    h = g.matrixWorld.getPosition();
                    j = c.dot(oa.sub(h, b).normalize());
                    if (!(j <= 0)) {
                        j = j * (g.distance == 0 ? 1 : 1 - Math.min(b.distanceTo(h) / g.distance, 1));
                        if (j != 0) {
                            j = j * g.intensity;
                            d.r = d.r + i.r * j;
                            d.g = d.g + i.g * j;
                            d.b = d.b +
                                i.b * j;
                        }
                    }
                }
            }
        }

        function r(a, f, g) {
            b(g.opacity);
            c(g.blending);
            var i, h, j, k, l, m;
            if (g instanceof THREE.ParticleBasicMaterial) {
                if (g.map) {
                    k = g.map.image;
                    l = k.width >> 1;
                    m = k.height >> 1;
                    g = f.scale.x * o;
                    j = f.scale.y * q;
                    i = g * l;
                    h = j * m;
                    xa.set(a.x - i, a.y - h, a.x + i, a.y + h);
                    if (Wa.intersects(xa)) {
                        n.save();
                        n.translate(a.x, a.y);
                        n.rotate(-f.rotation);
                        n.scale(g, -j);
                        n.translate(-l, -m);
                        n.drawImage(k, 0, 0);
                        n.restore();
                    }
                }
            } else if (g instanceof THREE.ParticleCanvasMaterial) {
                i = f.scale.x * o;
                h = f.scale.y * q;
                xa.set(a.x - i, a.y - h, a.x + i, a.y + h);
                if (Wa.intersects(xa)) {
                    d(g.color.getContextStyle());
                    e(g.color.getContextStyle());
                    n.save();
                    n.translate(a.x, a.y);
                    n.rotate(-f.rotation);
                    n.scale(i, h);
                    g.program(n);
                    n.restore();
                }
            }
        }

        function s(a, e, f, g) {
            b(g.opacity);
            c(g.blending);
            n.beginPath();
            n.moveTo(a.positionScreen.x, a.positionScreen.y);
            n.lineTo(e.positionScreen.x, e.positionScreen.y);
            n.closePath();
            if (g instanceof THREE.LineBasicMaterial) {
                a = g.linewidth;
                if (H != a) n.lineWidth = H = a;
                a = g.linecap;
                if (E != a) n.lineCap = E = a;
                a = g.linejoin;
                if (z != a) n.lineJoin = z = a;
                d(g.color.getContextStyle());
                n.stroke();
                xa.inflate(g.linewidth *
                    2);
            }
        }

        function t(a, d, e, g, h, l, m, n) {
            f.info.render.vertices = f.info.render.vertices + 3;
            f.info.render.faces++;
            b(n.opacity);
            c(n.blending);
            D = a.positionScreen.x;
            M = a.positionScreen.y;
            G = d.positionScreen.x;
            i = d.positionScreen.y;
            T = e.positionScreen.x;
            U = e.positionScreen.y;
            w(D, M, G, i, T, U);
            if (n instanceof THREE.MeshBasicMaterial)
                if (n.map) {
                    if (n.map.mapping instanceof THREE.UVMapping) {
                        Na = m.uvs[0];
                        ad(D, M, G, i, T, U, Na[g].u, Na[g].v, Na[h].u, Na[h].v, Na[l].u, Na[l].v, n.map);
                    }
                } else if (n.envMap) {
                if (n.envMap.mapping instanceof THREE.SphericalReflectionMapping) {
                    a =
                        k.matrixWorldInverse;
                    oa.copy(m.vertexNormalsWorld[g]);
                    Kb = (oa.x * a.elements[0] + oa.y * a.elements[4] + oa.z * a.elements[8]) * 0.5 + 0.5;
                    lb = -(oa.x * a.elements[1] + oa.y * a.elements[5] + oa.z * a.elements[9]) * 0.5 + 0.5;
                    oa.copy(m.vertexNormalsWorld[h]);
                    gb = (oa.x * a.elements[0] + oa.y * a.elements[4] + oa.z * a.elements[8]) * 0.5 + 0.5;
                    Lb = -(oa.x * a.elements[1] + oa.y * a.elements[5] + oa.z * a.elements[9]) * 0.5 + 0.5;
                    oa.copy(m.vertexNormalsWorld[l]);
                    hb = (oa.x * a.elements[0] + oa.y * a.elements[4] + oa.z * a.elements[8]) * 0.5 + 0.5;
                    Cb = -(oa.x * a.elements[1] + oa.y *
                        a.elements[5] + oa.z * a.elements[9]) * 0.5 + 0.5;
                    ad(D, M, G, i, T, U, Kb, lb, gb, Lb, hb, Cb, n.envMap);
                }
            } else n.wireframe ? Mb(n.color, n.wireframeLinewidth, n.wireframeLinecap, n.wireframeLinejoin) : Eb(n.color);
            else if (n instanceof THREE.MeshLambertMaterial)
                if ($a)
                    if (!n.wireframe && n.shading == THREE.SmoothShading && m.vertexNormalsWorld.length == 3) {
                        Q.r = Z.r = $.r = aa.r;
                        Q.g = Z.g = $.g = aa.g;
                        Q.b = Z.b = $.b = aa.b;
                        p(j, m.v1.positionWorld, m.vertexNormalsWorld[0], Q);
                        p(j, m.v2.positionWorld, m.vertexNormalsWorld[1], Z);
                        p(j, m.v3.positionWorld, m.vertexNormalsWorld[2],
                            $);
                        Q.r = Math.max(0, Math.min(n.color.r * Q.r, 1));
                        Q.g = Math.max(0, Math.min(n.color.g * Q.g, 1));
                        Q.b = Math.max(0, Math.min(n.color.b * Q.b, 1));
                        Z.r = Math.max(0, Math.min(n.color.r * Z.r, 1));
                        Z.g = Math.max(0, Math.min(n.color.g * Z.g, 1));
                        Z.b = Math.max(0, Math.min(n.color.b * Z.b, 1));
                        $.r = Math.max(0, Math.min(n.color.r * $.r, 1));
                        $.g = Math.max(0, Math.min(n.color.g * $.g, 1));
                        $.b = Math.max(0, Math.min(n.color.b * $.b, 1));
                        ha.r = (Z.r + $.r) * 0.5;
                        ha.g = (Z.g + $.g) * 0.5;
                        ha.b = (Z.b + $.b) * 0.5;
                        Sa = Cc(Q, Z, $, ha);
                        gc(D, M, G, i, T, U, 0, 0, 1, 0, 0, 1, Sa);
                    } else {
                        O.r = aa.r;
                        O.g =
                            aa.g;
                        O.b = aa.b;
                        p(j, m.centroidWorld, m.normalWorld, O);
                        O.r = Math.max(0, Math.min(n.color.r * O.r, 1));
                        O.g = Math.max(0, Math.min(n.color.g * O.g, 1));
                        O.b = Math.max(0, Math.min(n.color.b * O.b, 1));
                        n.wireframe ? Mb(O, n.wireframeLinewidth, n.wireframeLinecap, n.wireframeLinejoin) : Eb(O);
                    }
            else n.wireframe ? Mb(n.color, n.wireframeLinewidth, n.wireframeLinecap, n.wireframeLinejoin) : Eb(n.color);
            else if (n instanceof THREE.MeshDepthMaterial) {
                Ra = k.near;
                La = k.far;
                Q.r = Q.g = Q.b = 1 - ac(a.positionScreen.z, Ra, La);
                Z.r = Z.g = Z.b = 1 - ac(d.positionScreen.z,
                    Ra, La);
                $.r = $.g = $.b = 1 - ac(e.positionScreen.z, Ra, La);
                ha.r = (Z.r + $.r) * 0.5;
                ha.g = (Z.g + $.g) * 0.5;
                ha.b = (Z.b + $.b) * 0.5;
                Sa = Cc(Q, Z, $, ha);
                gc(D, M, G, i, T, U, 0, 0, 1, 0, 0, 1, Sa);
            } else if (n instanceof THREE.MeshNormalMaterial) {
                O.r = hc(m.normalWorld.x);
                O.g = hc(m.normalWorld.y);
                O.b = hc(m.normalWorld.z);
                n.wireframe ? Mb(O, n.wireframeLinewidth, n.wireframeLinecap, n.wireframeLinejoin) : Eb(O);
            }
        }

        function u(a, d, e, g, h, l, n, m, o) {
            f.info.render.vertices = f.info.render.vertices + 4;
            f.info.render.faces++;
            b(m.opacity);
            c(m.blending);
            if (m.map || m.envMap) {
                t(a,
                    d, g, 0, 1, 3, n, m, o);
                t(h, e, l, 1, 2, 3, n, m, o);
            } else {
                D = a.positionScreen.x;
                M = a.positionScreen.y;
                G = d.positionScreen.x;
                i = d.positionScreen.y;
                T = e.positionScreen.x;
                U = e.positionScreen.y;
                C = g.positionScreen.x;
                Y = g.positionScreen.y;
                F = h.positionScreen.x;
                ea = h.positionScreen.y;
                fa = l.positionScreen.x;
                ia = l.positionScreen.y;
                if (m instanceof THREE.MeshBasicMaterial) {
                    y(D, M, G, i, T, U, C, Y);
                    m.wireframe ? Mb(m.color, m.wireframeLinewidth, m.wireframeLinecap, m.wireframeLinejoin) : Eb(m.color);
                } else if (m instanceof THREE.MeshLambertMaterial)
                    if ($a)
                        if (!m.wireframe &&
                            m.shading == THREE.SmoothShading && n.vertexNormalsWorld.length == 4) {
                            Q.r = Z.r = $.r = ha.r = aa.r;
                            Q.g = Z.g = $.g = ha.g = aa.g;
                            Q.b = Z.b = $.b = ha.b = aa.b;
                            p(j, n.v1.positionWorld, n.vertexNormalsWorld[0], Q);
                            p(j, n.v2.positionWorld, n.vertexNormalsWorld[1], Z);
                            p(j, n.v4.positionWorld, n.vertexNormalsWorld[3], $);
                            p(j, n.v3.positionWorld, n.vertexNormalsWorld[2], ha);
                            Q.r = Math.max(0, Math.min(m.color.r * Q.r, 1));
                            Q.g = Math.max(0, Math.min(m.color.g * Q.g, 1));
                            Q.b = Math.max(0, Math.min(m.color.b * Q.b, 1));
                            Z.r = Math.max(0, Math.min(m.color.r * Z.r, 1));
                            Z.g =
                                Math.max(0, Math.min(m.color.g * Z.g, 1));
                            Z.b = Math.max(0, Math.min(m.color.b * Z.b, 1));
                            $.r = Math.max(0, Math.min(m.color.r * $.r, 1));
                            $.g = Math.max(0, Math.min(m.color.g * $.g, 1));
                            $.b = Math.max(0, Math.min(m.color.b * $.b, 1));
                            ha.r = Math.max(0, Math.min(m.color.r * ha.r, 1));
                            ha.g = Math.max(0, Math.min(m.color.g * ha.g, 1));
                            ha.b = Math.max(0, Math.min(m.color.b * ha.b, 1));
                            Sa = Cc(Q, Z, $, ha);
                            w(D, M, G, i, C, Y);
                            gc(D, M, G, i, C, Y, 0, 0, 1, 0, 0, 1, Sa);
                            w(F, ea, T, U, fa, ia);
                            gc(F, ea, T, U, fa, ia, 1, 0, 1, 1, 0, 1, Sa);
                        } else {
                            O.r = aa.r;
                            O.g = aa.g;
                            O.b = aa.b;
                            p(j, n.centroidWorld,
                                n.normalWorld, O);
                            O.r = Math.max(0, Math.min(m.color.r * O.r, 1));
                            O.g = Math.max(0, Math.min(m.color.g * O.g, 1));
                            O.b = Math.max(0, Math.min(m.color.b * O.b, 1));
                            y(D, M, G, i, T, U, C, Y);
                            m.wireframe ? Mb(O, m.wireframeLinewidth, m.wireframeLinecap, m.wireframeLinejoin) : Eb(O);
                        }
                else {
                    y(D, M, G, i, T, U, C, Y);
                    m.wireframe ? Mb(m.color, m.wireframeLinewidth, m.wireframeLinecap, m.wireframeLinejoin) : Eb(m.color);
                } else if (m instanceof THREE.MeshNormalMaterial) {
                    O.r = hc(n.normalWorld.x);
                    O.g = hc(n.normalWorld.y);
                    O.b = hc(n.normalWorld.z);
                    y(D, M, G, i, T, U, C,
                        Y);
                    m.wireframe ? Mb(O, m.wireframeLinewidth, m.wireframeLinecap, m.wireframeLinejoin) : Eb(O);
                } else if (m instanceof THREE.MeshDepthMaterial) {
                    Ra = k.near;
                    La = k.far;
                    Q.r = Q.g = Q.b = 1 - ac(a.positionScreen.z, Ra, La);
                    Z.r = Z.g = Z.b = 1 - ac(d.positionScreen.z, Ra, La);
                    $.r = $.g = $.b = 1 - ac(g.positionScreen.z, Ra, La);
                    ha.r = ha.g = ha.b = 1 - ac(e.positionScreen.z, Ra, La);
                    Sa = Cc(Q, Z, $, ha);
                    w(D, M, G, i, C, Y);
                    gc(D, M, G, i, C, Y, 0, 0, 1, 0, 0, 1, Sa);
                    w(F, ea, T, U, fa, ia);
                    gc(F, ea, T, U, fa, ia, 1, 0, 1, 1, 0, 1, Sa);
                }
            }
        }

        function w(a, b, c, d, e, f) {
            n.beginPath();
            n.moveTo(a, b);
            n.lineTo(c,
                d);
            n.lineTo(e, f);
            n.lineTo(a, b);
            n.closePath();
        }

        function y(a, b, c, d, e, f, g, i) {
            n.beginPath();
            n.moveTo(a, b);
            n.lineTo(c, d);
            n.lineTo(e, f);
            n.lineTo(g, i);
            n.lineTo(a, b);
            n.closePath();
        }

        function Mb(a, b, c, e) {
            if (H != b) n.lineWidth = H = b;
            if (E != c) n.lineCap = E = c;
            if (z != e) n.lineJoin = z = e;
            d(a.getContextStyle());
            n.stroke();
            xa.inflate(b * 2);
        }

        function Eb(a) {
            e(a.getContextStyle());
            n.fill();
        }

        function ad(a, b, c, d, f, g, i, h, j, k, l, m, p) {
            if (p.image.width != 0) {
                if (p.needsUpdate == true || Ma[p.id] == void 0) {
                    var o = p.wrapS == THREE.RepeatWrapping,
                        q = p.wrapT ==
                        THREE.RepeatWrapping;
                    Ma[p.id] = n.createPattern(p.image, o && q ? "repeat" : o && !q ? "repeat-x" : !o && q ? "repeat-y" : "no-repeat");
                    p.needsUpdate = false;
                }
                e(Ma[p.id]);
                var o = p.offset.x / p.repeat.x,
                    q = p.offset.y / p.repeat.y,
                    Db = p.image.width * p.repeat.x,
                    r = p.image.height * p.repeat.y,
                    i = (i + o) * Db,
                    h = (h + q) * r,
                    c = c - a,
                    d = d - b,
                    f = f - a,
                    g = g - b,
                    j = (j + o) * Db - i,
                    k = (k + q) * r - h,
                    l = (l + o) * Db - i,
                    m = (m + q) * r - h,
                    o = j * m - l * k;
                if (o == 0) {
                    if (Ka[p.id] === void 0) {
                        b = document.createElement("canvas");
                        b.width = p.image.width;
                        b.height = p.image.height;
                        b = b.getContext("2d");
                        b.drawImage(p.image,
                            0, 0);
                        Ka[p.id] = b.getImageData(0, 0, p.image.width, p.image.height).data;
                    }
                    b = Ka[p.id];
                    i = (Math.floor(i) + Math.floor(h) * p.image.width) * 4;
                    O.setRGB(b[i] / 255, b[i + 1] / 255, b[i + 2] / 255);
                    Eb(O);
                } else {
                    o = 1 / o;
                    p = (m * c - k * f) * o;
                    k = (m * d - k * g) * o;
                    c = (j * f - l * c) * o;
                    d = (j * g - l * d) * o;
                    a = a - p * i - c * h;
                    i = b - k * i - d * h;
                    n.save();
                    n.transform(p, k, c, d, a, i);
                    n.fill();
                    n.restore();
                }
            }
        }

        function gc(a, b, c, d, e, f, g, i, h, j, k, l, m) {
            var p, o;
            p = m.width - 1;
            o = m.height - 1;
            g = g * p;
            i = i * o;
            c = c - a;
            d = d - b;
            e = e - a;
            f = f - b;
            h = h * p - g;
            j = j * o - i;
            k = k * p - g;
            l = l * o - i;
            o = 1 / (h * l - k * j);
            p = (l * c - j * e) * o;
            j = (l * d - j * f) *
                o;
            c = (h * e - k * c) * o;
            d = (h * f - k * d) * o;
            a = a - p * g - c * i;
            b = b - j * g - d * i;
            n.save();
            n.transform(p, j, c, d, a, b);
            n.clip();
            n.drawImage(m, 0, 0);
            n.restore();
        }

        function Cc(a, b, c, d) {
            var e = ~~(a.r * 255),
                f = ~~(a.g * 255),
                a = ~~(a.b * 255),
                g = ~~(b.r * 255),
                i = ~~(b.g * 255),
                b = ~~(b.b * 255),
                h = ~~(c.r * 255),
                j = ~~(c.g * 255),
                c = ~~(c.b * 255),
                k = ~~(d.r * 255),
                l = ~~(d.g * 255),
                d = ~~(d.b * 255);
            ab[0] = e < 0 ? 0 : e > 255 ? 255 : e;
            ab[1] = f < 0 ? 0 : f > 255 ? 255 : f;
            ab[2] = a < 0 ? 0 : a > 255 ? 255 : a;
            ab[4] = g < 0 ? 0 : g > 255 ? 255 : g;
            ab[5] = i < 0 ? 0 : i > 255 ? 255 : i;
            ab[6] = b < 0 ? 0 : b > 255 ? 255 : b;
            ab[8] = h < 0 ? 0 : h > 255 ? 255 : h;
            ab[9] = j < 0 ? 0 :
                j > 255 ? 255 : j;
            ab[10] = c < 0 ? 0 : c > 255 ? 255 : c;
            ab[12] = k < 0 ? 0 : k > 255 ? 255 : k;
            ab[13] = l < 0 ? 0 : l > 255 ? 255 : l;
            ab[14] = d < 0 ? 0 : d > 255 ? 255 : d;
            Db.putImageData(Sc, 0, 0);
            Bc.drawImage(ib, 0, 0);
            return pc
        }

        function ac(a, b, c) {
            a = (a - b) / (c - b);
            return a * a * (3 - 2 * a)
        }

        function hc(a) {
            a = (a + 1) * 0.5;
            return a < 0 ? 0 : a > 1 ? 1 : a
        }

        function Nb(a, b) {
            var c = b.x - a.x,
                d = b.y - a.y,
                e = c * c + d * d;
            if (e != 0) {
                e = 1 / Math.sqrt(e);
                c = c * e;
                d = d * e;
                b.x = b.x + c;
                b.y = b.y + d;
                a.x = a.x - c;
                a.y = a.y - d;
            }
        }
        var Dc, bd, Ha, eb;
        this.autoClear ? this.clear() : n.setTransform(1, 0, 0, -1, o, q);
        f.info.render.vertices = 0;
        f.info.render.faces =
            0;
        g = l.projectScene(a, k, this.sortElements);
        h = g.elements;
        j = g.lights;
        ($a = j.length > 0) && m(j);
        Dc = 0;
        for (bd = h.length; Dc < bd; Dc++) {
            Ha = h[Dc];
            eb = Ha.material;
            eb = eb instanceof THREE.MeshFaceMaterial ? Ha.faceMaterial : eb;
            if (!(eb === void 0 || eb.visible === false)) {
                xa.empty();
                if (Ha instanceof THREE.RenderableParticle) {
                    v = Ha;
                    v.x = v.x * o;
                    v.y = v.y * q;
                    r(v, Ha, eb, a);
                } else if (Ha instanceof THREE.RenderableLine) {
                    v = Ha.v1;
                    A = Ha.v2;
                    v.positionScreen.x = v.positionScreen.x * o;
                    v.positionScreen.y = v.positionScreen.y * q;
                    A.positionScreen.x = A.positionScreen.x *
                        o;
                    A.positionScreen.y = A.positionScreen.y * q;
                    xa.addPoint(v.positionScreen.x, v.positionScreen.y);
                    xa.addPoint(A.positionScreen.x, A.positionScreen.y);
                    Wa.intersects(xa) && s(v, A, Ha, eb, a);
                } else if (Ha instanceof THREE.RenderableFace3) {
                    v = Ha.v1;
                    A = Ha.v2;
                    J = Ha.v3;
                    v.positionScreen.x = v.positionScreen.x * o;
                    v.positionScreen.y = v.positionScreen.y * q;
                    A.positionScreen.x = A.positionScreen.x * o;
                    A.positionScreen.y = A.positionScreen.y * q;
                    J.positionScreen.x = J.positionScreen.x * o;
                    J.positionScreen.y = J.positionScreen.y * q;
                    if (eb.overdraw) {
                        Nb(v.positionScreen,
                            A.positionScreen);
                        Nb(A.positionScreen, J.positionScreen);
                        Nb(J.positionScreen, v.positionScreen);
                    }
                    xa.add3Points(v.positionScreen.x, v.positionScreen.y, A.positionScreen.x, A.positionScreen.y, J.positionScreen.x, J.positionScreen.y);
                    Wa.intersects(xa) && t(v, A, J, 0, 1, 2, Ha, eb, a);
                } else if (Ha instanceof THREE.RenderableFace4) {
                    v = Ha.v1;
                    A = Ha.v2;
                    J = Ha.v3;
                    K = Ha.v4;
                    v.positionScreen.x = v.positionScreen.x * o;
                    v.positionScreen.y = v.positionScreen.y * q;
                    A.positionScreen.x = A.positionScreen.x * o;
                    A.positionScreen.y = A.positionScreen.y * q;
                    J.positionScreen.x = J.positionScreen.x * o;
                    J.positionScreen.y = J.positionScreen.y * q;
                    K.positionScreen.x = K.positionScreen.x * o;
                    K.positionScreen.y = K.positionScreen.y * q;
                    R.positionScreen.copy(A.positionScreen);
                    P.positionScreen.copy(K.positionScreen);
                    if (eb.overdraw) {
                        Nb(v.positionScreen, A.positionScreen);
                        Nb(A.positionScreen, K.positionScreen);
                        Nb(K.positionScreen, v.positionScreen);
                        Nb(J.positionScreen, R.positionScreen);
                        Nb(J.positionScreen, P.positionScreen);
                    }
                    xa.addPoint(v.positionScreen.x, v.positionScreen.y);
                    xa.addPoint(A.positionScreen.x,
                        A.positionScreen.y);
                    xa.addPoint(J.positionScreen.x, J.positionScreen.y);
                    xa.addPoint(K.positionScreen.x, K.positionScreen.y);
                    Wa.intersects(xa) && u(v, A, J, K, R, P, Ha, eb, a);
                }
                Ba.addRectangle(xa);
            }
        }
        n.setTransform(1, 0, 0, 1, 0, 0);
    };
};
THREE.SVGRenderer = function() {
    function a(a, b, c, d) {
        var e, f, g, h, j, k;
        e = 0;
        for (f = a.length; e < f; e++) {
            g = a[e];
            h = g.color;
            if (g instanceof THREE.DirectionalLight) {
                j = g.matrixWorld.getPosition();
                k = c.dot(j);
                if (!(k <= 0)) {
                    k = k * g.intensity;
                    d.r = d.r + h.r * k;
                    d.g = d.g + h.g * k;
                    d.b = d.b + h.b * k;
                }
            } else if (g instanceof THREE.PointLight) {
                j = g.matrixWorld.getPosition();
                k = c.dot(v.sub(j, b).normalize());
                if (!(k <= 0)) {
                    k = k * (g.distance == 0 ? 1 : 1 - Math.min(b.distanceTo(j) / g.distance, 1));
                    if (k != 0) {
                        k = k * g.intensity;
                        d.r = d.r + h.r * k;
                        d.g = d.g + h.g * k;
                        d.b = d.b + h.b *
                            k;
                    }
                }
            }
        }
    }

    function b(a) {
        if (A[a] == null) {
            A[a] = document.createElementNS("http://www.w3.org/2000/svg", "path");
            D == 0 && A[a].setAttribute("shape-rendering", "crispEdges");
        }
        return A[a]
    }

    function c(a) {
        a = (a + 1) * 0.5;
        return a < 0 ? 0 : a > 1 ? 1 : a
    }
    console.log("THREE.SVGRenderer", THREE.REVISION);
    var d = this,
        e, f, g, h = new THREE.Projector,
        j = document.createElementNS("http://www.w3.org/2000/svg", "svg"),
        l, k, p, m, o, q, n, r, u = new THREE.Rectangle,
        t = new THREE.Rectangle,
        y = false,
        s = new THREE.Color,
        w = new THREE.Color,
        H = new THREE.Color,
        E = new THREE.Color,
        z, v = new THREE.Vector3,
        A = [],
        J = [],
        K, R, P, D = 1;
    this.domElement = j;
    this.sortElements = this.sortObjects = this.autoClear = true;
    this.info = {
        render: {
            vertices: 0,
            faces: 0
        }
    };
    this.setQuality = function(a) {
        switch (a) {
            case "high":
                D = 1;
                break;
            case "low":
                D = 0;
        }
    };
    this.setSize = function(a, b) {
        l = a;
        k = b;
        p = l / 2;
        m = k / 2;
        j.setAttribute("viewBox", -p + " " + -m + " " + l + " " + k);
        j.setAttribute("width", l);
        j.setAttribute("height", k);
        u.set(-p, -m, p, m);
    };
    this.clear = function() {
        for (; j.childNodes.length > 0;) j.removeChild(j.childNodes[0]);
    };
    this.render = function(k,
        l) {
        var i, v, A, C;
        this.autoClear && this.clear();
        d.info.render.vertices = 0;
        d.info.render.faces = 0;
        e = h.projectScene(k, l, this.sortElements);
        f = e.elements;
        g = e.lights;
        P = R = 0;
        if (y = g.length > 0) {
            w.setRGB(0, 0, 0);
            H.setRGB(0, 0, 0);
            E.setRGB(0, 0, 0);
            i = 0;
            for (v = g.length; i < v; i++) {
                C = g[i];
                A = C.color;
                if (C instanceof THREE.AmbientLight) {
                    w.r = w.r + A.r;
                    w.g = w.g + A.g;
                    w.b = w.b + A.b;
                } else if (C instanceof THREE.DirectionalLight) {
                    H.r = H.r + A.r;
                    H.g = H.g + A.g;
                    H.b = H.b + A.b;
                } else if (C instanceof THREE.PointLight) {
                    E.r = E.r + A.r;
                    E.g = E.g + A.g;
                    E.b = E.b + A.b;
                }
            }
        }
        i =
            0;
        for (v = f.length; i < v; i++) {
            A = f[i];
            C = A.material;
            C = C instanceof THREE.MeshFaceMaterial ? A.faceMaterial : C;
            if (!(C === void 0 || C.visible === false)) {
                t.empty();
                if (A instanceof THREE.RenderableParticle) {
                    o = A;
                    o.x = o.x * p;
                    o.y = o.y * -m;
                } else if (A instanceof THREE.RenderableLine) {
                    o = A.v1;
                    q = A.v2;
                    o.positionScreen.x = o.positionScreen.x * p;
                    o.positionScreen.y = o.positionScreen.y * -m;
                    q.positionScreen.x = q.positionScreen.x * p;
                    q.positionScreen.y = q.positionScreen.y * -m;
                    t.addPoint(o.positionScreen.x, o.positionScreen.y);
                    t.addPoint(q.positionScreen.x,
                        q.positionScreen.y);
                    if (u.intersects(t)) {
                        A = o;
                        var Y = q,
                            F = P++;
                        if (J[F] == null) {
                            J[F] = document.createElementNS("http://www.w3.org/2000/svg", "line");
                            D == 0 && J[F].setAttribute("shape-rendering", "crispEdges");
                        }
                        K = J[F];
                        K.setAttribute("x1", A.positionScreen.x);
                        K.setAttribute("y1", A.positionScreen.y);
                        K.setAttribute("x2", Y.positionScreen.x);
                        K.setAttribute("y2", Y.positionScreen.y);
                        if (C instanceof THREE.LineBasicMaterial) {
                            K.setAttribute("style", "fill: none; stroke: " + C.color.getContextStyle() + "; stroke-width: " + C.linewidth +
                                "; stroke-opacity: " + C.opacity + "; stroke-linecap: " + C.linecap + "; stroke-linejoin: " + C.linejoin);
                            j.appendChild(K);
                        }
                    }
                } else if (A instanceof THREE.RenderableFace3) {
                    o = A.v1;
                    q = A.v2;
                    n = A.v3;
                    o.positionScreen.x = o.positionScreen.x * p;
                    o.positionScreen.y = o.positionScreen.y * -m;
                    q.positionScreen.x = q.positionScreen.x * p;
                    q.positionScreen.y = q.positionScreen.y * -m;
                    n.positionScreen.x = n.positionScreen.x * p;
                    n.positionScreen.y = n.positionScreen.y * -m;
                    t.addPoint(o.positionScreen.x, o.positionScreen.y);
                    t.addPoint(q.positionScreen.x,
                        q.positionScreen.y);
                    t.addPoint(n.positionScreen.x, n.positionScreen.y);
                    if (u.intersects(t)) {
                        var Y = o,
                            F = q,
                            ea = n;
                        d.info.render.vertices = d.info.render.vertices + 3;
                        d.info.render.faces++;
                        K = b(R++);
                        K.setAttribute("d", "M " + Y.positionScreen.x + " " + Y.positionScreen.y + " L " + F.positionScreen.x + " " + F.positionScreen.y + " L " + ea.positionScreen.x + "," + ea.positionScreen.y + "z");
                        if (C instanceof THREE.MeshBasicMaterial) s.copy(C.color);
                        else if (C instanceof THREE.MeshLambertMaterial)
                            if (y) {
                                s.r = w.r;
                                s.g = w.g;
                                s.b = w.b;
                                a(g, A.centroidWorld,
                                    A.normalWorld, s);
                                s.r = Math.max(0, Math.min(C.color.r * s.r, 1));
                                s.g = Math.max(0, Math.min(C.color.g * s.g, 1));
                                s.b = Math.max(0, Math.min(C.color.b * s.b, 1));
                            } else s.copy(C.color);
                        else if (C instanceof THREE.MeshDepthMaterial) {
                            z = 1 - C.__2near / (C.__farPlusNear - A.z * C.__farMinusNear);
                            s.setRGB(z, z, z);
                        } else C instanceof THREE.MeshNormalMaterial && s.setRGB(c(A.normalWorld.x), c(A.normalWorld.y), c(A.normalWorld.z));
                        C.wireframe ? K.setAttribute("style", "fill: none; stroke: " + s.getContextStyle() + "; stroke-width: " + C.wireframeLinewidth +
                            "; stroke-opacity: " + C.opacity + "; stroke-linecap: " + C.wireframeLinecap + "; stroke-linejoin: " + C.wireframeLinejoin) : K.setAttribute("style", "fill: " + s.getContextStyle() + "; fill-opacity: " + C.opacity);
                        j.appendChild(K);
                    }
                } else if (A instanceof THREE.RenderableFace4) {
                    o = A.v1;
                    q = A.v2;
                    n = A.v3;
                    r = A.v4;
                    o.positionScreen.x = o.positionScreen.x * p;
                    o.positionScreen.y = o.positionScreen.y * -m;
                    q.positionScreen.x = q.positionScreen.x * p;
                    q.positionScreen.y = q.positionScreen.y * -m;
                    n.positionScreen.x = n.positionScreen.x * p;
                    n.positionScreen.y =
                        n.positionScreen.y * -m;
                    r.positionScreen.x = r.positionScreen.x * p;
                    r.positionScreen.y = r.positionScreen.y * -m;
                    t.addPoint(o.positionScreen.x, o.positionScreen.y);
                    t.addPoint(q.positionScreen.x, q.positionScreen.y);
                    t.addPoint(n.positionScreen.x, n.positionScreen.y);
                    t.addPoint(r.positionScreen.x, r.positionScreen.y);
                    if (u.intersects(t)) {
                        var Y = o,
                            F = q,
                            ea = n,
                            fa = r;
                        d.info.render.vertices = d.info.render.vertices + 4;
                        d.info.render.faces++;
                        K = b(R++);
                        K.setAttribute("d", "M " + Y.positionScreen.x + " " + Y.positionScreen.y + " L " + F.positionScreen.x +
                            " " + F.positionScreen.y + " L " + ea.positionScreen.x + "," + ea.positionScreen.y + " L " + fa.positionScreen.x + "," + fa.positionScreen.y + "z");
                        if (C instanceof THREE.MeshBasicMaterial) s.copy(C.color);
                        else if (C instanceof THREE.MeshLambertMaterial)
                            if (y) {
                                s.r = w.r;
                                s.g = w.g;
                                s.b = w.b;
                                a(g, A.centroidWorld, A.normalWorld, s);
                                s.r = Math.max(0, Math.min(C.color.r * s.r, 1));
                                s.g = Math.max(0, Math.min(C.color.g * s.g, 1));
                                s.b = Math.max(0, Math.min(C.color.b * s.b, 1));
                            } else s.copy(C.color);
                        else if (C instanceof THREE.MeshDepthMaterial) {
                            z = 1 - C.__2near /
                                (C.__farPlusNear - A.z * C.__farMinusNear);
                            s.setRGB(z, z, z);
                        } else C instanceof THREE.MeshNormalMaterial && s.setRGB(c(A.normalWorld.x), c(A.normalWorld.y), c(A.normalWorld.z));
                        C.wireframe ? K.setAttribute("style", "fill: none; stroke: " + s.getContextStyle() + "; stroke-width: " + C.wireframeLinewidth + "; stroke-opacity: " + C.opacity + "; stroke-linecap: " + C.wireframeLinecap + "; stroke-linejoin: " + C.wireframeLinejoin) : K.setAttribute("style", "fill: " + s.getContextStyle() + "; fill-opacity: " + C.opacity);
                        j.appendChild(K);
                    }
                }
            }
        }
    };
};
THREE.ShaderChunk = {
    fog_pars_fragment: "#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",
    fog_fragment: "#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
    envmap_pars_fragment: "#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#endif",
    envmap_fragment: "#ifdef USE_ENVMAP\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, reflectivity );\n} else {\ngl_FragColor.xyz = gl_FragColor.xyz * cubeColor.xyz;\n}\n#endif",
    envmap_pars_vertex: "#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",
    envmap_vertex: "#ifdef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = mat3( objectMatrix[ 0 ].xyz, objectMatrix[ 1 ].xyz, objectMatrix[ 2 ].xyz ) * normal;\nif ( useRefract ) {\nvReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );\n} else {\nvReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );\n}\n#endif",
    map_particle_pars_fragment: "#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
    map_particle_fragment: "#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, gl_PointCoord );\n#endif",
    map_pars_vertex: "#ifdef USE_MAP\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",
    map_pars_fragment: "#ifdef USE_MAP\nvarying vec2 vUv;\nuniform sampler2D map;\n#endif",
    map_vertex: "#ifdef USE_MAP\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",
    map_fragment: "#ifdef USE_MAP\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( map, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( map, vUv );\n#endif\n#endif",
    lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",
    lightmap_pars_vertex: "#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
    lightmap_fragment: "#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",
    lightmap_vertex: "#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",
    lights_lambert_pars_vertex: "uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
    lights_lambert_vertex: "vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nlVector = normalize( lVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - mPosition.xyz ) );\nif ( spotEffect > spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
    lights_phong_pars_vertex: "#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvarying vec3 vWorldPosition;\n#endif",
    lights_phong_vertex: "#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvWorldPosition = mPosition.xyz;\n#endif",
    lights_phong_pars_fragment: "uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
    lights_phong_fragment: "vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
    color_pars_fragment: "#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",
    color_fragment: "#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",
    color_pars_vertex: "#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",
    color_vertex: "#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",
    skinning_pars_vertex: "#ifdef USE_SKINNING\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n#endif",
    skinning_vertex: "#ifdef USE_SKINNING\ngl_Position  = ( boneGlobalMatrices[ int( skinIndex.x ) ] * skinVertexA ) * skinWeight.x;\ngl_Position += ( boneGlobalMatrices[ int( skinIndex.y ) ] * skinVertexB ) * skinWeight.y;\ngl_Position  = projectionMatrix * modelViewMatrix * gl_Position;\n#endif",
    morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
    morphtarget_vertex: "#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );\n#endif",
    default_vertex: "#ifndef USE_MORPHTARGETS\n#ifndef USE_SKINNING\ngl_Position = projectionMatrix * mvPosition;\n#endif\n#endif",
    morphnormal_vertex: "#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\nvec3 transformedNormal = normalMatrix * morphedNormal;\n#else\nvec3 transformedNormal = normalMatrix * normal;\n#endif",
    shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",
    shadowmap_fragment: "#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
    shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",
    shadowmap_vertex: "#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n#ifdef USE_MORPHTARGETS\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( morphed, 1.0 );\n#else\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( position, 1.0 );\n#endif\n}\n#endif",
    alphatest_fragment: "#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",
    linear_to_gamma_fragment: "#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"
};
THREE.UniformsUtils = {
    merge: function(a) {
        var b, c, d, e = {};
        for (b = 0; b < a.length; b++) {
            d = this.clone(a[b]);
            for (c in d) e[c] = d[c];
        }
        return e
    },
    clone: function(a) {
        var b, c, d, e = {};
        for (b in a) {
            e[b] = {};
            for (c in a[b]) {
                d = a[b][c];
                e[b][c] = d instanceof THREE.Color || d instanceof THREE.Vector2 || d instanceof THREE.Vector3 || d instanceof THREE.Vector4 || d instanceof THREE.Matrix4 || d instanceof THREE.Texture ? d.clone() : d instanceof Array ? d.slice() : d;
            }
        }
        return e
    }
};
THREE.UniformsLib = {
    common: {
        diffuse: {
            type: "c",
            value: new THREE.Color(15658734)
        },
        opacity: {
            type: "f",
            value: 1
        },
        map: {
            type: "t",
            value: 0,
            texture: null
        },
        offsetRepeat: {
            type: "v4",
            value: new THREE.Vector4(0, 0, 1, 1)
        },
        lightMap: {
            type: "t",
            value: 2,
            texture: null
        },
        envMap: {
            type: "t",
            value: 1,
            texture: null
        },
        flipEnvMap: {
            type: "f",
            value: -1
        },
        useRefract: {
            type: "i",
            value: 0
        },
        reflectivity: {
            type: "f",
            value: 1
        },
        refractionRatio: {
            type: "f",
            value: 0.98
        },
        combine: {
            type: "i",
            value: 0
        },
        morphTargetInfluences: {
            type: "f",
            value: 0
        }
    },
    fog: {
        fogDensity: {
            type: "f",
            value: 2.5E-4
        },
        fogNear: {
            type: "f",
            value: 1
        },
        fogFar: {
            type: "f",
            value: 2E3
        },
        fogColor: {
            type: "c",
            value: new THREE.Color(16777215)
        }
    },
    lights: {
        ambientLightColor: {
            type: "fv",
            value: []
        },
        directionalLightDirection: {
            type: "fv",
            value: []
        },
        directionalLightColor: {
            type: "fv",
            value: []
        },
        pointLightColor: {
            type: "fv",
            value: []
        },
        pointLightPosition: {
            type: "fv",
            value: []
        },
        pointLightDistance: {
            type: "fv1",
            value: []
        },
        spotLightColor: {
            type: "fv",
            value: []
        },
        spotLightPosition: {
            type: "fv",
            value: []
        },
        spotLightDirection: {
            type: "fv",
            value: []
        },
        spotLightDistance: {
            type: "fv1",
            value: []
        },
        spotLightAngle: {
            type: "fv1",
            value: []
        },
        spotLightExponent: {
            type: "fv1",
            value: []
        }
    },
    particle: {
        psColor: {
            type: "c",
            value: new THREE.Color(15658734)
        },
        opacity: {
            type: "f",
            value: 1
        },
        size: {
            type: "f",
            value: 1
        },
        scale: {
            type: "f",
            value: 1
        },
        map: {
            type: "t",
            value: 0,
            texture: null
        },
        fogDensity: {
            type: "f",
            value: 2.5E-4
        },
        fogNear: {
            type: "f",
            value: 1
        },
        fogFar: {
            type: "f",
            value: 2E3
        },
        fogColor: {
            type: "c",
            value: new THREE.Color(16777215)
        }
    },
    shadowmap: {
        shadowMap: {
            type: "tv",
            value: 6,
            texture: []
        },
        shadowMapSize: {
            type: "v2v",
            value: []
        },
        shadowBias: {
            type: "fv1",
            value: []
        },
        shadowDarkness: {
            type: "fv1",
            value: []
        },
        shadowMatrix: {
            type: "m4v",
            value: []
        }
    }
};
THREE.ShaderLib = {
    depth: {
        uniforms: {
            mNear: {
                type: "f",
                value: 1
            },
            mFar: {
                type: "f",
                value: 2E3
            },
            opacity: {
                type: "f",
                value: 1
            }
        },
        vertexShader: "void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
        fragmentShader: "uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"
    },
    normal: {
        uniforms: {
            opacity: {
                type: "f",
                value: 1
            }
        },
        vertexShader: "varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalMatrix * normal;\ngl_Position = projectionMatrix * mvPosition;\n}",
        fragmentShader: "uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"
    },
    basic: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.shadowmap]),
        vertexShader: [THREE.ShaderChunk.map_pars_vertex,
            THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.morphtarget_vertex,
            THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"
        ].join("\n"),
        fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, "void main() {\ngl_FragColor = vec4( diffuse, opacity );", THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphatest_fragment,
            THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "}"
        ].join("\n")
    },
    lambert: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
            ambient: {
                type: "c",
                value: new THREE.Color(16777215)
            },
            emissive: {
                type: "c",
                value: new THREE.Color(0)
            },
            wrapRGB: {
                type: "v3",
                value: new THREE.Vector3(1,
                    1, 1)
            }
        }]),
        vertexShader: ["varying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif", THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_lambert_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.map_vertex,
            THREE.ShaderChunk.lightmap_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.morphnormal_vertex, "#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif", THREE.ShaderChunk.lights_lambert_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"
        ].join("\n"),
        fragmentShader: ["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
            THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, "void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );", THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphatest_fragment, "#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",
            THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "}"
        ].join("\n")
    },
    phong: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
            ambient: {
                type: "c",
                value: new THREE.Color(16777215)
            },
            emissive: {
                type: "c",
                value: new THREE.Color(0)
            },
            specular: {
                type: "c",
                value: new THREE.Color(1118481)
            },
            shininess: {
                type: "f",
                value: 30
            },
            wrapRGB: {
                type: "v3",
                value: new THREE.Vector3(1, 1, 1)
            }
        }]),
        vertexShader: ["varying vec3 vViewPosition;\nvarying vec3 vNormal;", THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_phong_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
            THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.color_vertex, "#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif\nvViewPosition = -mvPosition.xyz;", THREE.ShaderChunk.morphnormal_vertex, "vNormal = transformedNormal;", THREE.ShaderChunk.lights_phong_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"
        ].join("\n"),
        fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.lights_phong_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, "void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",
            THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.lights_phong_fragment, THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "}"
        ].join("\n")
    },
    particle_basic: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.particle, THREE.UniformsLib.shadowmap]),
        vertexShader: ["uniform float size;\nuniform float scale;",
            THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.shadowmap_vertex, "}"
        ].join("\n"),
        fragmentShader: ["uniform vec3 psColor;\nuniform float opacity;", THREE.ShaderChunk.color_pars_fragment,
            THREE.ShaderChunk.map_particle_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, "void main() {\ngl_FragColor = vec4( psColor, opacity );", THREE.ShaderChunk.map_particle_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.fog_fragment, "}"
        ].join("\n")
    },
    depthRGBA: {
        uniforms: {},
        vertexShader: [THREE.ShaderChunk.morphtarget_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
            THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, "}"
        ].join("\n"),
        fragmentShader: "vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"
    }
};
THREE.WebGLRenderer = function(a) {
    function b(a, b) {
        var c = a.vertices.length,
            d = b.material;
        if (d.attributes) {
            if (a.__webglCustomAttributesList === void 0) a.__webglCustomAttributesList = [];
            for (var e in d.attributes) {
                var f = d.attributes[e];
                if (!f.__webglInitialized || f.createUniqueBuffers) {
                    f.__webglInitialized = true;
                    var g = 1;
                    f.type === "v2" ? g = 2 : f.type === "v3" ? g = 3 : f.type === "v4" ? g = 4 : f.type === "c" && (g = 3);
                    f.size = g;
                    f.array = new Float32Array(c * g);
                    f.buffer = i.createBuffer();
                    f.buffer.belongsToAttribute = e;
                    f.needsUpdate = true;
                }
                a.__webglCustomAttributesList.push(f);
            }
        }
    }

    function c(a, b) {
        if (a.material && !(a.material instanceof THREE.MeshFaceMaterial)) return a.material;
        if (b.materialIndex >= 0) return a.geometry.materials[b.materialIndex]
    }

    function d(a) {
        return a instanceof THREE.MeshBasicMaterial && !a.envMap || a instanceof THREE.MeshDepthMaterial ? false : a && a.shading !== void 0 && a.shading === THREE.SmoothShading ? THREE.SmoothShading : THREE.FlatShading
    }

    function e(a) {
        return a.map || a.lightMap || a instanceof THREE.ShaderMaterial ? true : false
    }

    function f(a, b, c) {
        var d, e, f, g, h = a.vertices;
        g = h.length;
        var j = a.colors,
            k = j.length,
            l = a.__vertexArray,
            m = a.__colorArray,
            n = a.__sortArray,
            p = a.verticesNeedUpdate,
            o = a.colorsNeedUpdate,
            q = a.__webglCustomAttributesList;
        if (c.sortParticles) {
            xa.copy(Ba);
            xa.multiplySelf(c.matrixWorld);
            for (d = 0; d < g; d++) {
                e = h[d];
                $a.copy(e);
                xa.multiplyVector3($a);
                n[d] = [$a.z, d];
            }
            n.sort(function(a, b) {
                return b[0] - a[0]
            });
            for (d = 0; d < g; d++) {
                e = h[n[d][1]];
                f = d * 3;
                l[f] = e.x;
                l[f + 1] = e.y;
                l[f + 2] = e.z;
            }
            for (d = 0; d < k; d++) {
                f = d * 3;
                e = j[n[d][1]];
                m[f] = e.r;
                m[f + 1] = e.g;
                m[f + 2] = e.b;
            }
            if (q) {
                j = 0;
                for (k = q.length; j < k; j++) {
                    h = q[j];
                    if (h.boundTo === void 0 || h.boundTo === "vertices") {
                        f = 0;
                        e = h.value.length;
                        if (h.size === 1)
                            for (d = 0; d < e; d++) {
                                g = n[d][1];
                                h.array[d] = h.value[g];
                            } else if (h.size === 2)
                                for (d = 0; d < e; d++) {
                                    g = n[d][1];
                                    g = h.value[g];
                                    h.array[f] = g.x;
                                    h.array[f + 1] = g.y;
                                    f = f + 2;
                                } else if (h.size === 3)
                                    if (h.type === "c")
                                        for (d = 0; d < e; d++) {
                                            g = n[d][1];
                                            g = h.value[g];
                                            h.array[f] = g.r;
                                            h.array[f + 1] = g.g;
                                            h.array[f + 2] = g.b;
                                            f = f + 3;
                                        } else
                                            for (d = 0; d < e; d++) {
                                                g = n[d][1];
                                                g = h.value[g];
                                                h.array[f] = g.x;
                                                h.array[f + 1] = g.y;
                                                h.array[f + 2] = g.z;
                                                f = f + 3;
                                            } else if (h.size === 4)
                                                for (d = 0; d < e; d++) {
                                                    g = n[d][1];
                                                    g = h.value[g];
                                                    h.array[f] = g.x;
                                                    h.array[f + 1] = g.y;
                                                    h.array[f + 2] = g.z;
                                                    h.array[f + 3] = g.w;
                                                    f = f + 4;
                                                }
                    }
                }
            }
        } else {
            if (p)
                for (d = 0; d < g; d++) {
                    e = h[d];
                    f = d * 3;
                    l[f] = e.x;
                    l[f + 1] = e.y;
                    l[f + 2] = e.z;
                }
            if (o)
                for (d = 0; d < k; d++) {
                    e = j[d];
                    f = d * 3;
                    m[f] = e.r;
                    m[f + 1] = e.g;
                    m[f + 2] = e.b;
                }
            if (q) {
                j = 0;
                for (k = q.length; j < k; j++) {
                    h = q[j];
                    if (h.needsUpdate && (h.boundTo === void 0 || h.boundTo === "vertices")) {
                        e = h.value.length;
                        f = 0;
                        if (h.size === 1)
                            for (d = 0; d < e; d++) h.array[d] = h.value[d];
                        else if (h.size === 2)
                            for (d = 0; d < e; d++) {
                                g = h.value[d];
                                h.array[f] = g.x;
                                h.array[f + 1] = g.y;
                                f = f + 2;
                            } else if (h.size ===
                                3)
                                if (h.type === "c")
                                    for (d = 0; d < e; d++) {
                                        g = h.value[d];
                                        h.array[f] = g.r;
                                        h.array[f + 1] = g.g;
                                        h.array[f + 2] = g.b;
                                        f = f + 3;
                                    } else
                                        for (d = 0; d < e; d++) {
                                            g = h.value[d];
                                            h.array[f] = g.x;
                                            h.array[f + 1] = g.y;
                                            h.array[f + 2] = g.z;
                                            f = f + 3;
                                        } else if (h.size === 4)
                                            for (d = 0; d < e; d++) {
                                                g = h.value[d];
                                                h.array[f] = g.x;
                                                h.array[f + 1] = g.y;
                                                h.array[f + 2] = g.z;
                                                h.array[f + 3] = g.w;
                                                f = f + 4;
                                            }
                    }
                }
            }
        }
        if (p || c.sortParticles) {
            i.bindBuffer(i.ARRAY_BUFFER, a.__webglVertexBuffer);
            i.bufferData(i.ARRAY_BUFFER, l, b);
        }
        if (o || c.sortParticles) {
            i.bindBuffer(i.ARRAY_BUFFER, a.__webglColorBuffer);
            i.bufferData(i.ARRAY_BUFFER,
                m, b);
        }
        if (q) {
            j = 0;
            for (k = q.length; j < k; j++) {
                h = q[j];
                if (h.needsUpdate || c.sortParticles) {
                    i.bindBuffer(i.ARRAY_BUFFER, h.buffer);
                    i.bufferData(i.ARRAY_BUFFER, h.array, b);
                }
            }
        }
    }

    function g(a, b) {
        return b.z - a.z
    }

    function h(a, b, c) {
        if (a.length)
            for (var d = 0, e = a.length; d < e; d++) {
                ea = U = null;
                Y = F = O = ia = Ka = Ma = Q = -1;
                Ta = true;
                a[d].render(b, c, hb, Cb);
                ea = U = null;
                Y = F = O = ia = Ka = Ma = Q = -1;
                Ta = true;
            }
    }

    function j(a, b, c, d, e, f, g, h) {
        var i, j, k, l;
        if (b) {
            j = a.length - 1;
            l = b = -1;
        } else {
            j = 0;
            b = a.length;
            l = 1;
        }
        for (var m = j; m !== b; m = m + l) {
            i = a[m];
            if (i.render) {
                j = i.object;
                k =
                    i.buffer;
                if (h) i = h;
                else {
                    i = i[c];
                    if (!i) continue;
                    g && G.setBlending(i.blending, i.blendEquation, i.blendSrc, i.blendDst);
                    G.setDepthTest(i.depthTest);
                    G.setDepthWrite(i.depthWrite);
                    u(i.polygonOffset, i.polygonOffsetFactor, i.polygonOffsetUnits);
                }
                G.setObjectFaces(j);
                k instanceof THREE.BufferGeometry ? G.renderBufferDirect(d, e, f, i, k, j) : G.renderBuffer(d, e, f, i, k, j);
            }
        }
    }

    function l(a, b, c, d, e, f, g) {
        for (var h, i, j = 0, k = a.length; j < k; j++) {
            h = a[j];
            i = h.object;
            if (i.visible) {
                if (g) h = g;
                else {
                    h = h[b];
                    if (!h) continue;
                    f && G.setBlending(h.blending,
                        h.blendEquation, h.blendSrc, h.blendDst);
                    G.setDepthTest(h.depthTest);
                    G.setDepthWrite(h.depthWrite);
                    u(h.polygonOffset, h.polygonOffsetFactor, h.polygonOffsetUnits);
                }
                G.renderImmediateObject(c, d, e, h, i);
            }
        }
    }

    function k(a, b, c) {
        a.push({
            buffer: b,
            object: c,
            opaque: null,
            transparent: null
        });
    }

    function p(a) {
        for (var b in a.attributes)
            if (a.attributes[b].needsUpdate) return true;
        return false
    }

    function m(a) {
        for (var b in a.attributes) a.attributes[b].needsUpdate = false;
    }

    function o(a, b) {
        for (var c = a.length - 1; c >= 0; c--) a[c].object ===
            b && a.splice(c, 1);
    }

    function q(a, b) {
        for (var c = a.length - 1; c >= 0; c--) a[c] === b && a.splice(c, 1);
    }

    function n(a, b, c, d, e) {
        if (!d.program || d.needsUpdate) {
            G.initMaterial(d, b, c, e);
            d.needsUpdate = false;
        }
        if (d.morphTargets && !e.__webglMorphTargetInfluences) {
            e.__webglMorphTargetInfluences = new Float32Array(G.maxMorphTargets);
            for (var f = 0, g = G.maxMorphTargets; f < g; f++) e.__webglMorphTargetInfluences[f] = 0;
        }
        var h = false,
            f = d.program,
            g = f.uniforms,
            j = d.uniforms;
        if (f !== U) {
            i.useProgram(f);
            U = f;
            h = true;
        }
        if (d.id !== Y) {
            Y = d.id;
            h = true;
        }
        if (h || a !==
            ea) {
            i.uniformMatrix4fv(g.projectionMatrix, false, a._projectionMatrixArray);
            a !== ea && (ea = a);
        }
        if (h) {
            if (c && d.fog) {
                j.fogColor.value = c.color;
                if (c instanceof THREE.Fog) {
                    j.fogNear.value = c.near;
                    j.fogFar.value = c.far;
                } else if (c instanceof THREE.FogExp2) j.fogDensity.value = c.density;
            }
            if (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d.lights) {
                if (Ta) {
                    for (var k, l = 0, m = 0, n = 0, p, o, q, r = Qa, s = r.directional.colors, t = r.directional.positions, u = r.point.colors, v = r.point.positions, w = r.point.distances,
                            z = r.spot.colors, A = r.spot.positions, C = r.spot.distances, D = r.spot.directions, F = r.spot.angles, J = r.spot.exponents, K = 0, Q = 0, M = 0, O = q = 0, c = O = 0, h = b.length; c < h; c++) {
                        k = b[c];
                        if (!k.onlyShadow) {
                            p = k.color;
                            o = k.intensity;
                            q = k.distance;
                            if (k instanceof THREE.AmbientLight)
                                if (G.gammaInput) {
                                    l = l + p.r * p.r;
                                    m = m + p.g * p.g;
                                    n = n + p.b * p.b;
                                } else {
                                    l = l + p.r;
                                    m = m + p.g;
                                    n = n + p.b;
                                }
                            else if (k instanceof THREE.DirectionalLight) {
                                q = K * 3;
                                if (G.gammaInput) {
                                    s[q] = p.r * p.r * o * o;
                                    s[q + 1] = p.g * p.g * o * o;
                                    s[q + 2] = p.b * p.b * o * o;
                                } else {
                                    s[q] = p.r * o;
                                    s[q + 1] = p.g * o;
                                    s[q + 2] = p.b * o;
                                }
                                aa.copy(k.matrixWorld.getPosition());
                                aa.subSelf(k.target.matrixWorld.getPosition());
                                aa.normalize();
                                t[q] = aa.x;
                                t[q + 1] = aa.y;
                                t[q + 2] = aa.z;
                                K = K + 1;
                            } else if (k instanceof THREE.PointLight) {
                                O = Q * 3;
                                if (G.gammaInput) {
                                    u[O] = p.r * p.r * o * o;
                                    u[O + 1] = p.g * p.g * o * o;
                                    u[O + 2] = p.b * p.b * o * o;
                                } else {
                                    u[O] = p.r * o;
                                    u[O + 1] = p.g * o;
                                    u[O + 2] = p.b * o;
                                }
                                p = k.matrixWorld.getPosition();
                                v[O] = p.x;
                                v[O + 1] = p.y;
                                v[O + 2] = p.z;
                                w[Q] = q;
                                Q = Q + 1;
                            } else if (k instanceof THREE.SpotLight) {
                                O = M * 3;
                                if (G.gammaInput) {
                                    z[O] = p.r * p.r * o * o;
                                    z[O + 1] = p.g * p.g * o * o;
                                    z[O + 2] = p.b * p.b * o * o;
                                } else {
                                    z[O] = p.r * o;
                                    z[O + 1] = p.g * o;
                                    z[O + 2] = p.b * o;
                                }
                                p = k.matrixWorld.getPosition();
                                A[O] = p.x;
                                A[O + 1] = p.y;
                                A[O + 2] = p.z;
                                C[M] = q;
                                aa.copy(p);
                                aa.subSelf(k.target.matrixWorld.getPosition());
                                aa.normalize();
                                D[O] = aa.x;
                                D[O + 1] = aa.y;
                                D[O + 2] = aa.z;
                                F[M] = Math.cos(k.angle);
                                J[M] = k.exponent;
                                M = M + 1;
                            }
                        }
                    }
                    c = K * 3;
                    for (h = s.length; c < h; c++) s[c] = 0;
                    c = Q * 3;
                    for (h = u.length; c < h; c++) u[c] = 0;
                    c = M * 3;
                    for (h = z.length; c < h; c++) z[c] = 0;
                    r.directional.length = K;
                    r.point.length = Q;
                    r.spot.length = M;
                    r.ambient[0] = l;
                    r.ambient[1] = m;
                    r.ambient[2] = n;
                    Ta = false;
                }
                c = Qa;
                j.ambientLightColor.value = c.ambient;
                j.directionalLightColor.value = c.directional.colors;
                j.directionalLightDirection.value = c.directional.positions;
                j.pointLightColor.value = c.point.colors;
                j.pointLightPosition.value = c.point.positions;
                j.pointLightDistance.value = c.point.distances;
                j.spotLightColor.value = c.spot.colors;
                j.spotLightPosition.value = c.spot.positions;
                j.spotLightDistance.value = c.spot.distances;
                j.spotLightDirection.value = c.spot.directions;
                j.spotLightAngle.value = c.spot.angles;
                j.spotLightExponent.value = c.spot.exponents;
            }
            if (d instanceof THREE.MeshBasicMaterial || d instanceof THREE.MeshLambertMaterial ||
                d instanceof THREE.MeshPhongMaterial) {
                j.opacity.value = d.opacity;
                G.gammaInput ? j.diffuse.value.copyGammaToLinear(d.color) : j.diffuse.value = d.color;
                (j.map.texture = d.map) && j.offsetRepeat.value.set(d.map.offset.x, d.map.offset.y, d.map.repeat.x, d.map.repeat.y);
                j.lightMap.texture = d.lightMap;
                j.envMap.texture = d.envMap;
                j.flipEnvMap.value = d.envMap instanceof THREE.WebGLRenderTargetCube ? 1 : -1;
                j.reflectivity.value = d.reflectivity;
                j.refractionRatio.value = d.refractionRatio;
                j.combine.value = d.combine;
                j.useRefract.value =
                    d.envMap && d.envMap.mapping instanceof THREE.CubeRefractionMapping;
            }
            if (d instanceof THREE.LineBasicMaterial) {
                j.diffuse.value = d.color;
                j.opacity.value = d.opacity;
            } else if (d instanceof THREE.ParticleBasicMaterial) {
                j.psColor.value = d.color;
                j.opacity.value = d.opacity;
                j.size.value = d.size;
                j.scale.value = E.height / 2;
                j.map.texture = d.map;
            } else if (d instanceof THREE.MeshPhongMaterial) {
                j.shininess.value = d.shininess;
                if (G.gammaInput) {
                    j.ambient.value.copyGammaToLinear(d.ambient);
                    j.emissive.value.copyGammaToLinear(d.emissive);
                    j.specular.value.copyGammaToLinear(d.specular);
                } else {
                    j.ambient.value = d.ambient;
                    j.emissive.value = d.emissive;
                    j.specular.value = d.specular;
                }
                d.wrapAround && j.wrapRGB.value.copy(d.wrapRGB);
            } else if (d instanceof THREE.MeshLambertMaterial) {
                if (G.gammaInput) {
                    j.ambient.value.copyGammaToLinear(d.ambient);
                    j.emissive.value.copyGammaToLinear(d.emissive);
                } else {
                    j.ambient.value = d.ambient;
                    j.emissive.value = d.emissive;
                }
                d.wrapAround && j.wrapRGB.value.copy(d.wrapRGB);
            } else if (d instanceof THREE.MeshDepthMaterial) {
                j.mNear.value =
                    a.near;
                j.mFar.value = a.far;
                j.opacity.value = d.opacity;
            } else if (d instanceof THREE.MeshNormalMaterial) j.opacity.value = d.opacity;
            if (e.receiveShadow && !d._shadowPass && j.shadowMatrix) {
                h = c = 0;
                for (k = b.length; h < k; h++) {
                    l = b[h];
                    if (l.castShadow && (l instanceof THREE.SpotLight || l instanceof THREE.DirectionalLight && !l.shadowCascade)) {
                        j.shadowMap.texture[c] = l.shadowMap;
                        j.shadowMapSize.value[c] = l.shadowMapSize;
                        j.shadowMatrix.value[c] = l.shadowMatrix;
                        j.shadowDarkness.value[c] = l.shadowDarkness;
                        j.shadowBias.value[c] = l.shadowBias;
                        c++;
                    }
                }
            }
            b = d.uniformsList;
            j = 0;
            for (c = b.length; j < c; j++)
                if (l = f.uniforms[b[j][1]]) {
                    h = b[j][0];
                    m = h.type;
                    k = h.value;
                    switch (m) {
                        case "i":
                            i.uniform1i(l, k);
                            break;
                        case "f":
                            i.uniform1f(l, k);
                            break;
                        case "v2":
                            i.uniform2f(l, k.x, k.y);
                            break;
                        case "v3":
                            i.uniform3f(l, k.x, k.y, k.z);
                            break;
                        case "v4":
                            i.uniform4f(l, k.x, k.y, k.z, k.w);
                            break;
                        case "c":
                            i.uniform3f(l, k.r, k.g, k.b);
                            break;
                        case "fv1":
                            i.uniform1fv(l, k);
                            break;
                        case "fv":
                            i.uniform3fv(l, k);
                            break;
                        case "v2v":
                            if (!h._array) h._array = new Float32Array(2 * k.length);
                            m = 0;
                            for (n = k.length; m <
                                n; m++) {
                                r = m * 2;
                                h._array[r] = k[m].x;
                                h._array[r + 1] = k[m].y;
                            }
                            i.uniform2fv(l, h._array);
                            break;
                        case "v3v":
                            if (!h._array) h._array = new Float32Array(3 * k.length);
                            m = 0;
                            for (n = k.length; m < n; m++) {
                                r = m * 3;
                                h._array[r] = k[m].x;
                                h._array[r + 1] = k[m].y;
                                h._array[r + 2] = k[m].z;
                            }
                            i.uniform3fv(l, h._array);
                            break;
                        case "v4v":
                            if (!h._array) h._array = new Float32Array(4 * k.length);
                            m = 0;
                            for (n = k.length; m < n; m++) {
                                r = m * 4;
                                h._array[r] = k[m].x;
                                h._array[r + 1] = k[m].y;
                                h._array[r + 2] = k[m].z;
                                h._array[r + 3] = k[m].w;
                            }
                            i.uniform4fv(l, h._array);
                            break;
                        case "m4":
                            if (!h._array) h._array =
                                new Float32Array(16);
                            k.flattenToArray(h._array);
                            i.uniformMatrix4fv(l, false, h._array);
                            break;
                        case "m4v":
                            if (!h._array) h._array = new Float32Array(16 * k.length);
                            m = 0;
                            for (n = k.length; m < n; m++) k[m].flattenToArrayOffset(h._array, m * 16);
                            i.uniformMatrix4fv(l, false, h._array);
                            break;
                        case "t":
                            i.uniform1i(l, k);
                            l = h.texture;
                            if (!l) continue;
                            if (l.image instanceof Array && l.image.length === 6) {
                                h = l;
                                if (h.image.length === 6)
                                    if (h.needsUpdate) {
                                        if (!h.image.__webglTextureCube) h.image.__webglTextureCube = i.createTexture();
                                        i.activeTexture(i.TEXTURE0 +
                                            k);
                                        i.bindTexture(i.TEXTURE_CUBE_MAP, h.image.__webglTextureCube);
                                        k = [];
                                        for (l = 0; l < 6; l++) {
                                            m = k;
                                            n = l;
                                            if (G.autoScaleCubemaps) {
                                                r = h.image[l];
                                                t = ib;
                                                if (!(r.width <= t && r.height <= t)) {
                                                    u = Math.max(r.width, r.height);
                                                    s = Math.floor(r.width * t / u);
                                                    t = Math.floor(r.height * t / u);
                                                    u = document.createElement("canvas");
                                                    u.width = s;
                                                    u.height = t;
                                                    u.getContext("2d").drawImage(r, 0, 0, r.width, r.height, 0, 0, s, t);
                                                    r = u;
                                                }
                                            } else r = h.image[l];
                                            m[n] = r;
                                        }
                                        l = k[0];
                                        m = (l.width & l.width - 1) === 0 && (l.height & l.height - 1) === 0;
                                        n = H(h.format);
                                        r = H(h.type);
                                        y(i.TEXTURE_CUBE_MAP,
                                            h, m);
                                        for (l = 0; l < 6; l++) i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + l, 0, n, n, r, k[l]);
                                        h.generateMipmaps && m && i.generateMipmap(i.TEXTURE_CUBE_MAP);
                                        h.needsUpdate = false;
                                        if (h.onUpdate) h.onUpdate();
                                    } else {
                                        i.activeTexture(i.TEXTURE0 + k);
                                        i.bindTexture(i.TEXTURE_CUBE_MAP, h.image.__webglTextureCube);
                                    }
                            } else if (l instanceof THREE.WebGLRenderTargetCube) {
                                h = l;
                                i.activeTexture(i.TEXTURE0 + k);
                                i.bindTexture(i.TEXTURE_CUBE_MAP, h.__webglTexture);
                            } else G.setTexture(l, k);
                            break;
                        case "tv":
                            if (!h._array) {
                                h._array = [];
                                m = 0;
                                for (n = h.texture.length; m <
                                    n; m++) h._array[m] = k + m;
                            }
                            i.uniform1iv(l, h._array);
                            m = 0;
                            for (n = h.texture.length; m < n; m++)(l = h.texture[m]) && G.setTexture(l, h._array[m]);
                    }
                } if ((d instanceof THREE.ShaderMaterial || d instanceof THREE.MeshPhongMaterial || d.envMap) && g.cameraPosition !== null) {
                b = a.matrixWorld.getPosition();
                i.uniform3f(g.cameraPosition, b.x, b.y, b.z);
            }(d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.ShaderMaterial || d.skinning) && g.viewMatrix !== null && i.uniformMatrix4fv(g.viewMatrix, false, a._viewMatrixArray);
            d.skinning && i.uniformMatrix4fv(g.boneGlobalMatrices, false, e.boneMatrices);
        }
        i.uniformMatrix4fv(g.modelViewMatrix, false, e._modelViewMatrix.elements);
        g.normalMatrix && i.uniformMatrix3fv(g.normalMatrix, false, e._normalMatrix.elements);
        g.objectMatrix !== null && i.uniformMatrix4fv(g.objectMatrix, false, e.matrixWorld.elements);
        return f
    }

    function r(a, b) {
        a._modelViewMatrix.multiply(b.matrixWorldInverse, a.matrixWorld);
        a._normalMatrix.getInverse(a._modelViewMatrix);
        a._normalMatrix.transpose();
    }

    function u(a, b, c) {
        if (Ra !==
            a) {
            a ? i.enable(i.POLYGON_OFFSET_FILL) : i.disable(i.POLYGON_OFFSET_FILL);
            Ra = a;
        }
        if (a && (La !== b || Sa !== c)) {
            i.polygonOffset(b, c);
            La = b;
            Sa = c;
        }
    }

    function t(a, b) {
        var c;
        a === "fragment" ? c = i.createShader(i.FRAGMENT_SHADER) : a === "vertex" && (c = i.createShader(i.VERTEX_SHADER));
        i.shaderSource(c, b);
        i.compileShader(c);
        if (!i.getShaderParameter(c, i.COMPILE_STATUS)) {
            console.error(i.getShaderInfoLog(c));
            console.error(b);
            return null
        }
        return c
    }

    function y(a, b, c) {
        if (c) {
            i.texParameteri(a, i.TEXTURE_WRAP_S, H(b.wrapS));
            i.texParameteri(a,
                i.TEXTURE_WRAP_T, H(b.wrapT));
            i.texParameteri(a, i.TEXTURE_MAG_FILTER, H(b.magFilter));
            i.texParameteri(a, i.TEXTURE_MIN_FILTER, H(b.minFilter));
        } else {
            i.texParameteri(a, i.TEXTURE_WRAP_S, i.CLAMP_TO_EDGE);
            i.texParameteri(a, i.TEXTURE_WRAP_T, i.CLAMP_TO_EDGE);
            i.texParameteri(a, i.TEXTURE_MAG_FILTER, w(b.magFilter));
            i.texParameteri(a, i.TEXTURE_MIN_FILTER, w(b.minFilter));
        }
    }

    function s(a, b) {
        i.bindRenderbuffer(i.RENDERBUFFER, a);
        if (b.depthBuffer && !b.stencilBuffer) {
            i.renderbufferStorage(i.RENDERBUFFER, i.DEPTH_COMPONENT16,
                b.width, b.height);
            i.framebufferRenderbuffer(i.FRAMEBUFFER, i.DEPTH_ATTACHMENT, i.RENDERBUFFER, a);
        } else if (b.depthBuffer && b.stencilBuffer) {
            i.renderbufferStorage(i.RENDERBUFFER, i.DEPTH_STENCIL, b.width, b.height);
            i.framebufferRenderbuffer(i.FRAMEBUFFER, i.DEPTH_STENCIL_ATTACHMENT, i.RENDERBUFFER, a);
        } else i.renderbufferStorage(i.RENDERBUFFER, i.RGBA4, b.width, b.height);
    }

    function w(a) {
        switch (a) {
            case THREE.NearestFilter:
            case THREE.NearestMipMapNearestFilter:
            case THREE.NearestMipMapLinearFilter:
                return i.NEAREST;
            default:
                return i.LINEAR
        }
    }

    function H(a) {
        switch (a) {
            case THREE.RepeatWrapping:
                return i.REPEAT;
            case THREE.ClampToEdgeWrapping:
                return i.CLAMP_TO_EDGE;
            case THREE.MirroredRepeatWrapping:
                return i.MIRRORED_REPEAT;
            case THREE.NearestFilter:
                return i.NEAREST;
            case THREE.NearestMipMapNearestFilter:
                return i.NEAREST_MIPMAP_NEAREST;
            case THREE.NearestMipMapLinearFilter:
                return i.NEAREST_MIPMAP_LINEAR;
            case THREE.LinearFilter:
                return i.LINEAR;
            case THREE.LinearMipMapNearestFilter:
                return i.LINEAR_MIPMAP_NEAREST;
            case THREE.LinearMipMapLinearFilter:
                return i.LINEAR_MIPMAP_LINEAR;
            case THREE.ByteType:
                return i.BYTE;
            case THREE.UnsignedByteType:
                return i.UNSIGNED_BYTE;
            case THREE.ShortType:
                return i.SHORT;
            case THREE.UnsignedShortType:
                return i.UNSIGNED_SHORT;
            case THREE.IntType:
                return i.INT;
            case THREE.UnsignedIntType:
                return i.UNSIGNED_INT;
            case THREE.FloatType:
                return i.FLOAT;
            case THREE.AlphaFormat:
                return i.ALPHA;
            case THREE.RGBFormat:
                return i.RGB;
            case THREE.RGBAFormat:
                return i.RGBA;
            case THREE.LuminanceFormat:
                return i.LUMINANCE;
            case THREE.LuminanceAlphaFormat:
                return i.LUMINANCE_ALPHA;
            case THREE.AddEquation:
                return i.FUNC_ADD;
            case THREE.SubtractEquation:
                return i.FUNC_SUBTRACT;
            case THREE.ReverseSubtractEquation:
                return i.FUNC_REVERSE_SUBTRACT;
            case THREE.ZeroFactor:
                return i.ZERO;
            case THREE.OneFactor:
                return i.ONE;
            case THREE.SrcColorFactor:
                return i.SRC_COLOR;
            case THREE.OneMinusSrcColorFactor:
                return i.ONE_MINUS_SRC_COLOR;
            case THREE.SrcAlphaFactor:
                return i.SRC_ALPHA;
            case THREE.OneMinusSrcAlphaFactor:
                return i.ONE_MINUS_SRC_ALPHA;
            case THREE.DstAlphaFactor:
                return i.DST_ALPHA;
            case THREE.OneMinusDstAlphaFactor:
                return i.ONE_MINUS_DST_ALPHA;
            case THREE.DstColorFactor:
                return i.DST_COLOR;
            case THREE.OneMinusDstColorFactor:
                return i.ONE_MINUS_DST_COLOR;
            case THREE.SrcAlphaSaturateFactor:
                return i.SRC_ALPHA_SATURATE
        }
        return 0
    }
    // console.log("THREE.WebGLRenderer", THREE.REVISION);
    var a = a || {},
        E = a.canvas !== void 0 ? a.canvas : document.createElement("canvas"),
        z = a.precision !== void 0 ? a.precision : "highp",
        v = a.alpha !== void 0 ? a.alpha : true,
        A = a.premultipliedAlpha !== void 0 ? a.premultipliedAlpha : true,
        J = a.antialias !== void 0 ? a.antialias : false,
        K = a.stencil !== void 0 ? a.stencil :
        true,
        R = a.preserveDrawingBuffer !== void 0 ? a.preserveDrawingBuffer : false,
        P = a.clearColor !== void 0 ? new THREE.Color(a.clearColor) : new THREE.Color(0),
        D = a.clearAlpha !== void 0 ? a.clearAlpha : 0,
        M = a.maxLights !== void 0 ? a.maxLights : 4;
    this.domElement = E;
    this.context = null;
    this.autoUpdateScene = this.autoUpdateObjects = this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = true;
    this.shadowMapEnabled = this.physicallyBasedShading = this.gammaOutput = this.gammaInput = false;
    this.shadowMapCullFrontFaces =
        this.shadowMapSoft = this.shadowMapAutoUpdate = true;
    this.shadowMapCascade = this.shadowMapDebug = false;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    this.autoScaleCubemaps = true;
    this.renderPluginsPre = [];
    this.renderPluginsPost = [];
    this.info = {
        memory: {
            programs: 0,
            geometries: 0,
            textures: 0
        },
        render: {
            calls: 0,
            vertices: 0,
            faces: 0,
            points: 0
        }
    };
    var G = this,
        i, T = [],
        U = null,
        C = null,
        Y = -1,
        F = null,
        ea = null,
        fa = 0,
        ia = -1,
        O = -1,
        Q = -1,
        Z = -1,
        $ = -1,
        ha = -1,
        Ma = -1,
        Ka = -1,
        Ra = null,
        La = null,
        Sa = null,
        Na = null,
        Kb = 0,
        lb = 0,
        gb = 0,
        Lb = 0,
        hb = 0,
        Cb = 0,
        Wa = new THREE.Frustum,
        Ba = new THREE.Matrix4,
        xa = new THREE.Matrix4,
        $a = new THREE.Vector4,
        aa = new THREE.Vector3,
        Ta = true,
        Qa = {
            ambient: [0, 0, 0],
            directional: {
                length: 0,
                colors: [],
                positions: []
            },
            point: {
                length: 0,
                colors: [],
                positions: [],
                distances: []
            },
            spot: {
                length: 0,
                colors: [],
                positions: [],
                distances: [],
                directions: [],
                angles: [],
                exponents: []
            }
        };
    i = function() {
        var a;
        try {
            if (!(a = E.getContext("experimental-webgl", {
                    alpha: v,
                    premultipliedAlpha: A,
                    antialias: J,
                    stencil: K,
                    preserveDrawingBuffer: R
                }))) throw "Error creating WebGL context.";
        } catch (b) {
            console.error(b);
        }
        a.getExtension("OES_texture_float") ||
            console.log("THREE.WebGLRenderer: Float textures not supported.");
        return a
    }();
    i.clearColor(0, 0, 0, 1);
    i.clearDepth(1);
    i.clearStencil(0);
    i.enable(i.DEPTH_TEST);
    i.depthFunc(i.LEQUAL);
    i.frontFace(i.CCW);
    i.cullFace(i.BACK);
    i.enable(i.CULL_FACE);
    i.enable(i.BLEND);
    i.blendEquation(i.FUNC_ADD);
    i.blendFunc(i.SRC_ALPHA, i.ONE_MINUS_SRC_ALPHA);
    i.clearColor(P.r, P.g, P.b, D);
    this.context = i;
    var oa = i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    i.getParameter(i.MAX_TEXTURE_SIZE);
    var ib = i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE);
    this.getContext = function() {
        return i
    };
    this.supportsVertexTextures = function() {
        return oa > 0
    };
    this.setSize = function(a, b) {
        E.width = a;
        E.height = b;
        this.setViewport(0, 0, E.width, E.height);
    };
    this.setViewport = function(a, b, c, d) {
        Kb = a;
        lb = b;
        gb = c;
        Lb = d;
        i.viewport(Kb, lb, gb, Lb);
    };
    this.setScissor = function(a, b, c, d) {
        i.scissor(a, b, c, d);
    };
    this.enableScissorTest = function(a) {
        a ? i.enable(i.SCISSOR_TEST) : i.disable(i.SCISSOR_TEST);
    };
    this.setClearColorHex = function(a, b) {
        P.setHex(a);
        D = b;
        i.clearColor(P.r, P.g, P.b, D);
    };
    this.setClearColor = function(a,
        b) {
        P.copy(a);
        D = b;
        i.clearColor(P.r, P.g, P.b, D);
    };
    this.getClearColor = function() {
        return P
    };
    this.getClearAlpha = function() {
        return D
    };
    this.clear = function(a, b, c) {
        var d = 0;
        if (a === void 0 || a) d = d | i.COLOR_BUFFER_BIT;
        if (b === void 0 || b) d = d | i.DEPTH_BUFFER_BIT;
        if (c === void 0 || c) d = d | i.STENCIL_BUFFER_BIT;
        i.clear(d);
    };
    this.clearTarget = function(a, b, c, d) {
        this.setRenderTarget(a);
        this.clear(b, c, d);
    };
    this.addPostPlugin = function(a) {
        a.init(this);
        this.renderPluginsPost.push(a);
    };
    this.addPrePlugin = function(a) {
        a.init(this);
        this.renderPluginsPre.push(a);
    };
    this.deallocateObject = function(a) {
        if (a.__webglInit) {
            a.__webglInit = false;
            delete a._modelViewMatrix;
            delete a._normalMatrix;
            delete a._normalMatrixArray;
            delete a._modelViewMatrixArray;
            delete a._objectMatrixArray;
            if (a instanceof THREE.Mesh)
                for (var b in a.geometry.geometryGroups) {
                    var c = a.geometry.geometryGroups[b];
                    i.deleteBuffer(c.__webglVertexBuffer);
                    i.deleteBuffer(c.__webglNormalBuffer);
                    i.deleteBuffer(c.__webglTangentBuffer);
                    i.deleteBuffer(c.__webglColorBuffer);
                    i.deleteBuffer(c.__webglUVBuffer);
                    i.deleteBuffer(c.__webglUV2Buffer);
                    i.deleteBuffer(c.__webglSkinVertexABuffer);
                    i.deleteBuffer(c.__webglSkinVertexBBuffer);
                    i.deleteBuffer(c.__webglSkinIndicesBuffer);
                    i.deleteBuffer(c.__webglSkinWeightsBuffer);
                    i.deleteBuffer(c.__webglFaceBuffer);
                    i.deleteBuffer(c.__webglLineBuffer);
                    var d = void 0,
                        e = void 0;
                    if (c.numMorphTargets) {
                        d = 0;
                        for (e = c.numMorphTargets; d < e; d++) i.deleteBuffer(c.__webglMorphTargetsBuffers[d]);
                    }
                    if (c.numMorphNormals) {
                        d = 0;
                        for (e = c.numMorphNormals; d < e; d++) i.deleteBuffer(c.__webglMorphNormalsBuffers[d]);
                    }
                    if (c.__webglCustomAttributesList) {
                        d =
                            void 0;
                        for (d in c.__webglCustomAttributesList) i.deleteBuffer(c.__webglCustomAttributesList[d].buffer);
                    }
                    G.info.memory.geometries--;
                } else if (a instanceof THREE.Ribbon) {
                    a = a.geometry;
                    i.deleteBuffer(a.__webglVertexBuffer);
                    i.deleteBuffer(a.__webglColorBuffer);
                    G.info.memory.geometries--;
                } else if (a instanceof THREE.Line) {
                a = a.geometry;
                i.deleteBuffer(a.__webglVertexBuffer);
                i.deleteBuffer(a.__webglColorBuffer);
                G.info.memory.geometries--;
            } else if (a instanceof THREE.ParticleSystem) {
                a = a.geometry;
                i.deleteBuffer(a.__webglVertexBuffer);
                i.deleteBuffer(a.__webglColorBuffer);
                G.info.memory.geometries--;
            }
        }
    };
    this.deallocateTexture = function(a) {
        if (a.__webglInit) {
            a.__webglInit = false;
            i.deleteTexture(a.__webglTexture);
            G.info.memory.textures--;
        }
    };
    this.deallocateRenderTarget = function(a) {
        if (a && a.__webglTexture) {
            i.deleteTexture(a.__webglTexture);
            if (a instanceof THREE.WebGLRenderTargetCube)
                for (var b = 0; b < 6; b++) {
                    i.deleteFramebuffer(a.__webglFramebuffer[b]);
                    i.deleteRenderbuffer(a.__webglRenderbuffer[b]);
                } else {
                    i.deleteFramebuffer(a.__webglFramebuffer);
                    i.deleteRenderbuffer(a.__webglRenderbuffer);
                }
        }
    };
    this.updateShadowMap = function(a, b) {
        U = null;
        Y = F = Ka = Ma = Q = -1;
        Ta = true;
        O = ia = -1;
        this.shadowMapPlugin.update(a, b);
    };
    this.renderBufferImmediate = function(a, b, c) {
        if (!a.__webglVertexBuffer) a.__webglVertexBuffer = i.createBuffer();
        if (!a.__webglNormalBuffer) a.__webglNormalBuffer = i.createBuffer();
        if (a.hasPos) {
            i.bindBuffer(i.ARRAY_BUFFER, a.__webglVertexBuffer);
            i.bufferData(i.ARRAY_BUFFER, a.positionArray, i.DYNAMIC_DRAW);
            i.enableVertexAttribArray(b.attributes.position);
            i.vertexAttribPointer(b.attributes.position,
                3, i.FLOAT, false, 0, 0);
        }
        if (a.hasNormal) {
            i.bindBuffer(i.ARRAY_BUFFER, a.__webglNormalBuffer);
            if (c === THREE.FlatShading) {
                var d, e, f, g, h, j, k, l, m, n, p = a.count * 3;
                for (n = 0; n < p; n = n + 9) {
                    c = a.normalArray;
                    d = c[n];
                    e = c[n + 1];
                    f = c[n + 2];
                    g = c[n + 3];
                    j = c[n + 4];
                    l = c[n + 5];
                    h = c[n + 6];
                    k = c[n + 7];
                    m = c[n + 8];
                    d = (d + g + h) / 3;
                    e = (e + j + k) / 3;
                    f = (f + l + m) / 3;
                    c[n] = d;
                    c[n + 1] = e;
                    c[n + 2] = f;
                    c[n + 3] = d;
                    c[n + 4] = e;
                    c[n + 5] = f;
                    c[n + 6] = d;
                    c[n + 7] = e;
                    c[n + 8] = f;
                }
            }
            i.bufferData(i.ARRAY_BUFFER, a.normalArray, i.DYNAMIC_DRAW);
            i.enableVertexAttribArray(b.attributes.normal);
            i.vertexAttribPointer(b.attributes.normal,
                3, i.FLOAT, false, 0, 0);
        }
        i.drawArrays(i.TRIANGLES, 0, a.count);
        a.count = 0;
    };
    this.renderBufferDirect = function(a, b, c, d, e, f) {
        if (d.visible !== false) {
            c = n(a, b, c, d, f);
            a = c.attributes;
            b = false;
            d = e.id * 16777215 + c.id * 2 + (d.wireframe ? 1 : 0);
            if (d !== F) {
                F = d;
                b = true;
            }
            if (f instanceof THREE.Mesh) {
                f = e.offsets;
                d = 0;
                for (c = f.length; d < c; ++d) {
                    if (b) {
                        i.bindBuffer(i.ARRAY_BUFFER, e.vertexPositionBuffer);
                        i.vertexAttribPointer(a.position, e.vertexPositionBuffer.itemSize, i.FLOAT, false, 0, f[d].index * 12);
                        if (a.normal >= 0 && e.vertexNormalBuffer) {
                            i.bindBuffer(i.ARRAY_BUFFER,
                                e.vertexNormalBuffer);
                            i.vertexAttribPointer(a.normal, e.vertexNormalBuffer.itemSize, i.FLOAT, false, 0, f[d].index * 12);
                        }
                        if (a.uv >= 0 && e.vertexUvBuffer)
                            if (e.vertexUvBuffer) {
                                i.bindBuffer(i.ARRAY_BUFFER, e.vertexUvBuffer);
                                i.vertexAttribPointer(a.uv, e.vertexUvBuffer.itemSize, i.FLOAT, false, 0, f[d].index * 8);
                                i.enableVertexAttribArray(a.uv);
                            } else i.disableVertexAttribArray(a.uv);
                        if (a.color >= 0 && e.vertexColorBuffer) {
                            i.bindBuffer(i.ARRAY_BUFFER, e.vertexColorBuffer);
                            i.vertexAttribPointer(a.color, e.vertexColorBuffer.itemSize,
                                i.FLOAT, false, 0, f[d].index * 16);
                        }
                        i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, e.vertexIndexBuffer);
                    }
                    i.drawElements(i.TRIANGLES, f[d].count, i.UNSIGNED_SHORT, f[d].start * 2);
                    G.info.render.calls++;
                    G.info.render.vertices = G.info.render.vertices + f[d].count;
                    G.info.render.faces = G.info.render.faces + f[d].count / 3;
                }
            }
        }
    };
    this.renderBuffer = function(a, b, c, d, e, f) {
        if (d.visible !== false) {
            var g, h, c = n(a, b, c, d, f),
                b = c.attributes,
                a = false,
                c = e.id * 16777215 + c.id * 2 + (d.wireframe ? 1 : 0);
            if (c !== F) {
                F = c;
                a = true;
            }
            if (!d.morphTargets && b.position >= 0) {
                if (a) {
                    i.bindBuffer(i.ARRAY_BUFFER,
                        e.__webglVertexBuffer);
                    i.vertexAttribPointer(b.position, 3, i.FLOAT, false, 0, 0);
                }
            } else if (f.morphTargetBase) {
                c = d.program.attributes;
                if (f.morphTargetBase !== -1) {
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[f.morphTargetBase]);
                    i.vertexAttribPointer(c.position, 3, i.FLOAT, false, 0, 0);
                } else if (c.position >= 0) {
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglVertexBuffer);
                    i.vertexAttribPointer(c.position, 3, i.FLOAT, false, 0, 0);
                }
                if (f.morphTargetForcedOrder.length) {
                    g = 0;
                    var j = f.morphTargetForcedOrder;
                    for (h = f.morphTargetInfluences; g <
                        d.numSupportedMorphTargets && g < j.length;) {
                        i.bindBuffer(i.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[j[g]]);
                        i.vertexAttribPointer(c["morphTarget" + g], 3, i.FLOAT, false, 0, 0);
                        if (d.morphNormals) {
                            i.bindBuffer(i.ARRAY_BUFFER, e.__webglMorphNormalsBuffers[j[g]]);
                            i.vertexAttribPointer(c["morphNormal" + g], 3, i.FLOAT, false, 0, 0);
                        }
                        f.__webglMorphTargetInfluences[g] = h[j[g]];
                        g++;
                    }
                } else {
                    var j = [],
                        k = -1,
                        l = 0;
                    h = f.morphTargetInfluences;
                    var m, p = h.length;
                    g = 0;
                    for (f.morphTargetBase !== -1 && (j[f.morphTargetBase] = true); g < d.numSupportedMorphTargets;) {
                        for (m =
                            0; m < p; m++)
                            if (!j[m] && h[m] > k) {
                                l = m;
                                k = h[l];
                            } i.bindBuffer(i.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[l]);
                        i.vertexAttribPointer(c["morphTarget" + g], 3, i.FLOAT, false, 0, 0);
                        if (d.morphNormals) {
                            i.bindBuffer(i.ARRAY_BUFFER, e.__webglMorphNormalsBuffers[l]);
                            i.vertexAttribPointer(c["morphNormal" + g], 3, i.FLOAT, false, 0, 0);
                        }
                        f.__webglMorphTargetInfluences[g] = k;
                        j[l] = 1;
                        k = -1;
                        g++;
                    }
                }
                d.program.uniforms.morphTargetInfluences !== null && i.uniform1fv(d.program.uniforms.morphTargetInfluences, f.__webglMorphTargetInfluences);
            }
            if (a) {
                if (e.__webglCustomAttributesList) {
                    g =
                        0;
                    for (h = e.__webglCustomAttributesList.length; g < h; g++) {
                        c = e.__webglCustomAttributesList[g];
                        if (b[c.buffer.belongsToAttribute] >= 0) {
                            i.bindBuffer(i.ARRAY_BUFFER, c.buffer);
                            i.vertexAttribPointer(b[c.buffer.belongsToAttribute], c.size, i.FLOAT, false, 0, 0);
                        }
                    }
                }
                if (b.color >= 0) {
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglColorBuffer);
                    i.vertexAttribPointer(b.color, 3, i.FLOAT, false, 0, 0);
                }
                if (b.normal >= 0) {
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglNormalBuffer);
                    i.vertexAttribPointer(b.normal, 3, i.FLOAT, false, 0, 0);
                }
                if (b.tangent >= 0) {
                    i.bindBuffer(i.ARRAY_BUFFER,
                        e.__webglTangentBuffer);
                    i.vertexAttribPointer(b.tangent, 4, i.FLOAT, false, 0, 0);
                }
                if (b.uv >= 0)
                    if (e.__webglUVBuffer) {
                        i.bindBuffer(i.ARRAY_BUFFER, e.__webglUVBuffer);
                        i.vertexAttribPointer(b.uv, 2, i.FLOAT, false, 0, 0);
                        i.enableVertexAttribArray(b.uv);
                    } else i.disableVertexAttribArray(b.uv);
                if (b.uv2 >= 0)
                    if (e.__webglUV2Buffer) {
                        i.bindBuffer(i.ARRAY_BUFFER, e.__webglUV2Buffer);
                        i.vertexAttribPointer(b.uv2, 2, i.FLOAT, false, 0, 0);
                        i.enableVertexAttribArray(b.uv2);
                    } else i.disableVertexAttribArray(b.uv2);
                if (d.skinning && b.skinVertexA >=
                    0 && b.skinVertexB >= 0 && b.skinIndex >= 0 && b.skinWeight >= 0) {
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglSkinVertexABuffer);
                    i.vertexAttribPointer(b.skinVertexA, 4, i.FLOAT, false, 0, 0);
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglSkinVertexBBuffer);
                    i.vertexAttribPointer(b.skinVertexB, 4, i.FLOAT, false, 0, 0);
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglSkinIndicesBuffer);
                    i.vertexAttribPointer(b.skinIndex, 4, i.FLOAT, false, 0, 0);
                    i.bindBuffer(i.ARRAY_BUFFER, e.__webglSkinWeightsBuffer);
                    i.vertexAttribPointer(b.skinWeight, 4, i.FLOAT, false, 0, 0);
                }
            }
            if (f instanceof THREE.Mesh) {
                if (d.wireframe) {
                    d = d.wireframeLinewidth;
                    if (d !== Na) {
                        i.lineWidth(d);
                        Na = d;
                    }
                    a && i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, e.__webglLineBuffer);
                    i.drawElements(i.LINES, e.__webglLineCount, i.UNSIGNED_SHORT, 0);
                } else {
                    a && i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, e.__webglFaceBuffer);
                    i.drawElements(i.TRIANGLES, e.__webglFaceCount, i.UNSIGNED_SHORT, 0);
                }
                G.info.render.calls++;
                G.info.render.vertices = G.info.render.vertices + e.__webglFaceCount;
                G.info.render.faces = G.info.render.faces + e.__webglFaceCount / 3;
            } else if (f instanceof THREE.Line) {
                f = f.type === THREE.LineStrip ? i.LINE_STRIP : i.LINES;
                d = d.linewidth;
                if (d !== Na) {
                    i.lineWidth(d);
                    Na = d;
                }
                i.drawArrays(f, 0, e.__webglLineCount);
                G.info.render.calls++;
            } else if (f instanceof THREE.ParticleSystem) {
                i.drawArrays(i.POINTS, 0, e.__webglParticleCount);
                G.info.render.calls++;
                G.info.render.points = G.info.render.points + e.__webglParticleCount;
            } else if (f instanceof THREE.Ribbon) {
                i.drawArrays(i.TRIANGLE_STRIP, 0, e.__webglVertexCount);
                G.info.render.calls++;
            }
        }
    };
    this.render = function(a, b, c, d) {
        var e, f, k, m, n = a.__lights,
            p = a.fog;
        Y = -1;
        Ta = true;
        if (b.parent === void 0) {
            console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it...");
            a.add(b);
        }
        this.autoUpdateScene && a.updateMatrixWorld();
        if (!b._viewMatrixArray) b._viewMatrixArray = new Float32Array(16);
        if (!b._projectionMatrixArray) b._projectionMatrixArray = new Float32Array(16);
        b.matrixWorldInverse.getInverse(b.matrixWorld);
        b.matrixWorldInverse.flattenToArray(b._viewMatrixArray);
        b.projectionMatrix.flattenToArray(b._projectionMatrixArray);
        Ba.multiply(b.projectionMatrix,
            b.matrixWorldInverse);
        Wa.setFromMatrix(Ba);
        this.autoUpdateObjects && this.initWebGLObjects(a);
        h(this.renderPluginsPre, a, b);
        G.info.render.calls = 0;
        G.info.render.vertices = 0;
        G.info.render.faces = 0;
        G.info.render.points = 0;
        this.setRenderTarget(c);
        (this.autoClear || d) && this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
        m = a.__webglObjects;
        d = 0;
        for (e = m.length; d < e; d++) {
            f = m[d];
            k = f.object;
            f.render = false;
            if (k.visible && (!(k instanceof THREE.Mesh || k instanceof THREE.ParticleSystem) || !k.frustumCulled ||
                    Wa.contains(k))) {
                r(k, b);
                var o = f,
                    q = o.object,
                    s = o.buffer,
                    t = void 0,
                    t = t = void 0,
                    t = q.material;
                if (t instanceof THREE.MeshFaceMaterial) {
                    t = s.materialIndex;
                    if (t >= 0) {
                        t = q.geometry.materials[t];
                        if (t.transparent) {
                            o.transparent = t;
                            o.opaque = null;
                        } else {
                            o.opaque = t;
                            o.transparent = null;
                        }
                    }
                } else if (t)
                    if (t.transparent) {
                        o.transparent = t;
                        o.opaque = null;
                    } else {
                        o.opaque = t;
                        o.transparent = null;
                    } f.render = true;
                if (this.sortObjects)
                    if (k.renderDepth) f.z = k.renderDepth;
                    else {
                        $a.copy(k.matrixWorld.getPosition());
                        Ba.multiplyVector3($a);
                        f.z = $a.z;
                    }
            }
        }
        this.sortObjects &&
            m.sort(g);
        m = a.__webglObjectsImmediate;
        d = 0;
        for (e = m.length; d < e; d++) {
            f = m[d];
            k = f.object;
            if (k.visible) {
                r(k, b);
                k = f.object.material;
                if (k.transparent) {
                    f.transparent = k;
                    f.opaque = null;
                } else {
                    f.opaque = k;
                    f.transparent = null;
                }
            }
        }
        if (a.overrideMaterial) {
            d = a.overrideMaterial;
            this.setBlending(d.blending, d.blendEquation, d.blendSrc, d.blendDst);
            this.setDepthTest(d.depthTest);
            this.setDepthWrite(d.depthWrite);
            u(d.polygonOffset, d.polygonOffsetFactor, d.polygonOffsetUnits);
            j(a.__webglObjects, false, "", b, n, p, true, d);
            l(a.__webglObjectsImmediate,
                "", b, n, p, false, d);
        } else {
            this.setBlending(THREE.NormalBlending);
            j(a.__webglObjects, true, "opaque", b, n, p, false);
            l(a.__webglObjectsImmediate, "opaque", b, n, p, false);
            j(a.__webglObjects, false, "transparent", b, n, p, true);
            l(a.__webglObjectsImmediate, "transparent", b, n, p, true);
        }
        h(this.renderPluginsPost, a, b);
        if (c && c.generateMipmaps && c.minFilter !== THREE.NearestFilter && c.minFilter !== THREE.LinearFilter)
            if (c instanceof THREE.WebGLRenderTargetCube) {
                i.bindTexture(i.TEXTURE_CUBE_MAP, c.__webglTexture);
                i.generateMipmap(i.TEXTURE_CUBE_MAP);
                i.bindTexture(i.TEXTURE_CUBE_MAP, null);
            } else {
                i.bindTexture(i.TEXTURE_2D, c.__webglTexture);
                i.generateMipmap(i.TEXTURE_2D);
                i.bindTexture(i.TEXTURE_2D, null);
            } this.setDepthTest(true);
        this.setDepthWrite(true);
    };
    this.renderImmediateObject = function(a, b, c, d, e) {
        var f = n(a, b, c, d, e);
        F = -1;
        G.setObjectFaces(e);
        e.immediateRenderCallback ? e.immediateRenderCallback(f, i, Wa) : e.render(function(a) {
            G.renderBufferImmediate(a, f, d.shading);
        });
    };
    this.initWebGLObjects = function(a) {
        if (!a.__webglObjects) {
            a.__webglObjects = [];
            a.__webglObjectsImmediate = [];
            a.__webglSprites = [];
            a.__webglFlares = [];
        }
        for (; a.__objectsAdded.length;) {
            var g = a.__objectsAdded[0],
                h = a,
                j = void 0,
                l = void 0,
                n = void 0;
            if (!g.__webglInit) {
                g.__webglInit = true;
                g._modelViewMatrix = new THREE.Matrix4;
                g._normalMatrix = new THREE.Matrix3;
                if (g instanceof THREE.Mesh) {
                    l = g.geometry;
                    if (l instanceof THREE.Geometry) {
                        if (l.geometryGroups === void 0) {
                            var r = l,
                                s = void 0,
                                t = void 0,
                                u = void 0,
                                v = void 0,
                                w = void 0,
                                z = void 0,
                                y = void 0,
                                A = {},
                                C = r.morphTargets.length,
                                D = r.morphNormals.length;
                            r.geometryGroups = {};
                            s = 0;
                            for (t = r.faces.length; s <
                                t; s++) {
                                u = r.faces[s];
                                v = u.materialIndex;
                                z = v !== void 0 ? v : -1;
                                A[z] === void 0 && (A[z] = {
                                    hash: z,
                                    counter: 0
                                });
                                y = A[z].hash + "_" + A[z].counter;
                                r.geometryGroups[y] === void 0 && (r.geometryGroups[y] = {
                                    faces3: [],
                                    faces4: [],
                                    materialIndex: v,
                                    vertices: 0,
                                    numMorphTargets: C,
                                    numMorphNormals: D
                                });
                                w = u instanceof THREE.Face3 ? 3 : 4;
                                if (r.geometryGroups[y].vertices + w > 65535) {
                                    A[z].counter = A[z].counter + 1;
                                    y = A[z].hash + "_" + A[z].counter;
                                    r.geometryGroups[y] === void 0 && (r.geometryGroups[y] = {
                                        faces3: [],
                                        faces4: [],
                                        materialIndex: v,
                                        vertices: 0,
                                        numMorphTargets: C,
                                        numMorphNormals: D
                                    });
                                }
                                u instanceof THREE.Face3 ? r.geometryGroups[y].faces3.push(s) : r.geometryGroups[y].faces4.push(s);
                                r.geometryGroups[y].vertices = r.geometryGroups[y].vertices + w;
                            }
                            r.geometryGroupsList = [];
                            var E = void 0;
                            for (E in r.geometryGroups) {
                                r.geometryGroups[E].id = fa++;
                                r.geometryGroupsList.push(r.geometryGroups[E]);
                            }
                        }
                        for (j in l.geometryGroups) {
                            n = l.geometryGroups[j];
                            if (!n.__webglVertexBuffer) {
                                var F = n;
                                F.__webglVertexBuffer = i.createBuffer();
                                F.__webglNormalBuffer = i.createBuffer();
                                F.__webglTangentBuffer = i.createBuffer();
                                F.__webglColorBuffer = i.createBuffer();
                                F.__webglUVBuffer = i.createBuffer();
                                F.__webglUV2Buffer = i.createBuffer();
                                F.__webglSkinVertexABuffer = i.createBuffer();
                                F.__webglSkinVertexBBuffer = i.createBuffer();
                                F.__webglSkinIndicesBuffer = i.createBuffer();
                                F.__webglSkinWeightsBuffer = i.createBuffer();
                                F.__webglFaceBuffer = i.createBuffer();
                                F.__webglLineBuffer = i.createBuffer();
                                var H = void 0,
                                    K = void 0;
                                if (F.numMorphTargets) {
                                    F.__webglMorphTargetsBuffers = [];
                                    H = 0;
                                    for (K = F.numMorphTargets; H < K; H++) F.__webglMorphTargetsBuffers.push(i.createBuffer());
                                }
                                if (F.numMorphNormals) {
                                    F.__webglMorphNormalsBuffers = [];
                                    H = 0;
                                    for (K = F.numMorphNormals; H < K; H++) F.__webglMorphNormalsBuffers.push(i.createBuffer());
                                }
                                G.info.memory.geometries++;
                                var Q = n,
                                    J = g,
                                    O = J.geometry,
                                    M = Q.faces3,
                                    $ = Q.faces4,
                                    P = M.length * 3 + $.length * 4,
                                    Z = M.length * 1 + $.length * 2,
                                    Y = M.length * 3 + $.length * 4,
                                    R = c(J, Q),
                                    T = e(R),
                                    ea = d(R),
                                    ia = R.vertexColors ? R.vertexColors : false;
                                Q.__vertexArray = new Float32Array(P * 3);
                                if (ea) Q.__normalArray = new Float32Array(P * 3);
                                if (O.hasTangents) Q.__tangentArray = new Float32Array(P * 4);
                                if (ia) Q.__colorArray = new Float32Array(P * 3);
                                if (T) {
                                    if (O.faceUvs.length >
                                        0 || O.faceVertexUvs.length > 0) Q.__uvArray = new Float32Array(P * 2);
                                    if (O.faceUvs.length > 1 || O.faceVertexUvs.length > 1) Q.__uv2Array = new Float32Array(P * 2);
                                }
                                if (J.geometry.skinWeights.length && J.geometry.skinIndices.length) {
                                    Q.__skinVertexAArray = new Float32Array(P * 4);
                                    Q.__skinVertexBArray = new Float32Array(P * 4);
                                    Q.__skinIndexArray = new Float32Array(P * 4);
                                    Q.__skinWeightArray = new Float32Array(P * 4);
                                }
                                Q.__faceArray = new Uint16Array(Z * 3);
                                Q.__lineArray = new Uint16Array(Y * 2);
                                var U = void 0,
                                    ha = void 0;
                                if (Q.numMorphTargets) {
                                    Q.__morphTargetsArrays = [];
                                    U = 0;
                                    for (ha = Q.numMorphTargets; U < ha; U++) Q.__morphTargetsArrays.push(new Float32Array(P * 3));
                                }
                                if (Q.numMorphNormals) {
                                    Q.__morphNormalsArrays = [];
                                    U = 0;
                                    for (ha = Q.numMorphNormals; U < ha; U++) Q.__morphNormalsArrays.push(new Float32Array(P * 3));
                                }
                                Q.__webglFaceCount = Z * 3;
                                Q.__webglLineCount = Y * 2;
                                if (R.attributes) {
                                    if (Q.__webglCustomAttributesList === void 0) Q.__webglCustomAttributesList = [];
                                    var Ra = void 0;
                                    for (Ra in R.attributes) {
                                        var Ma = R.attributes[Ra],
                                            aa = {},
                                            Ka;
                                        for (Ka in Ma) aa[Ka] = Ma[Ka];
                                        if (!aa.__webglInitialized || aa.createUniqueBuffers) {
                                            aa.__webglInitialized =
                                                true;
                                            var La = 1;
                                            aa.type === "v2" ? La = 2 : aa.type === "v3" ? La = 3 : aa.type === "v4" ? La = 4 : aa.type === "c" && (La = 3);
                                            aa.size = La;
                                            aa.array = new Float32Array(P * La);
                                            aa.buffer = i.createBuffer();
                                            aa.buffer.belongsToAttribute = Ra;
                                            Ma.needsUpdate = true;
                                            aa.__original = Ma;
                                        }
                                        Q.__webglCustomAttributesList.push(aa);
                                    }
                                }
                                Q.__inittedArrays = true;
                                l.verticesNeedUpdate = true;
                                l.morphTargetsNeedUpdate = true;
                                l.elementsNeedUpdate = true;
                                l.uvsNeedUpdate = true;
                                l.normalsNeedUpdate = true;
                                l.tangetsNeedUpdate = true;
                                l.colorsNeedUpdate = true;
                            }
                        }
                    }
                } else if (g instanceof THREE.Ribbon) {
                    l =
                        g.geometry;
                    if (!l.__webglVertexBuffer) {
                        var Sa = l;
                        Sa.__webglVertexBuffer = i.createBuffer();
                        Sa.__webglColorBuffer = i.createBuffer();
                        G.info.memory.geometries++;
                        var oa = l,
                            xa = oa.vertices.length;
                        oa.__vertexArray = new Float32Array(xa * 3);
                        oa.__colorArray = new Float32Array(xa * 3);
                        oa.__webglVertexCount = xa;
                        l.verticesNeedUpdate = true;
                        l.colorsNeedUpdate = true;
                    }
                } else if (g instanceof THREE.Line) {
                    l = g.geometry;
                    if (!l.__webglVertexBuffer) {
                        var Ba = l;
                        Ba.__webglVertexBuffer = i.createBuffer();
                        Ba.__webglColorBuffer = i.createBuffer();
                        G.info.memory.geometries++;
                        var Na = l,
                            Ta = g,
                            Wa = Na.vertices.length;
                        Na.__vertexArray = new Float32Array(Wa * 3);
                        Na.__colorArray = new Float32Array(Wa * 3);
                        Na.__webglLineCount = Wa;
                        b(Na, Ta);
                        l.verticesNeedUpdate = true;
                        l.colorsNeedUpdate = true;
                    }
                } else if (g instanceof THREE.ParticleSystem) {
                    l = g.geometry;
                    if (!l.__webglVertexBuffer) {
                        var $a = l;
                        $a.__webglVertexBuffer = i.createBuffer();
                        $a.__webglColorBuffer = i.createBuffer();
                        G.info.geometries++;
                        var Qa = l,
                            Kb = g,
                            lb = Qa.vertices.length;
                        Qa.__vertexArray = new Float32Array(lb * 3);
                        Qa.__colorArray = new Float32Array(lb *
                            3);
                        Qa.__sortArray = [];
                        Qa.__webglParticleCount = lb;
                        b(Qa, Kb);
                        l.verticesNeedUpdate = true;
                        l.colorsNeedUpdate = true;
                    }
                }
            }
            if (!g.__webglActive) {
                if (g instanceof THREE.Mesh) {
                    l = g.geometry;
                    if (l instanceof THREE.BufferGeometry) k(h.__webglObjects, l, g);
                    else
                        for (j in l.geometryGroups) {
                            n = l.geometryGroups[j];
                            k(h.__webglObjects, n, g);
                        }
                } else if (g instanceof THREE.Ribbon || g instanceof THREE.Line || g instanceof THREE.ParticleSystem) {
                    l = g.geometry;
                    k(h.__webglObjects, l, g);
                } else g instanceof THREE.ImmediateRenderObject || g.immediateRenderCallback ?
                    h.__webglObjectsImmediate.push({
                        object: g,
                        opaque: null,
                        transparent: null
                    }) : g instanceof THREE.Sprite ? h.__webglSprites.push(g) : g instanceof THREE.LensFlare && h.__webglFlares.push(g);
                g.__webglActive = true;
            }
            a.__objectsAdded.splice(0, 1);
        }
        for (; a.__objectsRemoved.length;) {
            var bb = a.__objectsRemoved[0],
                gb = a;
            bb instanceof THREE.Mesh || bb instanceof THREE.ParticleSystem || bb instanceof THREE.Ribbon || bb instanceof THREE.Line ? o(gb.__webglObjects, bb) : bb instanceof THREE.Sprite ? q(gb.__webglSprites, bb) : bb instanceof THREE.LensFlare ?
                q(gb.__webglFlares, bb) : (bb instanceof THREE.ImmediateRenderObject || bb.immediateRenderCallback) && o(gb.__webglObjectsImmediate, bb);
            bb.__webglActive = false;
            a.__objectsRemoved.splice(0, 1);
        }
        for (var ib = 0, Lb = a.__webglObjects.length; ib < Lb; ib++) {
            var jb = a.__webglObjects[ib].object,
                ga = jb.geometry,
                hb = void 0,
                ic = void 0,
                Ua = void 0;
            if (jb instanceof THREE.Mesh)
                if (ga instanceof THREE.BufferGeometry) {
                    ga.verticesNeedUpdate = false;
                    ga.elementsNeedUpdate = false;
                    ga.uvsNeedUpdate = false;
                    ga.normalsNeedUpdate = false;
                    ga.colorsNeedUpdate =
                        false;
                } else {
                    for (var Cb = 0, nd = ga.geometryGroupsList.length; Cb < nd; Cb++) {
                        hb = ga.geometryGroupsList[Cb];
                        Ua = c(jb, hb);
                        ic = Ua.attributes && p(Ua);
                        if (ga.verticesNeedUpdate || ga.morphTargetsNeedUpdate || ga.elementsNeedUpdate || ga.uvsNeedUpdate || ga.normalsNeedUpdate || ga.colorsNeedUpdate || ga.tangetsNeedUpdate || ic) {
                            var ca = hb,
                                od = jb,
                                Xa = i.DYNAMIC_DRAW,
                                pd = !ga.dynamic,
                                bc = Ua;
                            if (ca.__inittedArrays) {
                                var cd = d(bc),
                                    Tc = bc.vertexColors ? bc.vertexColors : false,
                                    dd = e(bc),
                                    Ec = cd === THREE.SmoothShading,
                                    I = void 0,
                                    S = void 0,
                                    fb = void 0,
                                    N = void 0,
                                    jc = void 0,
                                    Ob = void 0,
                                    kb = void 0,
                                    Fc = void 0,
                                    Fb = void 0,
                                    kc = void 0,
                                    lc = void 0,
                                    V = void 0,
                                    W = void 0,
                                    X = void 0,
                                    ma = void 0,
                                    mb = void 0,
                                    nb = void 0,
                                    ob = void 0,
                                    qc = void 0,
                                    pb = void 0,
                                    qb = void 0,
                                    rb = void 0,
                                    rc = void 0,
                                    sb = void 0,
                                    tb = void 0,
                                    ub = void 0,
                                    sc = void 0,
                                    vb = void 0,
                                    wb = void 0,
                                    xb = void 0,
                                    tc = void 0,
                                    yb = void 0,
                                    zb = void 0,
                                    Ab = void 0,
                                    uc = void 0,
                                    Pb = void 0,
                                    Qb = void 0,
                                    Rb = void 0,
                                    Gc = void 0,
                                    Sb = void 0,
                                    Tb = void 0,
                                    Ub = void 0,
                                    Hc = void 0,
                                    ja = void 0,
                                    ed = void 0,
                                    Vb = void 0,
                                    mc = void 0,
                                    nc = void 0,
                                    Ea = void 0,
                                    fd = void 0,
                                    Ca = void 0,
                                    Da = void 0,
                                    Wb = void 0,
                                    Gb = void 0,
                                    wa = 0,
                                    Aa = 0,
                                    Hb = 0,
                                    Ib = 0,
                                    cb = 0,
                                    Ja = 0,
                                    na = 0,
                                    Oa = 0,
                                    ya = 0,
                                    L = 0,
                                    ba = 0,
                                    B = 0,
                                    Ya = void 0,
                                    Fa = ca.__vertexArray,
                                    vc = ca.__uvArray,
                                    wc = ca.__uv2Array,
                                    db = ca.__normalArray,
                                    qa = ca.__tangentArray,
                                    Ga = ca.__colorArray,
                                    ra = ca.__skinVertexAArray,
                                    sa = ca.__skinVertexBArray,
                                    ta = ca.__skinIndexArray,
                                    ua = ca.__skinWeightArray,
                                    Uc = ca.__morphTargetsArrays,
                                    Vc = ca.__morphNormalsArrays,
                                    Wc = ca.__webglCustomAttributesList,
                                    x = void 0,
                                    Bb = ca.__faceArray,
                                    Za = ca.__lineArray,
                                    Pa = od.geometry,
                                    qd = Pa.elementsNeedUpdate,
                                    gd = Pa.uvsNeedUpdate,
                                    rd = Pa.normalsNeedUpdate,
                                    sd = Pa.tangetsNeedUpdate,
                                    td = Pa.colorsNeedUpdate,
                                    ud = Pa.morphTargetsNeedUpdate,
                                    cc = Pa.vertices,
                                    ka = ca.faces3,
                                    la = ca.faces4,
                                    za = Pa.faces,
                                    Xc = Pa.faceVertexUvs[0],
                                    Yc = Pa.faceVertexUvs[1],
                                    dc = Pa.skinVerticesA,
                                    ec = Pa.skinVerticesB,
                                    fc = Pa.skinIndices,
                                    Xb = Pa.skinWeights,
                                    Yb = Pa.morphTargets,
                                    Ic = Pa.morphNormals;
                                if (Pa.verticesNeedUpdate) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        N = za[ka[I]];
                                        V = cc[N.a];
                                        W = cc[N.b];
                                        X = cc[N.c];
                                        Fa[Aa] = V.x;
                                        Fa[Aa + 1] = V.y;
                                        Fa[Aa + 2] = V.z;
                                        Fa[Aa + 3] = W.x;
                                        Fa[Aa + 4] = W.y;
                                        Fa[Aa + 5] = W.z;
                                        Fa[Aa + 6] = X.x;
                                        Fa[Aa + 7] = X.y;
                                        Fa[Aa + 8] = X.z;
                                        Aa = Aa + 9;
                                    }
                                    I = 0;
                                    for (S = la.length; I <
                                        S; I++) {
                                        N = za[la[I]];
                                        V = cc[N.a];
                                        W = cc[N.b];
                                        X = cc[N.c];
                                        ma = cc[N.d];
                                        Fa[Aa] = V.x;
                                        Fa[Aa + 1] = V.y;
                                        Fa[Aa + 2] = V.z;
                                        Fa[Aa + 3] = W.x;
                                        Fa[Aa + 4] = W.y;
                                        Fa[Aa + 5] = W.z;
                                        Fa[Aa + 6] = X.x;
                                        Fa[Aa + 7] = X.y;
                                        Fa[Aa + 8] = X.z;
                                        Fa[Aa + 9] = ma.x;
                                        Fa[Aa + 10] = ma.y;
                                        Fa[Aa + 11] = ma.z;
                                        Aa = Aa + 12;
                                    }
                                    i.bindBuffer(i.ARRAY_BUFFER, ca.__webglVertexBuffer);
                                    i.bufferData(i.ARRAY_BUFFER, Fa, Xa);
                                }
                                if (ud) {
                                    Ea = 0;
                                    for (fd = Yb.length; Ea < fd; Ea++) {
                                        I = ba = 0;
                                        for (S = ka.length; I < S; I++) {
                                            Wb = ka[I];
                                            N = za[Wb];
                                            V = Yb[Ea].vertices[N.a];
                                            W = Yb[Ea].vertices[N.b];
                                            X = Yb[Ea].vertices[N.c];
                                            Ca = Uc[Ea];
                                            Ca[ba] = V.x;
                                            Ca[ba +
                                                1] = V.y;
                                            Ca[ba + 2] = V.z;
                                            Ca[ba + 3] = W.x;
                                            Ca[ba + 4] = W.y;
                                            Ca[ba + 5] = W.z;
                                            Ca[ba + 6] = X.x;
                                            Ca[ba + 7] = X.y;
                                            Ca[ba + 8] = X.z;
                                            if (bc.morphNormals) {
                                                if (Ec) {
                                                    Gb = Ic[Ea].vertexNormals[Wb];
                                                    pb = Gb.a;
                                                    qb = Gb.b;
                                                    rb = Gb.c;
                                                } else rb = qb = pb = Ic[Ea].faceNormals[Wb];
                                                Da = Vc[Ea];
                                                Da[ba] = pb.x;
                                                Da[ba + 1] = pb.y;
                                                Da[ba + 2] = pb.z;
                                                Da[ba + 3] = qb.x;
                                                Da[ba + 4] = qb.y;
                                                Da[ba + 5] = qb.z;
                                                Da[ba + 6] = rb.x;
                                                Da[ba + 7] = rb.y;
                                                Da[ba + 8] = rb.z;
                                            }
                                            ba = ba + 9;
                                        }
                                        I = 0;
                                        for (S = la.length; I < S; I++) {
                                            Wb = la[I];
                                            N = za[Wb];
                                            V = Yb[Ea].vertices[N.a];
                                            W = Yb[Ea].vertices[N.b];
                                            X = Yb[Ea].vertices[N.c];
                                            ma = Yb[Ea].vertices[N.d];
                                            Ca = Uc[Ea];
                                            Ca[ba] = V.x;
                                            Ca[ba + 1] = V.y;
                                            Ca[ba + 2] = V.z;
                                            Ca[ba + 3] = W.x;
                                            Ca[ba + 4] = W.y;
                                            Ca[ba + 5] = W.z;
                                            Ca[ba + 6] = X.x;
                                            Ca[ba + 7] = X.y;
                                            Ca[ba + 8] = X.z;
                                            Ca[ba + 9] = ma.x;
                                            Ca[ba + 10] = ma.y;
                                            Ca[ba + 11] = ma.z;
                                            if (bc.morphNormals) {
                                                if (Ec) {
                                                    Gb = Ic[Ea].vertexNormals[Wb];
                                                    pb = Gb.a;
                                                    qb = Gb.b;
                                                    rb = Gb.c;
                                                    rc = Gb.d;
                                                } else rc = rb = qb = pb = Ic[Ea].faceNormals[Wb];
                                                Da = Vc[Ea];
                                                Da[ba] = pb.x;
                                                Da[ba + 1] = pb.y;
                                                Da[ba + 2] = pb.z;
                                                Da[ba + 3] = qb.x;
                                                Da[ba + 4] = qb.y;
                                                Da[ba + 5] = qb.z;
                                                Da[ba + 6] = rb.x;
                                                Da[ba + 7] = rb.y;
                                                Da[ba + 8] = rb.z;
                                                Da[ba + 9] = rc.x;
                                                Da[ba + 10] = rc.y;
                                                Da[ba + 11] = rc.z;
                                            }
                                            ba = ba + 12;
                                        }
                                        i.bindBuffer(i.ARRAY_BUFFER,
                                            ca.__webglMorphTargetsBuffers[Ea]);
                                        i.bufferData(i.ARRAY_BUFFER, Uc[Ea], Xa);
                                        if (bc.morphNormals) {
                                            i.bindBuffer(i.ARRAY_BUFFER, ca.__webglMorphNormalsBuffers[Ea]);
                                            i.bufferData(i.ARRAY_BUFFER, Vc[Ea], Xa);
                                        }
                                    }
                                }
                                if (Xb.length) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        N = za[ka[I]];
                                        vb = Xb[N.a];
                                        wb = Xb[N.b];
                                        xb = Xb[N.c];
                                        ua[L] = vb.x;
                                        ua[L + 1] = vb.y;
                                        ua[L + 2] = vb.z;
                                        ua[L + 3] = vb.w;
                                        ua[L + 4] = wb.x;
                                        ua[L + 5] = wb.y;
                                        ua[L + 6] = wb.z;
                                        ua[L + 7] = wb.w;
                                        ua[L + 8] = xb.x;
                                        ua[L + 9] = xb.y;
                                        ua[L + 10] = xb.z;
                                        ua[L + 11] = xb.w;
                                        yb = fc[N.a];
                                        zb = fc[N.b];
                                        Ab = fc[N.c];
                                        ta[L] = yb.x;
                                        ta[L + 1] = yb.y;
                                        ta[L +
                                            2] = yb.z;
                                        ta[L + 3] = yb.w;
                                        ta[L + 4] = zb.x;
                                        ta[L + 5] = zb.y;
                                        ta[L + 6] = zb.z;
                                        ta[L + 7] = zb.w;
                                        ta[L + 8] = Ab.x;
                                        ta[L + 9] = Ab.y;
                                        ta[L + 10] = Ab.z;
                                        ta[L + 11] = Ab.w;
                                        Pb = dc[N.a];
                                        Qb = dc[N.b];
                                        Rb = dc[N.c];
                                        ra[L] = Pb.x;
                                        ra[L + 1] = Pb.y;
                                        ra[L + 2] = Pb.z;
                                        ra[L + 3] = 1;
                                        ra[L + 4] = Qb.x;
                                        ra[L + 5] = Qb.y;
                                        ra[L + 6] = Qb.z;
                                        ra[L + 7] = 1;
                                        ra[L + 8] = Rb.x;
                                        ra[L + 9] = Rb.y;
                                        ra[L + 10] = Rb.z;
                                        ra[L + 11] = 1;
                                        Sb = ec[N.a];
                                        Tb = ec[N.b];
                                        Ub = ec[N.c];
                                        sa[L] = Sb.x;
                                        sa[L + 1] = Sb.y;
                                        sa[L + 2] = Sb.z;
                                        sa[L + 3] = 1;
                                        sa[L + 4] = Tb.x;
                                        sa[L + 5] = Tb.y;
                                        sa[L + 6] = Tb.z;
                                        sa[L + 7] = 1;
                                        sa[L + 8] = Ub.x;
                                        sa[L + 9] = Ub.y;
                                        sa[L + 10] = Ub.z;
                                        sa[L + 11] = 1;
                                        L = L + 12;
                                    }
                                    I = 0;
                                    for (S =
                                        la.length; I < S; I++) {
                                        N = za[la[I]];
                                        vb = Xb[N.a];
                                        wb = Xb[N.b];
                                        xb = Xb[N.c];
                                        tc = Xb[N.d];
                                        ua[L] = vb.x;
                                        ua[L + 1] = vb.y;
                                        ua[L + 2] = vb.z;
                                        ua[L + 3] = vb.w;
                                        ua[L + 4] = wb.x;
                                        ua[L + 5] = wb.y;
                                        ua[L + 6] = wb.z;
                                        ua[L + 7] = wb.w;
                                        ua[L + 8] = xb.x;
                                        ua[L + 9] = xb.y;
                                        ua[L + 10] = xb.z;
                                        ua[L + 11] = xb.w;
                                        ua[L + 12] = tc.x;
                                        ua[L + 13] = tc.y;
                                        ua[L + 14] = tc.z;
                                        ua[L + 15] = tc.w;
                                        yb = fc[N.a];
                                        zb = fc[N.b];
                                        Ab = fc[N.c];
                                        uc = fc[N.d];
                                        ta[L] = yb.x;
                                        ta[L + 1] = yb.y;
                                        ta[L + 2] = yb.z;
                                        ta[L + 3] = yb.w;
                                        ta[L + 4] = zb.x;
                                        ta[L + 5] = zb.y;
                                        ta[L + 6] = zb.z;
                                        ta[L + 7] = zb.w;
                                        ta[L + 8] = Ab.x;
                                        ta[L + 9] = Ab.y;
                                        ta[L + 10] = Ab.z;
                                        ta[L + 11] = Ab.w;
                                        ta[L + 12] = uc.x;
                                        ta[L + 13] = uc.y;
                                        ta[L + 14] = uc.z;
                                        ta[L + 15] = uc.w;
                                        Pb = dc[N.a];
                                        Qb = dc[N.b];
                                        Rb = dc[N.c];
                                        Gc = dc[N.d];
                                        ra[L] = Pb.x;
                                        ra[L + 1] = Pb.y;
                                        ra[L + 2] = Pb.z;
                                        ra[L + 3] = 1;
                                        ra[L + 4] = Qb.x;
                                        ra[L + 5] = Qb.y;
                                        ra[L + 6] = Qb.z;
                                        ra[L + 7] = 1;
                                        ra[L + 8] = Rb.x;
                                        ra[L + 9] = Rb.y;
                                        ra[L + 10] = Rb.z;
                                        ra[L + 11] = 1;
                                        ra[L + 12] = Gc.x;
                                        ra[L + 13] = Gc.y;
                                        ra[L + 14] = Gc.z;
                                        ra[L + 15] = 1;
                                        Sb = ec[N.a];
                                        Tb = ec[N.b];
                                        Ub = ec[N.c];
                                        Hc = ec[N.d];
                                        sa[L] = Sb.x;
                                        sa[L + 1] = Sb.y;
                                        sa[L + 2] = Sb.z;
                                        sa[L + 3] = 1;
                                        sa[L + 4] = Tb.x;
                                        sa[L + 5] = Tb.y;
                                        sa[L + 6] = Tb.z;
                                        sa[L + 7] = 1;
                                        sa[L + 8] = Ub.x;
                                        sa[L + 9] = Ub.y;
                                        sa[L + 10] = Ub.z;
                                        sa[L + 11] = 1;
                                        sa[L + 12] = Hc.x;
                                        sa[L + 13] = Hc.y;
                                        sa[L + 14] = Hc.z;
                                        sa[L + 15] = 1;
                                        L = L + 16;
                                    }
                                    if (L > 0) {
                                        i.bindBuffer(i.ARRAY_BUFFER, ca.__webglSkinVertexABuffer);
                                        i.bufferData(i.ARRAY_BUFFER, ra, Xa);
                                        i.bindBuffer(i.ARRAY_BUFFER, ca.__webglSkinVertexBBuffer);
                                        i.bufferData(i.ARRAY_BUFFER, sa, Xa);
                                        i.bindBuffer(i.ARRAY_BUFFER, ca.__webglSkinIndicesBuffer);
                                        i.bufferData(i.ARRAY_BUFFER, ta, Xa);
                                        i.bindBuffer(i.ARRAY_BUFFER, ca.__webglSkinWeightsBuffer);
                                        i.bufferData(i.ARRAY_BUFFER, ua, Xa);
                                    }
                                }
                                if (td && Tc) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        N = za[ka[I]];
                                        kb = N.vertexColors;
                                        Fc = N.color;
                                        if (kb.length ===
                                            3 && Tc === THREE.VertexColors) {
                                            sb = kb[0];
                                            tb = kb[1];
                                            ub = kb[2];
                                        } else ub = tb = sb = Fc;
                                        Ga[ya] = sb.r;
                                        Ga[ya + 1] = sb.g;
                                        Ga[ya + 2] = sb.b;
                                        Ga[ya + 3] = tb.r;
                                        Ga[ya + 4] = tb.g;
                                        Ga[ya + 5] = tb.b;
                                        Ga[ya + 6] = ub.r;
                                        Ga[ya + 7] = ub.g;
                                        Ga[ya + 8] = ub.b;
                                        ya = ya + 9;
                                    }
                                    I = 0;
                                    for (S = la.length; I < S; I++) {
                                        N = za[la[I]];
                                        kb = N.vertexColors;
                                        Fc = N.color;
                                        if (kb.length === 4 && Tc === THREE.VertexColors) {
                                            sb = kb[0];
                                            tb = kb[1];
                                            ub = kb[2];
                                            sc = kb[3];
                                        } else sc = ub = tb = sb = Fc;
                                        Ga[ya] = sb.r;
                                        Ga[ya + 1] = sb.g;
                                        Ga[ya + 2] = sb.b;
                                        Ga[ya + 3] = tb.r;
                                        Ga[ya + 4] = tb.g;
                                        Ga[ya + 5] = tb.b;
                                        Ga[ya + 6] = ub.r;
                                        Ga[ya + 7] = ub.g;
                                        Ga[ya + 8] = ub.b;
                                        Ga[ya +
                                            9] = sc.r;
                                        Ga[ya + 10] = sc.g;
                                        Ga[ya + 11] = sc.b;
                                        ya = ya + 12;
                                    }
                                    if (ya > 0) {
                                        i.bindBuffer(i.ARRAY_BUFFER, ca.__webglColorBuffer);
                                        i.bufferData(i.ARRAY_BUFFER, Ga, Xa);
                                    }
                                }
                                if (sd && Pa.hasTangents) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        N = za[ka[I]];
                                        Fb = N.vertexTangents;
                                        mb = Fb[0];
                                        nb = Fb[1];
                                        ob = Fb[2];
                                        qa[na] = mb.x;
                                        qa[na + 1] = mb.y;
                                        qa[na + 2] = mb.z;
                                        qa[na + 3] = mb.w;
                                        qa[na + 4] = nb.x;
                                        qa[na + 5] = nb.y;
                                        qa[na + 6] = nb.z;
                                        qa[na + 7] = nb.w;
                                        qa[na + 8] = ob.x;
                                        qa[na + 9] = ob.y;
                                        qa[na + 10] = ob.z;
                                        qa[na + 11] = ob.w;
                                        na = na + 12;
                                    }
                                    I = 0;
                                    for (S = la.length; I < S; I++) {
                                        N = za[la[I]];
                                        Fb = N.vertexTangents;
                                        mb = Fb[0];
                                        nb = Fb[1];
                                        ob = Fb[2];
                                        qc = Fb[3];
                                        qa[na] = mb.x;
                                        qa[na + 1] = mb.y;
                                        qa[na + 2] = mb.z;
                                        qa[na + 3] = mb.w;
                                        qa[na + 4] = nb.x;
                                        qa[na + 5] = nb.y;
                                        qa[na + 6] = nb.z;
                                        qa[na + 7] = nb.w;
                                        qa[na + 8] = ob.x;
                                        qa[na + 9] = ob.y;
                                        qa[na + 10] = ob.z;
                                        qa[na + 11] = ob.w;
                                        qa[na + 12] = qc.x;
                                        qa[na + 13] = qc.y;
                                        qa[na + 14] = qc.z;
                                        qa[na + 15] = qc.w;
                                        na = na + 16;
                                    }
                                    i.bindBuffer(i.ARRAY_BUFFER, ca.__webglTangentBuffer);
                                    i.bufferData(i.ARRAY_BUFFER, qa, Xa);
                                }
                                if (rd && cd) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        N = za[ka[I]];
                                        jc = N.vertexNormals;
                                        Ob = N.normal;
                                        if (jc.length === 3 && Ec)
                                            for (ja = 0; ja < 3; ja++) {
                                                Vb = jc[ja];
                                                db[Ja] = Vb.x;
                                                db[Ja +
                                                    1] = Vb.y;
                                                db[Ja + 2] = Vb.z;
                                                Ja = Ja + 3;
                                            } else
                                                for (ja = 0; ja < 3; ja++) {
                                                    db[Ja] = Ob.x;
                                                    db[Ja + 1] = Ob.y;
                                                    db[Ja + 2] = Ob.z;
                                                    Ja = Ja + 3;
                                                }
                                    }
                                    I = 0;
                                    for (S = la.length; I < S; I++) {
                                        N = za[la[I]];
                                        jc = N.vertexNormals;
                                        Ob = N.normal;
                                        if (jc.length === 4 && Ec)
                                            for (ja = 0; ja < 4; ja++) {
                                                Vb = jc[ja];
                                                db[Ja] = Vb.x;
                                                db[Ja + 1] = Vb.y;
                                                db[Ja + 2] = Vb.z;
                                                Ja = Ja + 3;
                                            } else
                                                for (ja = 0; ja < 4; ja++) {
                                                    db[Ja] = Ob.x;
                                                    db[Ja + 1] = Ob.y;
                                                    db[Ja + 2] = Ob.z;
                                                    Ja = Ja + 3;
                                                }
                                    }
                                    i.bindBuffer(i.ARRAY_BUFFER, ca.__webglNormalBuffer);
                                    i.bufferData(i.ARRAY_BUFFER, db, Xa);
                                }
                                if (gd && Xc && dd) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        fb = ka[I];
                                        N = za[fb];
                                        kc =
                                            Xc[fb];
                                        if (kc !== void 0)
                                            for (ja = 0; ja < 3; ja++) {
                                                mc = kc[ja];
                                                vc[Hb] = mc.u;
                                                vc[Hb + 1] = mc.v;
                                                Hb = Hb + 2;
                                            }
                                    }
                                    I = 0;
                                    for (S = la.length; I < S; I++) {
                                        fb = la[I];
                                        N = za[fb];
                                        kc = Xc[fb];
                                        if (kc !== void 0)
                                            for (ja = 0; ja < 4; ja++) {
                                                mc = kc[ja];
                                                vc[Hb] = mc.u;
                                                vc[Hb + 1] = mc.v;
                                                Hb = Hb + 2;
                                            }
                                    }
                                    if (Hb > 0) {
                                        i.bindBuffer(i.ARRAY_BUFFER, ca.__webglUVBuffer);
                                        i.bufferData(i.ARRAY_BUFFER, vc, Xa);
                                    }
                                }
                                if (gd && Yc && dd) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        fb = ka[I];
                                        N = za[fb];
                                        lc = Yc[fb];
                                        if (lc !== void 0)
                                            for (ja = 0; ja < 3; ja++) {
                                                nc = lc[ja];
                                                wc[Ib] = nc.u;
                                                wc[Ib + 1] = nc.v;
                                                Ib = Ib + 2;
                                            }
                                    }
                                    I = 0;
                                    for (S = la.length; I < S; I++) {
                                        fb =
                                            la[I];
                                        N = za[fb];
                                        lc = Yc[fb];
                                        if (lc !== void 0)
                                            for (ja = 0; ja < 4; ja++) {
                                                nc = lc[ja];
                                                wc[Ib] = nc.u;
                                                wc[Ib + 1] = nc.v;
                                                Ib = Ib + 2;
                                            }
                                    }
                                    if (Ib > 0) {
                                        i.bindBuffer(i.ARRAY_BUFFER, ca.__webglUV2Buffer);
                                        i.bufferData(i.ARRAY_BUFFER, wc, Xa);
                                    }
                                }
                                if (qd) {
                                    I = 0;
                                    for (S = ka.length; I < S; I++) {
                                        N = za[ka[I]];
                                        Bb[cb] = wa;
                                        Bb[cb + 1] = wa + 1;
                                        Bb[cb + 2] = wa + 2;
                                        cb = cb + 3;
                                        Za[Oa] = wa;
                                        Za[Oa + 1] = wa + 1;
                                        Za[Oa + 2] = wa;
                                        Za[Oa + 3] = wa + 2;
                                        Za[Oa + 4] = wa + 1;
                                        Za[Oa + 5] = wa + 2;
                                        Oa = Oa + 6;
                                        wa = wa + 3;
                                    }
                                    I = 0;
                                    for (S = la.length; I < S; I++) {
                                        N = za[la[I]];
                                        Bb[cb] = wa;
                                        Bb[cb + 1] = wa + 1;
                                        Bb[cb + 2] = wa + 3;
                                        Bb[cb + 3] = wa + 1;
                                        Bb[cb + 4] = wa + 2;
                                        Bb[cb + 5] =
                                            wa + 3;
                                        cb = cb + 6;
                                        Za[Oa] = wa;
                                        Za[Oa + 1] = wa + 1;
                                        Za[Oa + 2] = wa;
                                        Za[Oa + 3] = wa + 3;
                                        Za[Oa + 4] = wa + 1;
                                        Za[Oa + 5] = wa + 2;
                                        Za[Oa + 6] = wa + 2;
                                        Za[Oa + 7] = wa + 3;
                                        Oa = Oa + 8;
                                        wa = wa + 4;
                                    }
                                    i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, ca.__webglFaceBuffer);
                                    i.bufferData(i.ELEMENT_ARRAY_BUFFER, Bb, Xa);
                                    i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, ca.__webglLineBuffer);
                                    i.bufferData(i.ELEMENT_ARRAY_BUFFER, Za, Xa);
                                }
                                if (Wc) {
                                    ja = 0;
                                    for (ed = Wc.length; ja < ed; ja++) {
                                        x = Wc[ja];
                                        if (x.__original.needsUpdate) {
                                            B = 0;
                                            if (x.size === 1)
                                                if (x.boundTo === void 0 || x.boundTo === "vertices") {
                                                    I = 0;
                                                    for (S = ka.length; I <
                                                        S; I++) {
                                                        N = za[ka[I]];
                                                        x.array[B] = x.value[N.a];
                                                        x.array[B + 1] = x.value[N.b];
                                                        x.array[B + 2] = x.value[N.c];
                                                        B = B + 3;
                                                    }
                                                    I = 0;
                                                    for (S = la.length; I < S; I++) {
                                                        N = za[la[I]];
                                                        x.array[B] = x.value[N.a];
                                                        x.array[B + 1] = x.value[N.b];
                                                        x.array[B + 2] = x.value[N.c];
                                                        x.array[B + 3] = x.value[N.d];
                                                        B = B + 4;
                                                    }
                                                } else {
                                                    if (x.boundTo === "faces") {
                                                        I = 0;
                                                        for (S = ka.length; I < S; I++) {
                                                            Ya = x.value[ka[I]];
                                                            x.array[B] = Ya;
                                                            x.array[B + 1] = Ya;
                                                            x.array[B + 2] = Ya;
                                                            B = B + 3;
                                                        }
                                                        I = 0;
                                                        for (S = la.length; I < S; I++) {
                                                            Ya = x.value[la[I]];
                                                            x.array[B] = Ya;
                                                            x.array[B + 1] = Ya;
                                                            x.array[B + 2] = Ya;
                                                            x.array[B + 3] = Ya;
                                                            B = B + 4;
                                                        }
                                                    }
                                                }
                                            else if (x.size ===
                                                2)
                                                if (x.boundTo === void 0 || x.boundTo === "vertices") {
                                                    I = 0;
                                                    for (S = ka.length; I < S; I++) {
                                                        N = za[ka[I]];
                                                        V = x.value[N.a];
                                                        W = x.value[N.b];
                                                        X = x.value[N.c];
                                                        x.array[B] = V.x;
                                                        x.array[B + 1] = V.y;
                                                        x.array[B + 2] = W.x;
                                                        x.array[B + 3] = W.y;
                                                        x.array[B + 4] = X.x;
                                                        x.array[B + 5] = X.y;
                                                        B = B + 6;
                                                    }
                                                    I = 0;
                                                    for (S = la.length; I < S; I++) {
                                                        N = za[la[I]];
                                                        V = x.value[N.a];
                                                        W = x.value[N.b];
                                                        X = x.value[N.c];
                                                        ma = x.value[N.d];
                                                        x.array[B] = V.x;
                                                        x.array[B + 1] = V.y;
                                                        x.array[B + 2] = W.x;
                                                        x.array[B + 3] = W.y;
                                                        x.array[B + 4] = X.x;
                                                        x.array[B + 5] = X.y;
                                                        x.array[B + 6] = ma.x;
                                                        x.array[B + 7] = ma.y;
                                                        B = B + 8;
                                                    }
                                                } else {
                                                    if (x.boundTo ===
                                                        "faces") {
                                                        I = 0;
                                                        for (S = ka.length; I < S; I++) {
                                                            X = W = V = Ya = x.value[ka[I]];
                                                            x.array[B] = V.x;
                                                            x.array[B + 1] = V.y;
                                                            x.array[B + 2] = W.x;
                                                            x.array[B + 3] = W.y;
                                                            x.array[B + 4] = X.x;
                                                            x.array[B + 5] = X.y;
                                                            B = B + 6;
                                                        }
                                                        I = 0;
                                                        for (S = la.length; I < S; I++) {
                                                            ma = X = W = V = Ya = x.value[la[I]];
                                                            x.array[B] = V.x;
                                                            x.array[B + 1] = V.y;
                                                            x.array[B + 2] = W.x;
                                                            x.array[B + 3] = W.y;
                                                            x.array[B + 4] = X.x;
                                                            x.array[B + 5] = X.y;
                                                            x.array[B + 6] = ma.x;
                                                            x.array[B + 7] = ma.y;
                                                            B = B + 8;
                                                        }
                                                    }
                                                }
                                            else if (x.size === 3) {
                                                var da;
                                                da = x.type === "c" ? ["r", "g", "b"] : ["x", "y", "z"];
                                                if (x.boundTo === void 0 || x.boundTo === "vertices") {
                                                    I = 0;
                                                    for (S = ka.length; I <
                                                        S; I++) {
                                                        N = za[ka[I]];
                                                        V = x.value[N.a];
                                                        W = x.value[N.b];
                                                        X = x.value[N.c];
                                                        x.array[B] = V[da[0]];
                                                        x.array[B + 1] = V[da[1]];
                                                        x.array[B + 2] = V[da[2]];
                                                        x.array[B + 3] = W[da[0]];
                                                        x.array[B + 4] = W[da[1]];
                                                        x.array[B + 5] = W[da[2]];
                                                        x.array[B + 6] = X[da[0]];
                                                        x.array[B + 7] = X[da[1]];
                                                        x.array[B + 8] = X[da[2]];
                                                        B = B + 9;
                                                    }
                                                    I = 0;
                                                    for (S = la.length; I < S; I++) {
                                                        N = za[la[I]];
                                                        V = x.value[N.a];
                                                        W = x.value[N.b];
                                                        X = x.value[N.c];
                                                        ma = x.value[N.d];
                                                        x.array[B] = V[da[0]];
                                                        x.array[B + 1] = V[da[1]];
                                                        x.array[B + 2] = V[da[2]];
                                                        x.array[B + 3] = W[da[0]];
                                                        x.array[B + 4] = W[da[1]];
                                                        x.array[B + 5] = W[da[2]];
                                                        x.array[B +
                                                            6] = X[da[0]];
                                                        x.array[B + 7] = X[da[1]];
                                                        x.array[B + 8] = X[da[2]];
                                                        x.array[B + 9] = ma[da[0]];
                                                        x.array[B + 10] = ma[da[1]];
                                                        x.array[B + 11] = ma[da[2]];
                                                        B = B + 12;
                                                    }
                                                } else if (x.boundTo === "faces") {
                                                    I = 0;
                                                    for (S = ka.length; I < S; I++) {
                                                        X = W = V = Ya = x.value[ka[I]];
                                                        x.array[B] = V[da[0]];
                                                        x.array[B + 1] = V[da[1]];
                                                        x.array[B + 2] = V[da[2]];
                                                        x.array[B + 3] = W[da[0]];
                                                        x.array[B + 4] = W[da[1]];
                                                        x.array[B + 5] = W[da[2]];
                                                        x.array[B + 6] = X[da[0]];
                                                        x.array[B + 7] = X[da[1]];
                                                        x.array[B + 8] = X[da[2]];
                                                        B = B + 9;
                                                    }
                                                    I = 0;
                                                    for (S = la.length; I < S; I++) {
                                                        ma = X = W = V = Ya = x.value[la[I]];
                                                        x.array[B] = V[da[0]];
                                                        x.array[B +
                                                            1] = V[da[1]];
                                                        x.array[B + 2] = V[da[2]];
                                                        x.array[B + 3] = W[da[0]];
                                                        x.array[B + 4] = W[da[1]];
                                                        x.array[B + 5] = W[da[2]];
                                                        x.array[B + 6] = X[da[0]];
                                                        x.array[B + 7] = X[da[1]];
                                                        x.array[B + 8] = X[da[2]];
                                                        x.array[B + 9] = ma[da[0]];
                                                        x.array[B + 10] = ma[da[1]];
                                                        x.array[B + 11] = ma[da[2]];
                                                        B = B + 12;
                                                    }
                                                }
                                            } else if (x.size === 4)
                                                if (x.boundTo === void 0 || x.boundTo === "vertices") {
                                                    I = 0;
                                                    for (S = ka.length; I < S; I++) {
                                                        N = za[ka[I]];
                                                        V = x.value[N.a];
                                                        W = x.value[N.b];
                                                        X = x.value[N.c];
                                                        x.array[B] = V.x;
                                                        x.array[B + 1] = V.y;
                                                        x.array[B + 2] = V.z;
                                                        x.array[B + 3] = V.w;
                                                        x.array[B + 4] = W.x;
                                                        x.array[B + 5] = W.y;
                                                        x.array[B +
                                                            6] = W.z;
                                                        x.array[B + 7] = W.w;
                                                        x.array[B + 8] = X.x;
                                                        x.array[B + 9] = X.y;
                                                        x.array[B + 10] = X.z;
                                                        x.array[B + 11] = X.w;
                                                        B = B + 12;
                                                    }
                                                    I = 0;
                                                    for (S = la.length; I < S; I++) {
                                                        N = za[la[I]];
                                                        V = x.value[N.a];
                                                        W = x.value[N.b];
                                                        X = x.value[N.c];
                                                        ma = x.value[N.d];
                                                        x.array[B] = V.x;
                                                        x.array[B + 1] = V.y;
                                                        x.array[B + 2] = V.z;
                                                        x.array[B + 3] = V.w;
                                                        x.array[B + 4] = W.x;
                                                        x.array[B + 5] = W.y;
                                                        x.array[B + 6] = W.z;
                                                        x.array[B + 7] = W.w;
                                                        x.array[B + 8] = X.x;
                                                        x.array[B + 9] = X.y;
                                                        x.array[B + 10] = X.z;
                                                        x.array[B + 11] = X.w;
                                                        x.array[B + 12] = ma.x;
                                                        x.array[B + 13] = ma.y;
                                                        x.array[B + 14] = ma.z;
                                                        x.array[B + 15] = ma.w;
                                                        B = B + 16;
                                                    }
                                                } else if (x.boundTo ===
                                                "faces") {
                                                I = 0;
                                                for (S = ka.length; I < S; I++) {
                                                    X = W = V = Ya = x.value[ka[I]];
                                                    x.array[B] = V.x;
                                                    x.array[B + 1] = V.y;
                                                    x.array[B + 2] = V.z;
                                                    x.array[B + 3] = V.w;
                                                    x.array[B + 4] = W.x;
                                                    x.array[B + 5] = W.y;
                                                    x.array[B + 6] = W.z;
                                                    x.array[B + 7] = W.w;
                                                    x.array[B + 8] = X.x;
                                                    x.array[B + 9] = X.y;
                                                    x.array[B + 10] = X.z;
                                                    x.array[B + 11] = X.w;
                                                    B = B + 12;
                                                }
                                                I = 0;
                                                for (S = la.length; I < S; I++) {
                                                    ma = X = W = V = Ya = x.value[la[I]];
                                                    x.array[B] = V.x;
                                                    x.array[B + 1] = V.y;
                                                    x.array[B + 2] = V.z;
                                                    x.array[B + 3] = V.w;
                                                    x.array[B + 4] = W.x;
                                                    x.array[B + 5] = W.y;
                                                    x.array[B + 6] = W.z;
                                                    x.array[B + 7] = W.w;
                                                    x.array[B + 8] = X.x;
                                                    x.array[B + 9] = X.y;
                                                    x.array[B +
                                                        10] = X.z;
                                                    x.array[B + 11] = X.w;
                                                    x.array[B + 12] = ma.x;
                                                    x.array[B + 13] = ma.y;
                                                    x.array[B + 14] = ma.z;
                                                    x.array[B + 15] = ma.w;
                                                    B = B + 16;
                                                }
                                            }
                                            i.bindBuffer(i.ARRAY_BUFFER, x.buffer);
                                            i.bufferData(i.ARRAY_BUFFER, x.array, Xa);
                                        }
                                    }
                                }
                                if (pd) {
                                    delete ca.__inittedArrays;
                                    delete ca.__colorArray;
                                    delete ca.__normalArray;
                                    delete ca.__tangentArray;
                                    delete ca.__uvArray;
                                    delete ca.__uv2Array;
                                    delete ca.__faceArray;
                                    delete ca.__vertexArray;
                                    delete ca.__lineArray;
                                    delete ca.__skinVertexAArray;
                                    delete ca.__skinVertexBArray;
                                    delete ca.__skinIndexArray;
                                    delete ca.__skinWeightArray;
                                }
                            }
                        }
                    }
                    ga.verticesNeedUpdate =
                        false;
                    ga.morphTargetsNeedUpdate = false;
                    ga.elementsNeedUpdate = false;
                    ga.uvsNeedUpdate = false;
                    ga.normalsNeedUpdate = false;
                    ga.colorsNeedUpdate = false;
                    ga.tangetsNeedUpdate = false;
                    Ua.attributes && m(Ua);
                }
            else if (jb instanceof THREE.Ribbon) {
                if (ga.verticesNeedUpdate || ga.colorsNeedUpdate) {
                    var Zb = ga,
                        hd = i.DYNAMIC_DRAW,
                        xc = void 0,
                        yc = void 0,
                        Jc = void 0,
                        $b = void 0,
                        Kc = void 0,
                        id = Zb.vertices,
                        jd = Zb.colors,
                        vd = id.length,
                        wd = jd.length,
                        Lc = Zb.__vertexArray,
                        Mc = Zb.__colorArray,
                        xd = Zb.colorsNeedUpdate;
                    if (Zb.verticesNeedUpdate) {
                        for (xc = 0; xc <
                            vd; xc++) {
                            Jc = id[xc];
                            $b = xc * 3;
                            Lc[$b] = Jc.x;
                            Lc[$b + 1] = Jc.y;
                            Lc[$b + 2] = Jc.z;
                        }
                        i.bindBuffer(i.ARRAY_BUFFER, Zb.__webglVertexBuffer);
                        i.bufferData(i.ARRAY_BUFFER, Lc, hd);
                    }
                    if (xd) {
                        for (yc = 0; yc < wd; yc++) {
                            Kc = jd[yc];
                            $b = yc * 3;
                            Mc[$b] = Kc.r;
                            Mc[$b + 1] = Kc.g;
                            Mc[$b + 2] = Kc.b;
                        }
                        i.bindBuffer(i.ARRAY_BUFFER, Zb.__webglColorBuffer);
                        i.bufferData(i.ARRAY_BUFFER, Mc, hd);
                    }
                }
                ga.verticesNeedUpdate = false;
                ga.colorsNeedUpdate = false;
            } else if (jb instanceof THREE.Line) {
                Ua = c(jb, hb);
                ic = Ua.attributes && p(Ua);
                if (ga.verticesNeedUpdate || ga.colorsNeedUpdate || ic) {
                    var Jb =
                        ga,
                        Zc = i.DYNAMIC_DRAW,
                        zc = void 0,
                        Ac = void 0,
                        Nc = void 0,
                        va = void 0,
                        Oc = void 0,
                        kd = Jb.vertices,
                        ld = Jb.colors,
                        yd = kd.length,
                        zd = ld.length,
                        Pc = Jb.__vertexArray,
                        Qc = Jb.__colorArray,
                        Ad = Jb.colorsNeedUpdate,
                        $c = Jb.__webglCustomAttributesList,
                        Rc = void 0,
                        md = void 0,
                        Ia = void 0,
                        oc = void 0,
                        Va = void 0,
                        pa = void 0;
                    if (Jb.verticesNeedUpdate) {
                        for (zc = 0; zc < yd; zc++) {
                            Nc = kd[zc];
                            va = zc * 3;
                            Pc[va] = Nc.x;
                            Pc[va + 1] = Nc.y;
                            Pc[va + 2] = Nc.z;
                        }
                        i.bindBuffer(i.ARRAY_BUFFER, Jb.__webglVertexBuffer);
                        i.bufferData(i.ARRAY_BUFFER, Pc, Zc);
                    }
                    if (Ad) {
                        for (Ac = 0; Ac < zd; Ac++) {
                            Oc =
                                ld[Ac];
                            va = Ac * 3;
                            Qc[va] = Oc.r;
                            Qc[va + 1] = Oc.g;
                            Qc[va + 2] = Oc.b;
                        }
                        i.bindBuffer(i.ARRAY_BUFFER, Jb.__webglColorBuffer);
                        i.bufferData(i.ARRAY_BUFFER, Qc, Zc);
                    }
                    if ($c) {
                        Rc = 0;
                        for (md = $c.length; Rc < md; Rc++) {
                            pa = $c[Rc];
                            if (pa.needsUpdate && (pa.boundTo === void 0 || pa.boundTo === "vertices")) {
                                va = 0;
                                oc = pa.value.length;
                                if (pa.size === 1)
                                    for (Ia = 0; Ia < oc; Ia++) pa.array[Ia] = pa.value[Ia];
                                else if (pa.size === 2)
                                    for (Ia = 0; Ia < oc; Ia++) {
                                        Va = pa.value[Ia];
                                        pa.array[va] = Va.x;
                                        pa.array[va + 1] = Va.y;
                                        va = va + 2;
                                    } else if (pa.size === 3)
                                        if (pa.type === "c")
                                            for (Ia = 0; Ia < oc; Ia++) {
                                                Va =
                                                    pa.value[Ia];
                                                pa.array[va] = Va.r;
                                                pa.array[va + 1] = Va.g;
                                                pa.array[va + 2] = Va.b;
                                                va = va + 3;
                                            } else
                                                for (Ia = 0; Ia < oc; Ia++) {
                                                    Va = pa.value[Ia];
                                                    pa.array[va] = Va.x;
                                                    pa.array[va + 1] = Va.y;
                                                    pa.array[va + 2] = Va.z;
                                                    va = va + 3;
                                                } else if (pa.size === 4)
                                                    for (Ia = 0; Ia < oc; Ia++) {
                                                        Va = pa.value[Ia];
                                                        pa.array[va] = Va.x;
                                                        pa.array[va + 1] = Va.y;
                                                        pa.array[va + 2] = Va.z;
                                                        pa.array[va + 3] = Va.w;
                                                        va = va + 4;
                                                    }
                                i.bindBuffer(i.ARRAY_BUFFER, pa.buffer);
                                i.bufferData(i.ARRAY_BUFFER, pa.array, Zc);
                            }
                        }
                    }
                }
                ga.verticesNeedUpdate = false;
                ga.colorsNeedUpdate = false;
                Ua.attributes && m(Ua);
            } else if (jb instanceof THREE.ParticleSystem) {
                Ua = c(jb, hb);
                ic = Ua.attributes && p(Ua);
                (ga.verticesNeedUpdate || ga.colorsNeedUpdate || jb.sortParticles || ic) && f(ga, i.DYNAMIC_DRAW, jb);
                ga.verticesNeedUpdate = false;
                ga.colorsNeedUpdate = false;
                Ua.attributes && m(Ua);
            }
        }
    };
    this.initMaterial = function(a, b, c, d) {
        var e, f, g;
        a instanceof THREE.MeshDepthMaterial ? g = "depth" : a instanceof THREE.MeshNormalMaterial ? g = "normal" : a instanceof THREE.MeshBasicMaterial ? g = "basic" : a instanceof THREE.MeshLambertMaterial ? g = "lambert" : a instanceof THREE.MeshPhongMaterial ?
            g = "phong" : a instanceof THREE.LineBasicMaterial ? g = "basic" : a instanceof THREE.ParticleBasicMaterial && (g = "particle_basic");
        if (g) {
            var h = THREE.ShaderLib[g];
            a.uniforms = THREE.UniformsUtils.clone(h.uniforms);
            a.vertexShader = h.vertexShader;
            a.fragmentShader = h.fragmentShader;
        }
        var j, k, l, m, n;
        j = m = n = h = 0;
        for (k = b.length; j < k; j++) {
            l = b[j];
            if (!l.onlyShadow) {
                l instanceof THREE.DirectionalLight && m++;
                l instanceof THREE.PointLight && n++;
                l instanceof THREE.SpotLight && h++;
            }
        }
        if (n + h + m <= M) {
            k = m;
            l = n;
            m = h;
        } else {
            k = Math.ceil(M * m / (n + m));
            m = l = M - k;
        }
        var p = 0,
            h = 0;
        for (n = b.length; h < n; h++) {
            j = b[h];
            if (j.castShadow) {
                j instanceof THREE.SpotLight && p++;
                j instanceof THREE.DirectionalLight && !j.shadowCascade && p++;
            }
        }
        var o = 50;
        if (d !== void 0 && d instanceof THREE.SkinnedMesh) o = d.bones.length;
        var q;
        a: {
            n = a.fragmentShader;j = a.vertexShader;
            var h = a.uniforms,
                b = a.attributes,
                c = {
                    map: !!a.map,
                    envMap: !!a.envMap,
                    lightMap: !!a.lightMap,
                    vertexColors: a.vertexColors,
                    fog: c,
                    useFog: a.fog,
                    sizeAttenuation: a.sizeAttenuation,
                    skinning: a.skinning,
                    maxBones: o,
                    morphTargets: a.morphTargets,
                    morphNormals: a.morphNormals,
                    maxMorphTargets: this.maxMorphTargets,
                    maxMorphNormals: this.maxMorphNormals,
                    maxDirLights: k,
                    maxPointLights: l,
                    maxSpotLights: m,
                    maxShadows: p,
                    shadowMapEnabled: this.shadowMapEnabled && d.receiveShadow,
                    shadowMapSoft: this.shadowMapSoft,
                    shadowMapDebug: this.shadowMapDebug,
                    shadowMapCascade: this.shadowMapCascade,
                    alphaTest: a.alphaTest,
                    metal: a.metal,
                    perPixel: a.perPixel,
                    wrapAround: a.wrapAround,
                    doubleSided: d && d.doubleSided
                },
                r, d = [];
            if (g) d.push(g);
            else {
                d.push(n);
                d.push(j);
            }
            for (r in c) {
                d.push(r);
                d.push(c[r]);
            }
            g = d.join();r = 0;
            for (d = T.length; r < d; r++)
                if (T[r].code === g) {
                    q = T[r].program;
                    break a
                } r = i.createProgram();d = ["precision " + z + " float;", oa > 0 ? "#define VERTEX_TEXTURES" : "", G.gammaInput ? "#define GAMMA_INPUT" : "", G.gammaOutput ? "#define GAMMA_OUTPUT" : "", G.physicallyBasedShading ? "#define PHYSICALLY_BASED_SHADING" : "", "#define MAX_DIR_LIGHTS " + c.maxDirLights, "#define MAX_POINT_LIGHTS " + c.maxPointLights, "#define MAX_SPOT_LIGHTS " + c.maxSpotLights, "#define MAX_SHADOWS " + c.maxShadows, "#define MAX_BONES " +
                c.maxBones, c.map ? "#define USE_MAP" : "", c.envMap ? "#define USE_ENVMAP" : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.vertexColors ? "#define USE_COLOR" : "", c.skinning ? "#define USE_SKINNING" : "", c.morphTargets ? "#define USE_MORPHTARGETS" : "", c.morphNormals ? "#define USE_MORPHNORMALS" : "", c.perPixel ? "#define PHONG_PER_PIXEL" : "", c.wrapAround ? "#define WRAP_AROUND" : "", c.doubleSided ? "#define DOUBLE_SIDED" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapSoft ? "#define SHADOWMAP_SOFT" : "", c.shadowMapDebug ? "#define SHADOWMAP_DEBUG" :
                "", c.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", c.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 objectMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinVertexA;\nattribute vec4 skinVertexB;\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"
            ].join("\n");
            k = ["precision " + z + " float;", "#define MAX_DIR_LIGHTS " + c.maxDirLights, "#define MAX_POINT_LIGHTS " + c.maxPointLights, "#define MAX_SPOT_LIGHTS " + c.maxSpotLights, "#define MAX_SHADOWS " + c.maxShadows, c.alphaTest ? "#define ALPHATEST " + c.alphaTest : "", G.gammaInput ? "#define GAMMA_INPUT" : "", G.gammaOutput ? "#define GAMMA_OUTPUT" : "", G.physicallyBasedShading ? "#define PHYSICALLY_BASED_SHADING" : "", c.useFog && c.fog ? "#define USE_FOG" : "", c.useFog && c.fog instanceof THREE.FogExp2 ? "#define FOG_EXP2" : "", c.map ? "#define USE_MAP" :
                "", c.envMap ? "#define USE_ENVMAP" : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.vertexColors ? "#define USE_COLOR" : "", c.metal ? "#define METAL" : "", c.perPixel ? "#define PHONG_PER_PIXEL" : "", c.wrapAround ? "#define WRAP_AROUND" : "", c.doubleSided ? "#define DOUBLE_SIDED" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapSoft ? "#define SHADOWMAP_SOFT" : "", c.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", c.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", "uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"
            ].join("\n");
            i.attachShader(r, t("fragment", k + n));i.attachShader(r, t("vertex", d + j));i.linkProgram(r);i.getProgramParameter(r, i.LINK_STATUS) || console.error("Could not initialise shader\nVALIDATE_STATUS: " + i.getProgramParameter(r, i.VALIDATE_STATUS) + ", gl error [" + i.getError() + "]");r.uniforms = {};r.attributes = {};
            var s, d = ["viewMatrix", "modelViewMatrix", "projectionMatrix", "normalMatrix", "objectMatrix", "cameraPosition", "boneGlobalMatrices", "morphTargetInfluences"];
            for (s in h) d.push(s);s = d;d = 0;
            for (h = s.length; d < h; d++) {
                n =
                    s[d];
                r.uniforms[n] = i.getUniformLocation(r, n);
            }
            d = ["position", "normal", "uv", "uv2", "tangent", "color", "skinVertexA", "skinVertexB", "skinIndex", "skinWeight"];
            for (s = 0; s < c.maxMorphTargets; s++) d.push("morphTarget" + s);
            for (s = 0; s < c.maxMorphNormals; s++) d.push("morphNormal" + s);
            for (q in b) d.push(q);q = d;s = 0;
            for (b = q.length; s < b; s++) {
                c = q[s];
                r.attributes[c] = i.getAttribLocation(r, c);
            }
            r.id = T.length;T.push({
                program: r,
                code: g
            });G.info.memory.programs = T.length;q = r;
        }
        a.program = q;
        q = a.program.attributes;
        q.position >= 0 && i.enableVertexAttribArray(q.position);
        q.color >= 0 && i.enableVertexAttribArray(q.color);
        q.normal >= 0 && i.enableVertexAttribArray(q.normal);
        q.tangent >= 0 && i.enableVertexAttribArray(q.tangent);
        if (a.skinning && q.skinVertexA >= 0 && q.skinVertexB >= 0 && q.skinIndex >= 0 && q.skinWeight >= 0) {
            i.enableVertexAttribArray(q.skinVertexA);
            i.enableVertexAttribArray(q.skinVertexB);
            i.enableVertexAttribArray(q.skinIndex);
            i.enableVertexAttribArray(q.skinWeight);
        }
        if (a.attributes)
            for (f in a.attributes) q[f] !== void 0 && q[f] >= 0 && i.enableVertexAttribArray(q[f]);
        if (a.morphTargets) {
            a.numSupportedMorphTargets =
                0;
            r = "morphTarget";
            for (f = 0; f < this.maxMorphTargets; f++) {
                s = r + f;
                if (q[s] >= 0) {
                    i.enableVertexAttribArray(q[s]);
                    a.numSupportedMorphTargets++;
                }
            }
        }
        if (a.morphNormals) {
            a.numSupportedMorphNormals = 0;
            r = "morphNormal";
            for (f = 0; f < this.maxMorphNormals; f++) {
                s = r + f;
                if (q[s] >= 0) {
                    i.enableVertexAttribArray(q[s]);
                    a.numSupportedMorphNormals++;
                }
            }
        }
        a.uniformsList = [];
        for (e in a.uniforms) a.uniformsList.push([a.uniforms[e], e]);
    };
    this.setFaceCulling = function(a, b) {
        if (a) {
            !b || b === "ccw" ? i.frontFace(i.CCW) : i.frontFace(i.CW);
            a === "back" ? i.cullFace(i.BACK) :
                a === "front" ? i.cullFace(i.FRONT) : i.cullFace(i.FRONT_AND_BACK);
            i.enable(i.CULL_FACE);
        } else i.disable(i.CULL_FACE);
    };
    this.setObjectFaces = function(a) {
        if (ia !== a.doubleSided) {
            a.doubleSided ? i.disable(i.CULL_FACE) : i.enable(i.CULL_FACE);
            ia = a.doubleSided;
        }
        if (O !== a.flipSided) {
            a.flipSided ? i.frontFace(i.CW) : i.frontFace(i.CCW);
            O = a.flipSided;
        }
    };
    this.setDepthTest = function(a) {
        if (Ma !== a) {
            a ? i.enable(i.DEPTH_TEST) : i.disable(i.DEPTH_TEST);
            Ma = a;
        }
    };
    this.setDepthWrite = function(a) {
        if (Ka !== a) {
            i.depthMask(a);
            Ka = a;
        }
    };
    this.setBlending =
        function(a, b, c, d) {
            if (a !== Q) {
                switch (a) {
                    case THREE.NoBlending:
                        i.disable(i.BLEND);
                        break;
                    case THREE.AdditiveBlending:
                        i.enable(i.BLEND);
                        i.blendEquation(i.FUNC_ADD);
                        i.blendFunc(i.SRC_ALPHA, i.ONE);
                        break;
                    case THREE.SubtractiveBlending:
                        i.enable(i.BLEND);
                        i.blendEquation(i.FUNC_ADD);
                        i.blendFunc(i.ZERO, i.ONE_MINUS_SRC_COLOR);
                        break;
                    case THREE.MultiplyBlending:
                        i.enable(i.BLEND);
                        i.blendEquation(i.FUNC_ADD);
                        i.blendFunc(i.ZERO, i.SRC_COLOR);
                        break;
                    case THREE.CustomBlending:
                        i.enable(i.BLEND);
                        break;
                    default:
                        i.enable(i.BLEND);
                        i.blendEquationSeparate(i.FUNC_ADD, i.FUNC_ADD);
                        i.blendFuncSeparate(i.SRC_ALPHA, i.ONE_MINUS_SRC_ALPHA, i.ONE, i.ONE_MINUS_SRC_ALPHA);
                }
                Q = a;
            }
            if (a === THREE.CustomBlending) {
                if (b !== Z) {
                    i.blendEquation(H(b));
                    Z = b;
                }
                if (c !== $ || d !== ha) {
                    i.blendFunc(H(c), H(d));
                    $ = c;
                    ha = d;
                }
            } else ha = $ = Z = null;
        };
    this.setTexture = function(a, b) {
        if (a.needsUpdate) {
            if (!a.__webglInit) {
                a.__webglInit = true;
                a.__webglTexture = i.createTexture();
                G.info.memory.textures++;
            }
            i.activeTexture(i.TEXTURE0 + b);
            i.bindTexture(i.TEXTURE_2D, a.__webglTexture);
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                a.premultiplyAlpha);
            var c = a.image,
                d = (c.width & c.width - 1) === 0 && (c.height & c.height - 1) === 0,
                e = H(a.format),
                f = H(a.type);
            y(i.TEXTURE_2D, a, d);
            a instanceof THREE.DataTexture ? i.texImage2D(i.TEXTURE_2D, 0, e, c.width, c.height, 0, e, f, c.data) : i.texImage2D(i.TEXTURE_2D, 0, e, e, f, a.image);
            a.generateMipmaps && d && i.generateMipmap(i.TEXTURE_2D);
            a.needsUpdate = false;
            if (a.onUpdate) a.onUpdate();
        } else {
            i.activeTexture(i.TEXTURE0 + b);
            i.bindTexture(i.TEXTURE_2D, a.__webglTexture);
        }
    };
    this.setRenderTarget = function(a) {
        var b = a instanceof
        THREE.WebGLRenderTargetCube;
        if (a && !a.__webglFramebuffer) {
            if (a.depthBuffer === void 0) a.depthBuffer = true;
            if (a.stencilBuffer === void 0) a.stencilBuffer = true;
            a.__webglTexture = i.createTexture();
            var c = (a.width & a.width - 1) === 0 && (a.height & a.height - 1) === 0,
                d = H(a.format),
                e = H(a.type);
            if (b) {
                a.__webglFramebuffer = [];
                a.__webglRenderbuffer = [];
                i.bindTexture(i.TEXTURE_CUBE_MAP, a.__webglTexture);
                y(i.TEXTURE_CUBE_MAP, a, c);
                for (var f = 0; f < 6; f++) {
                    a.__webglFramebuffer[f] = i.createFramebuffer();
                    a.__webglRenderbuffer[f] = i.createRenderbuffer();
                    i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + f, 0, d, a.width, a.height, 0, d, e, null);
                    var g = a,
                        h = i.TEXTURE_CUBE_MAP_POSITIVE_X + f;
                    i.bindFramebuffer(i.FRAMEBUFFER, a.__webglFramebuffer[f]);
                    i.framebufferTexture2D(i.FRAMEBUFFER, i.COLOR_ATTACHMENT0, h, g.__webglTexture, 0);
                    s(a.__webglRenderbuffer[f], a);
                }
                c && i.generateMipmap(i.TEXTURE_CUBE_MAP);
            } else {
                a.__webglFramebuffer = i.createFramebuffer();
                a.__webglRenderbuffer = i.createRenderbuffer();
                i.bindTexture(i.TEXTURE_2D, a.__webglTexture);
                y(i.TEXTURE_2D, a, c);
                i.texImage2D(i.TEXTURE_2D,
                    0, d, a.width, a.height, 0, d, e, null);
                d = i.TEXTURE_2D;
                i.bindFramebuffer(i.FRAMEBUFFER, a.__webglFramebuffer);
                i.framebufferTexture2D(i.FRAMEBUFFER, i.COLOR_ATTACHMENT0, d, a.__webglTexture, 0);
                s(a.__webglRenderbuffer, a);
                c && i.generateMipmap(i.TEXTURE_2D);
            }
            b ? i.bindTexture(i.TEXTURE_CUBE_MAP, null) : i.bindTexture(i.TEXTURE_2D, null);
            i.bindRenderbuffer(i.RENDERBUFFER, null);
            i.bindFramebuffer(i.FRAMEBUFFER, null);
        }
        if (a) {
            b = b ? a.__webglFramebuffer[a.activeCubeFace] : a.__webglFramebuffer;
            c = a.width;
            a = a.height;
            e = d = 0;
        } else {
            b = null;
            c = gb;
            a = Lb;
            d = Kb;
            e = lb;
        }
        if (b !== C) {
            i.bindFramebuffer(i.FRAMEBUFFER, b);
            i.viewport(d, e, c, a);
            C = b;
        }
        hb = c;
        Cb = a;
    };
    this.shadowMapPlugin = new THREE.ShadowMapPlugin;
    this.addPrePlugin(this.shadowMapPlugin);
    this.addPostPlugin(new THREE.SpritePlugin);
    // this.addPostPlugin(new THREE.LensFlarePlugin)
};
THREE.WebGLRenderTarget = function(a, b, c) {
    this.width = a;
    this.height = b;
    c = c || {};
    this.wrapS = c.wrapS !== void 0 ? c.wrapS : THREE.ClampToEdgeWrapping;
    this.wrapT = c.wrapT !== void 0 ? c.wrapT : THREE.ClampToEdgeWrapping;
    this.magFilter = c.magFilter !== void 0 ? c.magFilter : THREE.LinearFilter;
    this.minFilter = c.minFilter !== void 0 ? c.minFilter : THREE.LinearMipMapLinearFilter;
    this.offset = new THREE.Vector2(0, 0);
    this.repeat = new THREE.Vector2(1, 1);
    this.format = c.format !== void 0 ? c.format : THREE.RGBAFormat;
    this.type = c.type !== void 0 ? c.type :
        THREE.UnsignedByteType;
    this.depthBuffer = c.depthBuffer !== void 0 ? c.depthBuffer : true;
    this.stencilBuffer = c.stencilBuffer !== void 0 ? c.stencilBuffer : true;
    this.generateMipmaps = true;
};
THREE.WebGLRenderTarget.prototype.clone = function() {
    var a = new THREE.WebGLRenderTarget(this.width, this.height);
    a.wrapS = this.wrapS;
    a.wrapT = this.wrapT;
    a.magFilter = this.magFilter;
    a.minFilter = this.minFilter;
    a.offset.copy(this.offset);
    a.repeat.copy(this.repeat);
    a.format = this.format;
    a.type = this.type;
    a.depthBuffer = this.depthBuffer;
    a.stencilBuffer = this.stencilBuffer;
    return a
};
THREE.WebGLRenderTargetCube = function(a, b, c) {
    THREE.WebGLRenderTarget.call(this, a, b, c);
    this.activeCubeFace = 0;
};
THREE.WebGLRenderTargetCube.prototype = new THREE.WebGLRenderTarget;
THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;
THREE.RenderableVertex = function() {
    this.positionWorld = new THREE.Vector3;
    this.positionScreen = new THREE.Vector4;
    this.visible = true;
};
THREE.RenderableVertex.prototype.copy = function(a) {
    this.positionWorld.copy(a.positionWorld);
    this.positionScreen.copy(a.positionScreen);
};
THREE.RenderableFace3 = function() {
    this.v1 = new THREE.RenderableVertex;
    this.v2 = new THREE.RenderableVertex;
    this.v3 = new THREE.RenderableVertex;
    this.centroidWorld = new THREE.Vector3;
    this.centroidScreen = new THREE.Vector3;
    this.normalWorld = new THREE.Vector3;
    this.vertexNormalsWorld = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
    this.faceMaterial = this.material = null;
    this.uvs = [
        []
    ];
    this.z = null;
};
THREE.RenderableFace4 = function() {
    this.v1 = new THREE.RenderableVertex;
    this.v2 = new THREE.RenderableVertex;
    this.v3 = new THREE.RenderableVertex;
    this.v4 = new THREE.RenderableVertex;
    this.centroidWorld = new THREE.Vector3;
    this.centroidScreen = new THREE.Vector3;
    this.normalWorld = new THREE.Vector3;
    this.vertexNormalsWorld = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
    this.faceMaterial = this.material = null;
    this.uvs = [
        []
    ];
    this.z = null;
};
THREE.RenderableObject = function() {
    this.z = this.object = null;
};
THREE.RenderableParticle = function() {
    this.rotation = this.z = this.y = this.x = null;
    this.scale = new THREE.Vector2;
    this.material = null;
};
THREE.RenderableLine = function() {
    this.z = null;
    this.v1 = new THREE.RenderableVertex;
    this.v2 = new THREE.RenderableVertex;
    this.material = null;
};
THREE.ColorUtils = {
    adjustHSV: function(a, b, c, d) {
        var e = THREE.ColorUtils.__hsv;
        THREE.ColorUtils.rgbToHsv(a, e);
        e.h = THREE.Math.clamp(e.h + b, 0, 1);
        e.s = THREE.Math.clamp(e.s + c, 0, 1);
        e.v = THREE.Math.clamp(e.v + d, 0, 1);
        a.setHSV(e.h, e.s, e.v);
    },
    rgbToHsv: function(a, b) {
        var c = a.r,
            d = a.g,
            e = a.b,
            f = Math.max(Math.max(c, d), e),
            g = Math.min(Math.min(c, d), e);
        if (g === f) g = c = 0;
        else {
            var h = f - g,
                g = h / f,
                c = (c === f ? (d - e) / h : d === f ? 2 + (e - c) / h : 4 + (c - d) / h) / 6;
            c < 0 && (c = c + 1);
            c > 1 && (c = c - 1);
        }
        b === void 0 && (b = {
            h: 0,
            s: 0,
            v: 0
        });
        b.h = c;
        b.s = g;
        b.v = f;
        return b
    }
};
THREE.ColorUtils.__hsv = {
    h: 0,
    s: 0,
    v: 0
};
THREE.GeometryUtils = {
    merge: function(a, b) {
        for (var c, d, e = a.vertices.length, f = b instanceof THREE.Mesh ? b.geometry : b, g = a.vertices, h = f.vertices, j = a.faces, l = f.faces, k = a.faceVertexUvs[0], p = f.faceVertexUvs[0], m = {}, o = 0; o < a.materials.length; o++) m[a.materials[o].id] = o;
        if (b instanceof THREE.Mesh) {
            b.matrixAutoUpdate && b.updateMatrix();
            c = b.matrix;
            d = new THREE.Matrix4;
            d.extractRotation(c, b.scale);
        }
        for (var o = 0, q = h.length; o < q; o++) {
            var n = h[o].clone();
            c && c.multiplyVector3(n);
            g.push(n);
        }
        o = 0;
        for (q = l.length; o < q; o++) {
            var g =
                l[o],
                r, u, t = g.vertexNormals,
                y = g.vertexColors;
            g instanceof THREE.Face3 ? r = new THREE.Face3(g.a + e, g.b + e, g.c + e) : g instanceof THREE.Face4 && (r = new THREE.Face4(g.a + e, g.b + e, g.c + e, g.d + e));
            r.normal.copy(g.normal);
            d && d.multiplyVector3(r.normal);
            h = 0;
            for (n = t.length; h < n; h++) {
                u = t[h].clone();
                d && d.multiplyVector3(u);
                r.vertexNormals.push(u);
            }
            r.color.copy(g.color);
            h = 0;
            for (n = y.length; h < n; h++) {
                u = y[h];
                r.vertexColors.push(u.clone());
            }
            if (g.materialIndex !== void 0) {
                h = f.materials[g.materialIndex];
                n = h.id;
                y = m[n];
                if (y === void 0) {
                    y =
                        a.materials.length;
                    m[n] = y;
                    a.materials.push(h);
                }
                r.materialIndex = y;
            }
            r.centroid.copy(g.centroid);
            c && c.multiplyVector3(r.centroid);
            j.push(r);
        }
        o = 0;
        for (q = p.length; o < q; o++) {
            c = p[o];
            d = [];
            h = 0;
            for (n = c.length; h < n; h++) d.push(new THREE.UV(c[h].u, c[h].v));
            k.push(d);
        }
    },
    clone: function(a) {
        var b = new THREE.Geometry,
            c, d = a.vertices,
            e = a.faces,
            f = a.faceVertexUvs[0];
        if (a.materials) b.materials = a.materials.slice();
        a = 0;
        for (c = d.length; a < c; a++) b.vertices.push(d[a].clone());
        a = 0;
        for (c = e.length; a < c; a++) b.faces.push(e[a].clone());
        a = 0;
        for (c = f.length; a < c; a++) {
            for (var d = f[a], e = [], g = 0, h = d.length; g < h; g++) e.push(new THREE.UV(d[g].u, d[g].v));
            b.faceVertexUvs[0].push(e);
        }
        return b
    },
    randomPointInTriangle: function(a, b, c) {
        var d, e, f, g = new THREE.Vector3,
            h = THREE.GeometryUtils.__v1;
        d = THREE.GeometryUtils.random();
        e = THREE.GeometryUtils.random();
        if (d + e > 1) {
            d = 1 - d;
            e = 1 - e;
        }
        f = 1 - d - e;
        g.copy(a);
        g.multiplyScalar(d);
        h.copy(b);
        h.multiplyScalar(e);
        g.addSelf(h);
        h.copy(c);
        h.multiplyScalar(f);
        g.addSelf(h);
        return g
    },
    randomPointInFace: function(a, b, c) {
        var d, e, f;
        if (a instanceof THREE.Face3) {
            d = b.vertices[a.a];
            e = b.vertices[a.b];
            f = b.vertices[a.c];
            return THREE.GeometryUtils.randomPointInTriangle(d, e, f)
        }
        if (a instanceof THREE.Face4) {
            d = b.vertices[a.a];
            e = b.vertices[a.b];
            f = b.vertices[a.c];
            var b = b.vertices[a.d],
                g;
            if (c)
                if (a._area1 && a._area2) {
                    c = a._area1;
                    g = a._area2;
                } else {
                    c = THREE.GeometryUtils.triangleArea(d, e, b);
                    g = THREE.GeometryUtils.triangleArea(e, f, b);
                    a._area1 = c;
                    a._area2 = g;
                }
            else {
                c = THREE.GeometryUtils.triangleArea(d, e, b);
                g = THREE.GeometryUtils.triangleArea(e, f, b);
            }
            return THREE.GeometryUtils.random() *
                (c + g) < c ? THREE.GeometryUtils.randomPointInTriangle(d, e, b) : THREE.GeometryUtils.randomPointInTriangle(e, f, b)
        }
    },
    randomPointsInGeometry: function(a, b) {
        function c(a) {
            function b(c, d) {
                if (d < c) return c;
                var e = c + Math.floor((d - c) / 2);
                return l[e] > a ? b(c, e - 1) : l[e] < a ? b(e + 1, d) : e
            }
            return b(0, l.length - 1)
        }
        var d, e, f = a.faces,
            g = a.vertices,
            h = f.length,
            j = 0,
            l = [],
            k, p, m, o;
        for (e = 0; e < h; e++) {
            d = f[e];
            if (d instanceof THREE.Face3) {
                k = g[d.a];
                p = g[d.b];
                m = g[d.c];
                d._area = THREE.GeometryUtils.triangleArea(k, p, m);
            } else if (d instanceof THREE.Face4) {
                k =
                    g[d.a];
                p = g[d.b];
                m = g[d.c];
                o = g[d.d];
                d._area1 = THREE.GeometryUtils.triangleArea(k, p, o);
                d._area2 = THREE.GeometryUtils.triangleArea(p, m, o);
                d._area = d._area1 + d._area2;
            }
            j = j + d._area;
            l[e] = j;
        }
        d = [];
        for (e = 0; e < b; e++) {
            g = THREE.GeometryUtils.random() * j;
            g = c(g);
            d[e] = THREE.GeometryUtils.randomPointInFace(f[g], a, true);
        }
        return d
    },
    triangleArea: function(a, b, c) {
        var d, e = THREE.GeometryUtils.__v1;
        e.sub(a, b);
        d = e.length();
        e.sub(a, c);
        a = e.length();
        e.sub(b, c);
        c = e.length();
        b = 0.5 * (d + a + c);
        return Math.sqrt(b * (b - d) * (b - a) * (b - c))
    },
    center: function(a) {
        a.computeBoundingBox();
        var b = a.boundingBox,
            c = new THREE.Vector3;
        c.add(b.min, b.max);
        c.multiplyScalar(-0.5);
        a.applyMatrix((new THREE.Matrix4).makeTranslation(c.x, c.y, c.z));
        a.computeBoundingBox();
        return c
    },
    normalizeUVs: function(a) {
        for (var a = a.faceVertexUvs[0], b = 0, c = a.length; b < c; b++)
            for (var d = a[b], e = 0, f = d.length; e < f; e++) {
                if (d[e].u !== 1) d[e].u = d[e].u - Math.floor(d[e].u);
                if (d[e].v !== 1) d[e].v = d[e].v - Math.floor(d[e].v);
            }
    },
    triangulateQuads: function(a) {
        var b, c, d, e, f = [],
            g = [],
            h = [];
        b = 0;
        for (c = a.faceUvs.length; b < c; b++) g[b] = [];
        b = 0;
        for (c = a.faceVertexUvs.length; b <
            c; b++) h[b] = [];
        b = 0;
        for (c = a.faces.length; b < c; b++) {
            d = a.faces[b];
            if (d instanceof THREE.Face4) {
                e = d.a;
                var j = d.b,
                    l = d.c,
                    k = d.d,
                    p = new THREE.Face3,
                    m = new THREE.Face3;
                p.color.copy(d.color);
                m.color.copy(d.color);
                p.materialIndex = d.materialIndex;
                m.materialIndex = d.materialIndex;
                p.a = e;
                p.b = j;
                p.c = k;
                m.a = j;
                m.b = l;
                m.c = k;
                if (d.vertexColors.length === 4) {
                    p.vertexColors[0] = d.vertexColors[0].clone();
                    p.vertexColors[1] = d.vertexColors[1].clone();
                    p.vertexColors[2] = d.vertexColors[3].clone();
                    m.vertexColors[0] = d.vertexColors[1].clone();
                    m.vertexColors[1] = d.vertexColors[2].clone();
                    m.vertexColors[2] = d.vertexColors[3].clone();
                }
                f.push(p, m);
                d = 0;
                for (e = a.faceVertexUvs.length; d < e; d++)
                    if (a.faceVertexUvs[d].length) {
                        p = a.faceVertexUvs[d][b];
                        j = p[1];
                        l = p[2];
                        k = p[3];
                        p = [p[0].clone(), j.clone(), k.clone()];
                        j = [j.clone(), l.clone(), k.clone()];
                        h[d].push(p, j);
                    } d = 0;
                for (e = a.faceUvs.length; d < e; d++)
                    if (a.faceUvs[d].length) {
                        j = a.faceUvs[d][b];
                        g[d].push(j, j);
                    }
            } else {
                f.push(d);
                d = 0;
                for (e = a.faceUvs.length; d < e; d++) g[d].push(a.faceUvs[d]);
                d = 0;
                for (e = a.faceVertexUvs.length; d <
                    e; d++) h[d].push(a.faceVertexUvs[d]);
            }
        }
        a.faces = f;
        a.faceUvs = g;
        a.faceVertexUvs = h;
        a.computeCentroids();
        a.computeFaceNormals();
        a.computeVertexNormals();
        a.hasTangents && a.computeTangents();
    },
    explode: function(a) {
        for (var b = [], c = 0, d = a.faces.length; c < d; c++) {
            var e = b.length,
                f = a.faces[c];
            if (f instanceof THREE.Face4) {
                var g = f.a,
                    h = f.b,
                    j = f.c,
                    g = a.vertices[g],
                    h = a.vertices[h],
                    j = a.vertices[j],
                    l = a.vertices[f.d];
                b.push(g.clone());
                b.push(h.clone());
                b.push(j.clone());
                b.push(l.clone());
                f.a = e;
                f.b = e + 1;
                f.c = e + 2;
                f.d = e + 3;
            } else {
                g = f.a;
                h = f.b;
                j = f.c;
                g = a.vertices[g];
                h = a.vertices[h];
                j = a.vertices[j];
                b.push(g.clone());
                b.push(h.clone());
                b.push(j.clone());
                f.a = e;
                f.b = e + 1;
                f.c = e + 2;
            }
        }
        a.vertices = b;
        delete a.__tmpVertices;
    },
    tessellate: function(a, b) {
        var c, d, e, f, g, h, j, l, k, p, m, o, q, n, r, u, t, y, s, w = [],
            H = [];
        c = 0;
        for (d = a.faceVertexUvs.length; c < d; c++) H[c] = [];
        c = 0;
        for (d = a.faces.length; c < d; c++) {
            e = a.faces[c];
            if (e instanceof THREE.Face3) {
                f = e.a;
                g = e.b;
                h = e.c;
                l = a.vertices[f];
                k = a.vertices[g];
                p = a.vertices[h];
                o = l.distanceTo(k);
                q = k.distanceTo(p);
                m = l.distanceTo(p);
                if (o >
                    b || q > b || m > b) {
                    j = a.vertices.length;
                    y = e.clone();
                    s = e.clone();
                    if (o >= q && o >= m) {
                        l = l.clone();
                        l.lerpSelf(k, 0.5);
                        y.a = f;
                        y.b = j;
                        y.c = h;
                        s.a = j;
                        s.b = g;
                        s.c = h;
                        if (e.vertexNormals.length === 3) {
                            f = e.vertexNormals[0].clone();
                            f.lerpSelf(e.vertexNormals[1], 0.5);
                            y.vertexNormals[1].copy(f);
                            s.vertexNormals[0].copy(f);
                        }
                        if (e.vertexColors.length === 3) {
                            f = e.vertexColors[0].clone();
                            f.lerpSelf(e.vertexColors[1], 0.5);
                            y.vertexColors[1].copy(f);
                            s.vertexColors[0].copy(f);
                        }
                        e = 0;
                    } else if (q >= o && q >= m) {
                        l = k.clone();
                        l.lerpSelf(p, 0.5);
                        y.a = f;
                        y.b = g;
                        y.c =
                            j;
                        s.a = j;
                        s.b = h;
                        s.c = f;
                        if (e.vertexNormals.length === 3) {
                            f = e.vertexNormals[1].clone();
                            f.lerpSelf(e.vertexNormals[2], 0.5);
                            y.vertexNormals[2].copy(f);
                            s.vertexNormals[0].copy(f);
                            s.vertexNormals[1].copy(e.vertexNormals[2]);
                            s.vertexNormals[2].copy(e.vertexNormals[0]);
                        }
                        if (e.vertexColors.length === 3) {
                            f = e.vertexColors[1].clone();
                            f.lerpSelf(e.vertexColors[2], 0.5);
                            y.vertexColors[2].copy(f);
                            s.vertexColors[0].copy(f);
                            s.vertexColors[1].copy(e.vertexColors[2]);
                            s.vertexColors[2].copy(e.vertexColors[0]);
                        }
                        e = 1;
                    } else {
                        l = l.clone();
                        l.lerpSelf(p, 0.5);
                        y.a = f;
                        y.b = g;
                        y.c = j;
                        s.a = j;
                        s.b = g;
                        s.c = h;
                        if (e.vertexNormals.length === 3) {
                            f = e.vertexNormals[0].clone();
                            f.lerpSelf(e.vertexNormals[2], 0.5);
                            y.vertexNormals[2].copy(f);
                            s.vertexNormals[0].copy(f);
                        }
                        if (e.vertexColors.length === 3) {
                            f = e.vertexColors[0].clone();
                            f.lerpSelf(e.vertexColors[2], 0.5);
                            y.vertexColors[2].copy(f);
                            s.vertexColors[0].copy(f);
                        }
                        e = 2;
                    }
                    w.push(y, s);
                    a.vertices.push(l);
                    f = 0;
                    for (g = a.faceVertexUvs.length; f < g; f++)
                        if (a.faceVertexUvs[f].length) {
                            l = a.faceVertexUvs[f][c];
                            s = l[0];
                            h = l[1];
                            y = l[2];
                            if (e ===
                                0) {
                                k = s.clone();
                                k.lerpSelf(h, 0.5);
                                l = [s.clone(), k.clone(), y.clone()];
                                h = [k.clone(), h.clone(), y.clone()];
                            } else if (e === 1) {
                                k = h.clone();
                                k.lerpSelf(y, 0.5);
                                l = [s.clone(), h.clone(), k.clone()];
                                h = [k.clone(), y.clone(), s.clone()];
                            } else {
                                k = s.clone();
                                k.lerpSelf(y, 0.5);
                                l = [s.clone(), h.clone(), k.clone()];
                                h = [k.clone(), h.clone(), y.clone()];
                            }
                            H[f].push(l, h);
                        }
                } else {
                    w.push(e);
                    f = 0;
                    for (g = a.faceVertexUvs.length; f < g; f++) H[f].push(a.faceVertexUvs[f][c]);
                }
            } else {
                f = e.a;
                g = e.b;
                h = e.c;
                j = e.d;
                l = a.vertices[f];
                k = a.vertices[g];
                p = a.vertices[h];
                m =
                    a.vertices[j];
                o = l.distanceTo(k);
                q = k.distanceTo(p);
                n = p.distanceTo(m);
                r = l.distanceTo(m);
                if (o > b || q > b || n > b || r > b) {
                    u = a.vertices.length;
                    t = a.vertices.length + 1;
                    y = e.clone();
                    s = e.clone();
                    if (o >= q && o >= n && o >= r || n >= q && n >= o && n >= r) {
                        o = l.clone();
                        o.lerpSelf(k, 0.5);
                        k = p.clone();
                        k.lerpSelf(m, 0.5);
                        y.a = f;
                        y.b = u;
                        y.c = t;
                        y.d = j;
                        s.a = u;
                        s.b = g;
                        s.c = h;
                        s.d = t;
                        if (e.vertexNormals.length === 4) {
                            f = e.vertexNormals[0].clone();
                            f.lerpSelf(e.vertexNormals[1], 0.5);
                            g = e.vertexNormals[2].clone();
                            g.lerpSelf(e.vertexNormals[3], 0.5);
                            y.vertexNormals[1].copy(f);
                            y.vertexNormals[2].copy(g);
                            s.vertexNormals[0].copy(f);
                            s.vertexNormals[3].copy(g);
                        }
                        if (e.vertexColors.length === 4) {
                            f = e.vertexColors[0].clone();
                            f.lerpSelf(e.vertexColors[1], 0.5);
                            g = e.vertexColors[2].clone();
                            g.lerpSelf(e.vertexColors[3], 0.5);
                            y.vertexColors[1].copy(f);
                            y.vertexColors[2].copy(g);
                            s.vertexColors[0].copy(f);
                            s.vertexColors[3].copy(g);
                        }
                        e = 0;
                    } else {
                        o = k.clone();
                        o.lerpSelf(p, 0.5);
                        k = m.clone();
                        k.lerpSelf(l, 0.5);
                        y.a = f;
                        y.b = g;
                        y.c = u;
                        y.d = t;
                        s.a = t;
                        s.b = u;
                        s.c = h;
                        s.d = j;
                        if (e.vertexNormals.length === 4) {
                            f = e.vertexNormals[1].clone();
                            f.lerpSelf(e.vertexNormals[2], 0.5);
                            g = e.vertexNormals[3].clone();
                            g.lerpSelf(e.vertexNormals[0], 0.5);
                            y.vertexNormals[2].copy(f);
                            y.vertexNormals[3].copy(g);
                            s.vertexNormals[0].copy(g);
                            s.vertexNormals[1].copy(f);
                        }
                        if (e.vertexColors.length === 4) {
                            f = e.vertexColors[1].clone();
                            f.lerpSelf(e.vertexColors[2], 0.5);
                            g = e.vertexColors[3].clone();
                            g.lerpSelf(e.vertexColors[0], 0.5);
                            y.vertexColors[2].copy(f);
                            y.vertexColors[3].copy(g);
                            s.vertexColors[0].copy(g);
                            s.vertexColors[1].copy(f);
                        }
                        e = 1;
                    }
                    w.push(y, s);
                    a.vertices.push(o, k);
                    f = 0;
                    for (g = a.faceVertexUvs.length; f < g; f++)
                        if (a.faceVertexUvs[f].length) {
                            l = a.faceVertexUvs[f][c];
                            s = l[0];
                            h = l[1];
                            y = l[2];
                            l = l[3];
                            if (e === 0) {
                                k = s.clone();
                                k.lerpSelf(h, 0.5);
                                p = y.clone();
                                p.lerpSelf(l, 0.5);
                                s = [s.clone(), k.clone(), p.clone(), l.clone()];
                                h = [k.clone(), h.clone(), y.clone(), p.clone()];
                            } else {
                                k = h.clone();
                                k.lerpSelf(y, 0.5);
                                p = l.clone();
                                p.lerpSelf(s, 0.5);
                                s = [s.clone(), h.clone(), k.clone(), p.clone()];
                                h = [p.clone(), k.clone(), y.clone(), l.clone()];
                            }
                            H[f].push(s, h);
                        }
                } else {
                    w.push(e);
                    f = 0;
                    for (g = a.faceVertexUvs.length; f < g; f++) H[f].push(a.faceVertexUvs[f][c]);
                }
            }
        }
        a.faces =
            w;
        a.faceVertexUvs = H;
    }
};
THREE.GeometryUtils.random = THREE.Math.random16;
THREE.GeometryUtils.__v1 = new THREE.Vector3;
THREE.ImageUtils = {
    crossOrigin: "anonymous",
    loadTexture: function(a, b, c) {
        var d = new Image,
            e = new THREE.Texture(d, b);
        d.onload = function() {
            e.needsUpdate = true;
            c && c(this);
        };
        d.crossOrigin = this.crossOrigin;
        d.src = a;
        return e
    },
    loadTextureCube: function(a, b, c) {
        var d, e = [],
            f = new THREE.Texture(e, b),
            b = e.loadCount = 0;
        for (d = a.length; b < d; ++b) {
            e[b] = new Image;
            e[b].onload = function() {
                e.loadCount = e.loadCount + 1;
                if (e.loadCount === 6) f.needsUpdate = true;
                c && c(this);
            };
            e[b].crossOrigin = this.crossOrigin;
            e[b].src = a[b];
        }
        return f
    },
    getNormalMap: function(a,
        b) {
        var c = function(a) {
                var b = Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
                return [a[0] / b, a[1] / b, a[2] / b]
            },
            b = b | 1,
            d = a.width,
            e = a.height,
            f = document.createElement("canvas");
        f.width = d;
        f.height = e;
        var g = f.getContext("2d");
        g.drawImage(a, 0, 0);
        for (var h = g.getImageData(0, 0, d, e).data, j = g.createImageData(d, e), l = j.data, k = 0; k < d; k++)
            for (var p = 0; p < e; p++) {
                var m = p - 1 < 0 ? 0 : p - 1,
                    o = p + 1 > e - 1 ? e - 1 : p + 1,
                    q = k - 1 < 0 ? 0 : k - 1,
                    n = k + 1 > d - 1 ? d - 1 : k + 1,
                    r = [],
                    u = [0, 0, h[(p * d + k) * 4] / 255 * b];
                r.push([-1, 0, h[(p * d + q) * 4] / 255 * b]);
                r.push([-1, -1, h[(m * d + q) * 4] / 255 * b]);
                r.push([0,
                    -1, h[(m * d + k) * 4] / 255 * b
                ]);
                r.push([1, -1, h[(m * d + n) * 4] / 255 * b]);
                r.push([1, 0, h[(p * d + n) * 4] / 255 * b]);
                r.push([1, 1, h[(o * d + n) * 4] / 255 * b]);
                r.push([0, 1, h[(o * d + k) * 4] / 255 * b]);
                r.push([-1, 1, h[(o * d + q) * 4] / 255 * b]);
                m = [];
                q = r.length;
                for (o = 0; o < q; o++) {
                    var n = r[o],
                        t = r[(o + 1) % q],
                        n = [n[0] - u[0], n[1] - u[1], n[2] - u[2]],
                        t = [t[0] - u[0], t[1] - u[1], t[2] - u[2]];
                    m.push(c([n[1] * t[2] - n[2] * t[1], n[2] * t[0] - n[0] * t[2], n[0] * t[1] - n[1] * t[0]]));
                }
                r = [0, 0, 0];
                for (o = 0; o < m.length; o++) {
                    r[0] = r[0] + m[o][0];
                    r[1] = r[1] + m[o][1];
                    r[2] = r[2] + m[o][2];
                }
                r[0] = r[0] / m.length;
                r[1] =
                    r[1] / m.length;
                r[2] = r[2] / m.length;
                u = (p * d + k) * 4;
                l[u] = (r[0] + 1) / 2 * 255 | 0;
                l[u + 1] = (r[1] + 0.5) * 255 | 0;
                l[u + 2] = r[2] * 255 | 0;
                l[u + 3] = 255;
            }
        g.putImageData(j, 0, 0);
        return f
    },
    generateDataTexture: function(a, b, c) {
        for (var d = a * b, e = new Uint8Array(3 * d), f = Math.floor(c.r * 255), g = Math.floor(c.g * 255), c = Math.floor(c.b * 255), h = 0; h < d; h++) {
            e[h * 3] = f;
            e[h * 3 + 1] = g;
            e[h * 3 + 2] = c;
        }
        a = new THREE.DataTexture(e, a, b, THREE.RGBFormat);
        a.needsUpdate = true;
        return a
    }
};
THREE.SceneUtils = {
    showHierarchy: function(a, b) {
        THREE.SceneUtils.traverseHierarchy(a, function(a) {
            a.visible = b;
        });
    },
    traverseHierarchy: function(a, b) {
        var c, d, e = a.children.length;
        for (d = 0; d < e; d++) {
            c = a.children[d];
            b(c);
            THREE.SceneUtils.traverseHierarchy(c, b);
        }
    },
    createMultiMaterialObject: function(a, b) {
        var c, d = b.length,
            e = new THREE.Object3D;
        for (c = 0; c < d; c++) {
            var f = new THREE.Mesh(a, b[c]);
            e.add(f);
        }
        return e
    },
    cloneObject: function(a) {
        var b;
        if (a instanceof THREE.MorphAnimMesh) {
            b = new THREE.MorphAnimMesh(a.geometry, a.material);
            b.duration = a.duration;
            b.mirroredLoop = a.mirroredLoop;
            b.time = a.time;
            b.lastKeyframe = a.lastKeyframe;
            b.currentKeyframe = a.currentKeyframe;
            b.direction = a.direction;
            b.directionBackwards = a.directionBackwards;
        } else if (a instanceof THREE.SkinnedMesh) b = new THREE.SkinnedMesh(a.geometry, a.material);
        else if (a instanceof THREE.Mesh) b = new THREE.Mesh(a.geometry, a.material);
        else if (a instanceof THREE.Line) b = new THREE.Line(a.geometry, a.material, a.type);
        else if (a instanceof THREE.Ribbon) b = new THREE.Ribbon(a.geometry, a.material);
        else if (a instanceof THREE.ParticleSystem) {
            b = new THREE.ParticleSystem(a.geometry, a.material);
            b.sortParticles = a.sortParticles;
        } else if (a instanceof THREE.Particle) b = new THREE.Particle(a.material);
        else if (a instanceof THREE.Sprite) {
            b = new THREE.Sprite({});
            b.color.copy(a.color);
            b.map = a.map;
            b.blending = a.blending;
            b.useScreenCoordinates = a.useScreenCoordinates;
            b.mergeWith3D = a.mergeWith3D;
            b.affectedByDistance = a.affectedByDistance;
            b.scaleByViewport = a.scaleByViewport;
            b.alignment = a.alignment;
            b.rotation3d.copy(a.rotation3d);
            b.rotation = a.rotation;
            b.opacity = a.opacity;
            b.uvOffset.copy(a.uvOffset);
            b.uvScale.copy(a.uvScale);
        } else a instanceof THREE.LOD ? b = new THREE.LOD : a instanceof THREE.Object3D && (b = new THREE.Object3D);
        b.name = a.name;
        b.parent = a.parent;
        b.up.copy(a.up);
        b.position.copy(a.position);
        b.rotation instanceof THREE.Vector3 && b.rotation.copy(a.rotation);
        b.eulerOrder = a.eulerOrder;
        b.scale.copy(a.scale);
        b.dynamic = a.dynamic;
        b.doubleSided = a.doubleSided;
        b.flipSided = a.flipSided;
        b.renderDepth = a.renderDepth;
        b.rotationAutoUpdate =
            a.rotationAutoUpdate;
        b.matrix.copy(a.matrix);
        b.matrixWorld.copy(a.matrixWorld);
        b.matrixRotationWorld.copy(a.matrixRotationWorld);
        b.matrixAutoUpdate = a.matrixAutoUpdate;
        b.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;
        b.quaternion.copy(a.quaternion);
        b.useQuaternion = a.useQuaternion;
        b.boundRadius = a.boundRadius;
        b.boundRadiusScale = a.boundRadiusScale;
        b.visible = a.visible;
        b.castShadow = a.castShadow;
        b.receiveShadow = a.receiveShadow;
        b.frustumCulled = a.frustumCulled;
        for (var c = 0; c < a.children.length; c++) {
            var d = THREE.SceneUtils.cloneObject(a.children[c]);
            b.children[c] = d;
            d.parent = b;
        }
        if (a instanceof THREE.LOD)
            for (c = 0; c < a.LODs.length; c++) b.LODs[c] = {
                visibleAtDistance: a.LODs[c].visibleAtDistance,
                object3D: b.children[c]
            };
        return b
    },
    detach: function(a, b, c) {
        a.applyMatrix(b.matrixWorld);
        b.remove(a);
        c.add(a);
    },
    attach: function(a, b, c) {
        var d = new THREE.Matrix4;
        d.getInverse(c.matrixWorld);
        a.applyMatrix(d);
        b.remove(a);
        c.add(a);
    }
};
THREE.WebGLRenderer && (THREE.ShaderUtils = {
    lib: {
        fresnel: {
            uniforms: {
                mRefractionRatio: {
                    type: "f",
                    value: 1.02
                },
                mFresnelBias: {
                    type: "f",
                    value: 0.1
                },
                mFresnelPower: {
                    type: "f",
                    value: 2
                },
                mFresnelScale: {
                    type: "f",
                    value: 1
                },
                tCube: {
                    type: "t",
                    value: 1,
                    texture: null
                }
            },
            fragmentShader: "uniform samplerCube tCube;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\nvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\nrefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\nrefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\nrefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\nrefractedColor.a = 1.0;\ngl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n}",
            vertexShader: "uniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = normalize ( mat3( objectMatrix[0].xyz, objectMatrix[1].xyz, objectMatrix[2].xyz ) * normal );\nvec3 I = mPosition.xyz - cameraPosition;\nvReflect = reflect( I, nWorld );\nvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\nvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\nvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\nvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\ngl_Position = projectionMatrix * mvPosition;\n}"
        },
        normal: {
            uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
                enableAO: {
                    type: "i",
                    value: 0
                },
                enableDiffuse: {
                    type: "i",
                    value: 0
                },
                enableSpecular: {
                    type: "i",
                    value: 0
                },
                enableReflection: {
                    type: "i",
                    value: 0
                },
                tDiffuse: {
                    type: "t",
                    value: 0,
                    texture: null
                },
                tCube: {
                    type: "t",
                    value: 1,
                    texture: null
                },
                tNormal: {
                    type: "t",
                    value: 2,
                    texture: null
                },
                tSpecular: {
                    type: "t",
                    value: 3,
                    texture: null
                },
                tAO: {
                    type: "t",
                    value: 4,
                    texture: null
                },
                tDisplacement: {
                    type: "t",
                    value: 5,
                    texture: null
                },
                uNormalScale: {
                    type: "f",
                    value: 1
                },
                uDisplacementBias: {
                    type: "f",
                    value: 0
                },
                uDisplacementScale: {
                    type: "f",
                    value: 1
                },
                uDiffuseColor: {
                    type: "c",
                    value: new THREE.Color(16777215)
                },
                uSpecularColor: {
                    type: "c",
                    value: new THREE.Color(1118481)
                },
                uAmbientColor: {
                    type: "c",
                    value: new THREE.Color(16777215)
                },
                uShininess: {
                    type: "f",
                    value: 30
                },
                uOpacity: {
                    type: "f",
                    value: 1
                },
                uReflectivity: {
                    type: "f",
                    value: 0.5
                },
                uOffset: {
                    type: "v2",
                    value: new THREE.Vector2(0, 0)
                },
                uRepeat: {
                    type: "v2",
                    value: new THREE.Vector2(1, 1)
                },
                wrapRGB: {
                    type: "v3",
                    value: new THREE.Vector3(1, 1, 1)
                }
            }]),
            fragmentShader: ["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform float uNormalScale;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;",
                THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, "void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec3 pointVector = normalize( vPointLight[ i ].xyz );\nfloat pointDistance = vPointLight[ i ].w;\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor) + totalSpecular;\nif ( enableReflection ) {\nvec3 wPos = cameraPosition - vViewPosition;\nvec3 vReflect = reflect( normalize( wPos ), normal );\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
                THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "}"
            ].join("\n"),
            vertexShader: ["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;",
                THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvViewPosition = -mvPosition.xyz;\nvNormal = normalMatrix * normal;\nvTangent = normalMatrix * tangent.xyz;\nvBinormal = cross( vNormal, vTangent ) * tangent.w;\nvUv = uv * uRepeat + uOffset;\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#ifdef VERTEX_TEXTURES\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\nvec4 displacedPosition = vec4( normalize( vNormal.xyz ) * df, 0.0 ) + mvPosition;\ngl_Position = projectionMatrix * displacedPosition;\n#else\ngl_Position = projectionMatrix * mvPosition;\n#endif",
                THREE.ShaderChunk.shadowmap_vertex, "}"
            ].join("\n")
        },
        cube: {
            uniforms: {
                tCube: {
                    type: "t",
                    value: 1,
                    texture: null
                },
                tFlip: {
                    type: "f",
                    value: -1
                }
            },
            vertexShader: "varying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvViewPosition = cameraPosition - mPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            fragmentShader: "uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vViewPosition;\nvoid main() {\nvec3 wPos = cameraPosition - vViewPosition;\ngl_FragColor = textureCube( tCube, vec3( tFlip * wPos.x, wPos.yz ) );\n}"
        }
    }
});
THREE.BufferGeometry = function() {
    this.id = THREE.GeometryCount++;
    this.vertexColorArray = this.vertexUvArray = this.vertexNormalArray = this.vertexPositionArray = this.vertexIndexArray = this.vertexColorBuffer = this.vertexUvBuffer = this.vertexNormalBuffer = this.vertexPositionBuffer = this.vertexIndexBuffer = null;
    this.dynamic = false;
    this.boundingSphere = this.boundingBox = null;
    this.morphTargets = [];
};
THREE.BufferGeometry.prototype = {
    constructor: THREE.BufferGeometry,
    computeBoundingBox: function() {},
    computeBoundingSphere: function() {}
};
THREE.Curve = function() {};
THREE.Curve.prototype.getPoint = function() {
    console.log("Warning, getPoint() not implemented!");
    return null
};
THREE.Curve.prototype.getPointAt = function(a) {
    return this.getPoint(this.getUtoTmapping(a))
};
THREE.Curve.prototype.getPoints = function(a) {
    a || (a = 5);
    var b, c = [];
    for (b = 0; b <= a; b++) c.push(this.getPoint(b / a));
    return c
};
THREE.Curve.prototype.getSpacedPoints = function(a) {
    a || (a = 5);
    var b, c = [];
    for (b = 0; b <= a; b++) c.push(this.getPointAt(b / a));
    return c
};
THREE.Curve.prototype.getLength = function() {
    var a = this.getLengths();
    return a[a.length - 1]
};
THREE.Curve.prototype.getLengths = function(a) {
    a || (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
    if (this.cacheArcLengths && this.cacheArcLengths.length == a + 1 && !this.needsUpdate) return this.cacheArcLengths;
    this.needsUpdate = false;
    var b = [],
        c, d = this.getPoint(0),
        e, f = 0;
    b.push(0);
    for (e = 1; e <= a; e++) {
        c = this.getPoint(e / a);
        f = f + c.distanceTo(d);
        b.push(f);
        d = c;
    }
    return this.cacheArcLengths = b
};
THREE.Curve.prototype.updateArcLengths = function() {
    this.needsUpdate = true;
    this.getLengths();
};
THREE.Curve.prototype.getUtoTmapping = function(a, b) {
    var c = this.getLengths(),
        d = 0,
        e = c.length,
        f;
    f = b ? b : a * c[e - 1];
    for (var g = 0, h = e - 1, j; g <= h;) {
        d = Math.floor(g + (h - g) / 2);
        j = c[d] - f;
        if (j < 0) g = d + 1;
        else if (j > 0) h = d - 1;
        else {
            h = d;
            break
        }
    }
    d = h;
    if (c[d] == f) return d / (e - 1);
    g = c[d];
    return c = (d + (f - g) / (c[d + 1] - g)) / (e - 1)
};
THREE.Curve.prototype.getNormalVector = function(a) {
    a = this.getTangent(a);
    return new THREE.Vector2(-a.y, a.x)
};
THREE.Curve.prototype.getTangent = function(a) {
    var b = a - 1.0E-4,
        a = a + 1.0E-4;
    b < 0 && (b = 0);
    a > 1 && (a = 1);
    b = this.getPoint(b);
    return this.getPoint(a).clone().subSelf(b).normalize()
};
THREE.Curve.prototype.getTangentAt = function(a) {
    return this.getTangent(this.getUtoTmapping(a))
};
THREE.LineCurve = function(a, b) {
    this.v1 = a;
    this.v2 = b;
};
THREE.LineCurve.prototype = new THREE.Curve;
THREE.LineCurve.prototype.constructor = THREE.LineCurve;
THREE.LineCurve.prototype.getPoint = function(a) {
    var b = this.v2.clone().subSelf(this.v1);
    b.multiplyScalar(a).addSelf(this.v1);
    return b
};
THREE.LineCurve.prototype.getPointAt = function(a) {
    return this.getPoint(a)
};
THREE.LineCurve.prototype.getTangent = function() {
    return this.v2.clone().subSelf(this.v1).normalize()
};
THREE.QuadraticBezierCurve = function(a, b, c) {
    this.v0 = a;
    this.v1 = b;
    this.v2 = c;
};
THREE.QuadraticBezierCurve.prototype = new THREE.Curve;
THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;
THREE.QuadraticBezierCurve.prototype.getPoint = function(a) {
    var b;
    b = THREE.Shape.Utils.b2(a, this.v0.x, this.v1.x, this.v2.x);
    a = THREE.Shape.Utils.b2(a, this.v0.y, this.v1.y, this.v2.y);
    return new THREE.Vector2(b, a)
};
THREE.QuadraticBezierCurve.prototype.getTangent = function(a) {
    var b;
    b = THREE.Curve.Utils.tangentQuadraticBezier(a, this.v0.x, this.v1.x, this.v2.x);
    a = THREE.Curve.Utils.tangentQuadraticBezier(a, this.v0.y, this.v1.y, this.v2.y);
    b = new THREE.Vector2(b, a);
    b.normalize();
    return b
};
THREE.CubicBezierCurve = function(a, b, c, d) {
    this.v0 = a;
    this.v1 = b;
    this.v2 = c;
    this.v3 = d;
};
THREE.CubicBezierCurve.prototype = new THREE.Curve;
THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;
THREE.CubicBezierCurve.prototype.getPoint = function(a) {
    var b;
    b = THREE.Shape.Utils.b3(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
    a = THREE.Shape.Utils.b3(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
    return new THREE.Vector2(b, a)
};
THREE.CubicBezierCurve.prototype.getTangent = function(a) {
    var b;
    b = THREE.Curve.Utils.tangentCubicBezier(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
    a = THREE.Curve.Utils.tangentCubicBezier(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
    b = new THREE.Vector2(b, a);
    b.normalize();
    return b
};
THREE.SplineCurve = function(a) {
    this.points = a == void 0 ? [] : a;
};
THREE.SplineCurve.prototype = new THREE.Curve;
THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;
THREE.SplineCurve.prototype.getPoint = function(a) {
    var b = new THREE.Vector2,
        c = [],
        d = this.points,
        e;
    e = (d.length - 1) * a;
    a = Math.floor(e);
    e = e - a;
    c[0] = a == 0 ? a : a - 1;
    c[1] = a;
    c[2] = a > d.length - 2 ? d.length - 1 : a + 1;
    c[3] = a > d.length - 3 ? d.length - 1 : a + 2;
    b.x = THREE.Curve.Utils.interpolate(d[c[0]].x, d[c[1]].x, d[c[2]].x, d[c[3]].x, e);
    b.y = THREE.Curve.Utils.interpolate(d[c[0]].y, d[c[1]].y, d[c[2]].y, d[c[3]].y, e);
    return b
};
THREE.ArcCurve = function(a, b, c, d, e, f) {
    this.aX = a;
    this.aY = b;
    this.aRadius = c;
    this.aStartAngle = d;
    this.aEndAngle = e;
    this.aClockwise = f;
};
THREE.ArcCurve.prototype = new THREE.Curve;
THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;
THREE.ArcCurve.prototype.getPoint = function(a) {
    var b = this.aEndAngle - this.aStartAngle;
    this.aClockwise || (a = 1 - a);
    b = this.aStartAngle + a * b;
    a = this.aX + this.aRadius * Math.cos(b);
    b = this.aY + this.aRadius * Math.sin(b);
    return new THREE.Vector2(a, b)
};
THREE.Curve.Utils = {
    tangentQuadraticBezier: function(a, b, c, d) {
        return 2 * (1 - a) * (c - b) + 2 * a * (d - c)
    },
    tangentCubicBezier: function(a, b, c, d, e) {
        return -3 * b * (1 - a) * (1 - a) + 3 * c * (1 - a) * (1 - a) - 6 * a * c * (1 - a) + 6 * a * d * (1 - a) - 3 * a * a * d + 3 * a * a * e
    },
    tangentSpline: function(a) {
        return 6 * a * a - 6 * a + (3 * a * a - 4 * a + 1) + (-6 * a * a + 6 * a) + (3 * a * a - 2 * a)
    },
    interpolate: function(a, b, c, d, e) {
        var a = (c - a) * 0.5,
            d = (d - b) * 0.5,
            f = e * e;
        return (2 * b - 2 * c + a + d) * e * f + (-3 * b + 3 * c - 2 * a - d) * f + a * e + b
    }
};
THREE.Curve.create = function(a, b) {
    a.prototype = new THREE.Curve;
    a.prototype.constructor = a;
    a.prototype.getPoint = b;
    return a
};
THREE.LineCurve3 = THREE.Curve.create(function(a, b) {
    this.v1 = a;
    this.v2 = b;
}, function(a) {
    var b = new THREE.Vector3;
    b.sub(this.v2, this.v1);
    b.multiplyScalar(a);
    b.addSelf(this.v1);
    return b
});
THREE.QuadraticBezierCurve3 = THREE.Curve.create(function(a, b, c) {
    this.v0 = a;
    this.v1 = b;
    this.v2 = c;
}, function(a) {
    var b, c;
    b = THREE.Shape.Utils.b2(a, this.v0.x, this.v1.x, this.v2.x);
    c = THREE.Shape.Utils.b2(a, this.v0.y, this.v1.y, this.v2.y);
    a = THREE.Shape.Utils.b2(a, this.v0.z, this.v1.z, this.v2.z);
    return new THREE.Vector3(b, c, a)
});
THREE.CubicBezierCurve3 = THREE.Curve.create(function(a, b, c, d) {
    this.v0 = a;
    this.v1 = b;
    this.v2 = c;
    this.v3 = d;
}, function(a) {
    var b, c;
    b = THREE.Shape.Utils.b3(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
    c = THREE.Shape.Utils.b3(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
    a = THREE.Shape.Utils.b3(a, this.v0.z, this.v1.z, this.v2.z, this.v3.z);
    return new THREE.Vector3(b, c, a)
});
THREE.SplineCurve3 = THREE.Curve.create(function(a) {
    this.points = a == void 0 ? [] : a;
}, function(a) {
    var b = new THREE.Vector3,
        c = [],
        d = this.points,
        e, a = (d.length - 1) * a;
    e = Math.floor(a);
    a = a - e;
    c[0] = e == 0 ? e : e - 1;
    c[1] = e;
    c[2] = e > d.length - 2 ? d.length - 1 : e + 1;
    c[3] = e > d.length - 3 ? d.length - 1 : e + 2;
    e = d[c[0]];
    var f = d[c[1]],
        g = d[c[2]],
        c = d[c[3]];
    b.x = THREE.Curve.Utils.interpolate(e.x, f.x, g.x, c.x, a);
    b.y = THREE.Curve.Utils.interpolate(e.y, f.y, g.y, c.y, a);
    b.z = THREE.Curve.Utils.interpolate(e.z, f.z, g.z, c.z, a);
    return b
});
THREE.ClosedSplineCurve3 = THREE.Curve.create(function(a) {
    this.points = a == void 0 ? [] : a;
}, function(a) {
    var b = new THREE.Vector3,
        c = [],
        d = this.points,
        e;
    e = (d.length - 0) * a;
    a = Math.floor(e);
    e = e - a;
    a = a + (a > 0 ? 0 : (Math.floor(Math.abs(a) / d.length) + 1) * d.length);
    c[0] = (a - 1) % d.length;
    c[1] = a % d.length;
    c[2] = (a + 1) % d.length;
    c[3] = (a + 2) % d.length;
    b.x = THREE.Curve.Utils.interpolate(d[c[0]].x, d[c[1]].x, d[c[2]].x, d[c[3]].x, e);
    b.y = THREE.Curve.Utils.interpolate(d[c[0]].y, d[c[1]].y, d[c[2]].y, d[c[3]].y, e);
    b.z = THREE.Curve.Utils.interpolate(d[c[0]].z,
        d[c[1]].z, d[c[2]].z, d[c[3]].z, e);
    return b
});
THREE.CurvePath = function() {
    this.curves = [];
    this.bends = [];
    this.autoClose = false;
};
THREE.CurvePath.prototype = new THREE.Curve;
THREE.CurvePath.prototype.constructor = THREE.CurvePath;
THREE.CurvePath.prototype.add = function(a) {
    this.curves.push(a);
};
THREE.CurvePath.prototype.checkConnection = function() {};
THREE.CurvePath.prototype.closePath = function() {
    var a = this.curves[0].getPoint(0),
        b = this.curves[this.curves.length - 1].getPoint(1);
    a.equals(b) || this.curves.push(new THREE.LineCurve(b, a));
};
THREE.CurvePath.prototype.getPoint = function(a) {
    for (var b = a * this.getLength(), c = this.getCurveLengths(), a = 0; a < c.length;) {
        if (c[a] >= b) {
            b = c[a] - b;
            a = this.curves[a];
            b = 1 - b / a.getLength();
            return a.getPointAt(b)
        }
        a++;
    }
    return null
};
THREE.CurvePath.prototype.getLength = function() {
    var a = this.getCurveLengths();
    return a[a.length - 1]
};
THREE.CurvePath.prototype.getCurveLengths = function() {
    if (this.cacheLengths && this.cacheLengths.length == this.curves.length) return this.cacheLengths;
    var a = [],
        b = 0,
        c, d = this.curves.length;
    for (c = 0; c < d; c++) {
        b = b + this.curves[c].getLength();
        a.push(b);
    }
    return this.cacheLengths = a
};
THREE.CurvePath.prototype.getBoundingBox = function() {
    var a = this.getPoints(),
        b, c, d, e;
    b = c = Number.NEGATIVE_INFINITY;
    d = e = Number.POSITIVE_INFINITY;
    var f, g, h, j;
    j = new THREE.Vector2;
    g = 0;
    for (h = a.length; g < h; g++) {
        f = a[g];
        if (f.x > b) b = f.x;
        else if (f.x < d) d = f.x;
        if (f.y > c) c = f.y;
        else if (f.y < c) e = f.y;
        j.addSelf(f.x, f.y);
    }
    return {
        minX: d,
        minY: e,
        maxX: b,
        maxY: c,
        centroid: j.divideScalar(h)
    }
};
THREE.CurvePath.prototype.createPointsGeometry = function(a) {
    return this.createGeometry(this.getPoints(a, true))
};
THREE.CurvePath.prototype.createSpacedPointsGeometry = function(a) {
    return this.createGeometry(this.getSpacedPoints(a, true))
};
THREE.CurvePath.prototype.createGeometry = function(a) {
    for (var b = new THREE.Geometry, c = 0; c < a.length; c++) b.vertices.push(new THREE.Vector3(a[c].x, a[c].y, 0));
    return b
};
THREE.CurvePath.prototype.addWrapPath = function(a) {
    this.bends.push(a);
};
THREE.CurvePath.prototype.getTransformedPoints = function(a, b) {
    var c = this.getPoints(a),
        d, e;
    if (!b) b = this.bends;
    d = 0;
    for (e = b.length; d < e; d++) c = this.getWrapPoints(c, b[d]);
    return c
};
THREE.CurvePath.prototype.getTransformedSpacedPoints = function(a, b) {
    var c = this.getSpacedPoints(a),
        d, e;
    if (!b) b = this.bends;
    d = 0;
    for (e = b.length; d < e; d++) c = this.getWrapPoints(c, b[d]);
    return c
};
THREE.CurvePath.prototype.getWrapPoints = function(a, b) {
    var c = this.getBoundingBox(),
        d, e, f, g, h, j;
    d = 0;
    for (e = a.length; d < e; d++) {
        f = a[d];
        g = f.x;
        h = f.y;
        j = g / c.maxX;
        j = b.getUtoTmapping(j, g);
        g = b.getPoint(j);
        h = b.getNormalVector(j).multiplyScalar(h);
        f.x = g.x + h.x;
        f.y = g.y + h.y;
    }
    return a
};
THREE.EventTarget = function() {
    var a = {};
    this.addEventListener = function(b, c) {
        a[b] == void 0 && (a[b] = []);
        a[b].indexOf(c) === -1 && a[b].push(c);
    };
    this.dispatchEvent = function(b) {
        for (var c in a[b.type]) a[b.type][c](b);
    };
    this.removeEventListener = function(b, c) {
        var d = a[b].indexOf(c);
        d !== -1 && a[b].splice(d, 1);
    };
};
THREE.Gyroscope = function() {
    THREE.Object3D.call(this);
};
THREE.Gyroscope.prototype = new THREE.Object3D;
THREE.Gyroscope.prototype.constructor = THREE.Gyroscope;
THREE.Gyroscope.prototype.updateMatrixWorld = function(a) {
    this.matrixAutoUpdate && this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || a) {
        if (this.parent) {
            this.matrixWorld.multiply(this.parent.matrixWorld, this.matrix);
            this.matrixWorld.decompose(this.translationWorld, this.rotationWorld, this.scaleWorld);
            this.matrix.decompose(this.translationObject, this.rotationObject, this.scaleObject);
            this.matrixWorld.compose(this.translationWorld, this.rotationObject, this.scaleWorld);
        } else this.matrixWorld.copy(this.matrix);
        this.matrixWorldNeedsUpdate = false;
        a = true;
    }
    for (var b = 0, c = this.children.length; b < c; b++) this.children[b].updateMatrixWorld(a);
};
THREE.Gyroscope.prototype.translationWorld = new THREE.Vector3;
THREE.Gyroscope.prototype.translationObject = new THREE.Vector3;
THREE.Gyroscope.prototype.rotationWorld = new THREE.Quaternion;
THREE.Gyroscope.prototype.rotationObject = new THREE.Quaternion;
THREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3;
THREE.Gyroscope.prototype.scaleObject = new THREE.Vector3;
THREE.Path = function(a) {
    THREE.CurvePath.call(this);
    this.actions = [];
    a && this.fromPoints(a);
};
THREE.Path.prototype = new THREE.CurvePath;
THREE.Path.prototype.constructor = THREE.Path;
THREE.PathActions = {
    MOVE_TO: "moveTo",
    LINE_TO: "lineTo",
    QUADRATIC_CURVE_TO: "quadraticCurveTo",
    BEZIER_CURVE_TO: "bezierCurveTo",
    CSPLINE_THRU: "splineThru",
    ARC: "arc"
};
THREE.Path.prototype.fromPoints = function(a) {
    this.moveTo(a[0].x, a[0].y);
    for (var b = 1, c = a.length; b < c; b++) this.lineTo(a[b].x, a[b].y);
};
THREE.Path.prototype.moveTo = function(a, b) {
    var c = Array.prototype.slice.call(arguments);
    this.actions.push({
        action: THREE.PathActions.MOVE_TO,
        args: c
    });
};
THREE.Path.prototype.lineTo = function(a, b) {
    var c = Array.prototype.slice.call(arguments),
        d = this.actions[this.actions.length - 1].args;
    this.curves.push(new THREE.LineCurve(new THREE.Vector2(d[d.length - 2], d[d.length - 1]), new THREE.Vector2(a, b)));
    this.actions.push({
        action: THREE.PathActions.LINE_TO,
        args: c
    });
};
THREE.Path.prototype.quadraticCurveTo = function(a, b, c, d) {
    var e = Array.prototype.slice.call(arguments),
        f = this.actions[this.actions.length - 1].args;
    this.curves.push(new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length - 2], f[f.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d)));
    this.actions.push({
        action: THREE.PathActions.QUADRATIC_CURVE_TO,
        args: e
    });
};
THREE.Path.prototype.bezierCurveTo = function(a, b, c, d, e, f) {
    var g = Array.prototype.slice.call(arguments),
        h = this.actions[this.actions.length - 1].args;
    this.curves.push(new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length - 2], h[h.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d), new THREE.Vector2(e, f)));
    this.actions.push({
        action: THREE.PathActions.BEZIER_CURVE_TO,
        args: g
    });
};
THREE.Path.prototype.splineThru = function(a) {
    var b = Array.prototype.slice.call(arguments),
        c = this.actions[this.actions.length - 1].args,
        c = [new THREE.Vector2(c[c.length - 2], c[c.length - 1])];
    Array.prototype.push.apply(c, a);
    this.curves.push(new THREE.SplineCurve(c));
    this.actions.push({
        action: THREE.PathActions.CSPLINE_THRU,
        args: b
    });
};
THREE.Path.prototype.arc = function(a, b, c, d, e, f) {
    var g = Array.prototype.slice.call(arguments),
        h = this.actions[this.actions.length - 1],
        h = new THREE.ArcCurve(h.x + a, h.y + b, c, d, e, f);
    this.curves.push(h);
    h = h.getPoint(f ? 1 : 0);
    g.push(h.x);
    g.push(h.y);
    this.actions.push({
        action: THREE.PathActions.ARC,
        args: g
    });
};
THREE.Path.prototype.absarc = function(a, b, c, d, e, f) {
    var g = Array.prototype.slice.call(arguments),
        h = new THREE.ArcCurve(a, b, c, d, e, f);
    this.curves.push(h);
    h = h.getPoint(f ? 1 : 0);
    g.push(h.x);
    g.push(h.y);
    this.actions.push({
        action: THREE.PathActions.ARC,
        args: g
    });
};
THREE.Path.prototype.getSpacedPoints = function(a) {
    a || (a = 40);
    for (var b = [], c = 0; c < a; c++) b.push(this.getPoint(c / a));
    return b
};
THREE.Path.prototype.getPoints = function(a, b) {
    if (this.useSpacedPoints) {
        console.log("tata");
        return this.getSpacedPoints(a, b)
    }
    var a = a || 12,
        c = [],
        d, e, f, g, h, j, l, k, p, m, o, q, n;
    d = 0;
    for (e = this.actions.length; d < e; d++) {
        f = this.actions[d];
        g = f.action;
        f = f.args;
        switch (g) {
            case THREE.PathActions.MOVE_TO:
                c.push(new THREE.Vector2(f[0], f[1]));
                break;
            case THREE.PathActions.LINE_TO:
                c.push(new THREE.Vector2(f[0], f[1]));
                break;
            case THREE.PathActions.QUADRATIC_CURVE_TO:
                h = f[2];
                j = f[3];
                p = f[0];
                m = f[1];
                if (c.length > 0) {
                    g = c[c.length - 1];
                    o = g.x;
                    q = g.y;
                } else {
                    g = this.actions[d - 1].args;
                    o = g[g.length - 2];
                    q = g[g.length - 1];
                }
                for (f = 1; f <= a; f++) {
                    n = f / a;
                    g = THREE.Shape.Utils.b2(n, o, p, h);
                    n = THREE.Shape.Utils.b2(n, q, m, j);
                    c.push(new THREE.Vector2(g, n));
                }
                break;
            case THREE.PathActions.BEZIER_CURVE_TO:
                h = f[4];
                j = f[5];
                p = f[0];
                m = f[1];
                l = f[2];
                k = f[3];
                if (c.length > 0) {
                    g = c[c.length - 1];
                    o = g.x;
                    q = g.y;
                } else {
                    g = this.actions[d - 1].args;
                    o = g[g.length - 2];
                    q = g[g.length - 1];
                }
                for (f = 1; f <= a; f++) {
                    n = f / a;
                    g = THREE.Shape.Utils.b3(n, o, p, l, h);
                    n = THREE.Shape.Utils.b3(n, q, m, k, j);
                    c.push(new THREE.Vector2(g,
                        n));
                }
                break;
            case THREE.PathActions.CSPLINE_THRU:
                g = this.actions[d - 1].args;
                n = [new THREE.Vector2(g[g.length - 2], g[g.length - 1])];
                g = a * f[0].length;
                n = n.concat(f[0]);
                n = new THREE.SplineCurve(n);
                for (f = 1; f <= g; f++) c.push(n.getPointAt(f / g));
                break;
            case THREE.PathActions.ARC:
                h = f[0];
                j = f[1];
                l = f[2];
                p = f[3];
                m = !!f[5];
                k = f[4] - p;
                o = a * 2;
                for (f = 1; f <= o; f++) {
                    n = f / o;
                    m || (n = 1 - n);
                    n = p + n * k;
                    g = h + l * Math.cos(n);
                    n = j + l * Math.sin(n);
                    c.push(new THREE.Vector2(g, n));
                }
        }
    }
    d = c[c.length - 1];
    Math.abs(d.x - c[0].x) < 1.0E-10 && Math.abs(d.y - c[0].y) < 1.0E-10 && c.splice(c.length -
        1, 1);
    b && c.push(c[0]);
    return c
};
THREE.Path.prototype.transform = function(a, b) {
    this.getBoundingBox();
    return this.getWrapPoints(this.getPoints(b), a)
};
THREE.Path.prototype.nltransform = function(a, b, c, d, e, f) {
    var g = this.getPoints(),
        h, j, l, k, p;
    h = 0;
    for (j = g.length; h < j; h++) {
        l = g[h];
        k = l.x;
        p = l.y;
        l.x = a * k + b * p + c;
        l.y = d * p + e * k + f;
    }
    return g
};
THREE.Path.prototype.debug = function(a) {
    var b = this.getBoundingBox();
    if (!a) {
        a = document.createElement("canvas");
        a.setAttribute("width", b.maxX + 100);
        a.setAttribute("height", b.maxY + 100);
        document.body.appendChild(a);
    }
    b = a.getContext("2d");
    b.fillStyle = "white";
    b.fillRect(0, 0, a.width, a.height);
    b.strokeStyle = "black";
    b.beginPath();
    var c, d, e, a = 0;
    for (c = this.actions.length; a < c; a++) {
        d = this.actions[a];
        e = d.args;
        d = d.action;
        d != THREE.PathActions.CSPLINE_THRU && b[d].apply(b, e);
    }
    b.stroke();
    b.closePath();
    b.strokeStyle = "red";
    d = this.getPoints();
    a = 0;
    for (c = d.length; a < c; a++) {
        e = d[a];
        b.beginPath();
        b.arc(e.x, e.y, 1.5, 0, Math.PI * 2, false);
        b.stroke();
        b.closePath();
    }
};
THREE.Path.prototype.toShapes = function() {
    var a, b, c, d, e = [],
        f = new THREE.Path;
    a = 0;
    for (b = this.actions.length; a < b; a++) {
        c = this.actions[a];
        d = c.args;
        c = c.action;
        if (c == THREE.PathActions.MOVE_TO && f.actions.length != 0) {
            e.push(f);
            f = new THREE.Path;
        }
        f[c].apply(f, d);
    }
    f.actions.length != 0 && e.push(f);
    if (e.length == 0) return [];
    var g;
    d = [];
    a = !THREE.Shape.Utils.isClockWise(e[0].getPoints());
    if (e.length == 1) {
        f = e[0];
        g = new THREE.Shape;
        g.actions = f.actions;
        g.curves = f.curves;
        d.push(g);
        return d
    }
    if (a) {
        g = new THREE.Shape;
        a = 0;
        for (b = e.length; a <
            b; a++) {
            f = e[a];
            if (THREE.Shape.Utils.isClockWise(f.getPoints())) {
                g.actions = f.actions;
                g.curves = f.curves;
                d.push(g);
                g = new THREE.Shape;
            } else g.holes.push(f);
        }
    } else {
        a = 0;
        for (b = e.length; a < b; a++) {
            f = e[a];
            if (THREE.Shape.Utils.isClockWise(f.getPoints())) {
                g && d.push(g);
                g = new THREE.Shape;
                g.actions = f.actions;
                g.curves = f.curves;
            } else g.holes.push(f);
        }
        d.push(g);
    }
    return d
};
THREE.Shape = function() {
    THREE.Path.apply(this, arguments);
    this.holes = [];
};
THREE.Shape.prototype = new THREE.Path;
THREE.Shape.prototype.constructor = THREE.Path;
THREE.Shape.prototype.extrude = function(a) {
    return new THREE.ExtrudeGeometry(this, a)
};
THREE.Shape.prototype.getPointsHoles = function(a) {
    var b, c = this.holes.length,
        d = [];
    for (b = 0; b < c; b++) d[b] = this.holes[b].getTransformedPoints(a, this.bends);
    return d
};
THREE.Shape.prototype.getSpacedPointsHoles = function(a) {
    var b, c = this.holes.length,
        d = [];
    for (b = 0; b < c; b++) d[b] = this.holes[b].getTransformedSpacedPoints(a, this.bends);
    return d
};
THREE.Shape.prototype.extractAllPoints = function(a) {
    return {
        shape: this.getTransformedPoints(a),
        holes: this.getPointsHoles(a)
    }
};
THREE.Shape.prototype.extractPoints = function(a) {
    return this.useSpacedPoints ? this.extractAllSpacedPoints(a) : this.extractAllPoints(a)
};
THREE.Shape.prototype.extractAllSpacedPoints = function(a) {
    return {
        shape: this.getTransformedSpacedPoints(a),
        holes: this.getSpacedPointsHoles(a)
    }
};
THREE.Shape.Utils = {
    removeHoles: function(a, b) {
        var c = a.concat(),
            d = c.concat(),
            e, f, g, h, j, l, k, p, m, o, q = [];
        for (j = 0; j < b.length; j++) {
            l = b[j];
            Array.prototype.push.apply(d, l);
            f = Number.POSITIVE_INFINITY;
            for (e = 0; e < l.length; e++) {
                m = l[e];
                o = [];
                for (p = 0; p < c.length; p++) {
                    k = c[p];
                    k = m.distanceToSquared(k);
                    o.push(k);
                    if (k < f) {
                        f = k;
                        g = e;
                        h = p;
                    }
                }
            }
            e = h - 1 >= 0 ? h - 1 : c.length - 1;
            f = g - 1 >= 0 ? g - 1 : l.length - 1;
            var n = [l[g], c[h], c[e]];
            p = THREE.FontUtils.Triangulate.area(n);
            var r = [l[g], l[f], c[h]];
            m = THREE.FontUtils.Triangulate.area(r);
            o = h;
            k = g;
            h = h + 1;
            g = g +
                -1;
            h < 0 && (h = h + c.length);
            h = h % c.length;
            g < 0 && (g = g + l.length);
            g = g % l.length;
            e = h - 1 >= 0 ? h - 1 : c.length - 1;
            f = g - 1 >= 0 ? g - 1 : l.length - 1;
            n = [l[g], c[h], c[e]];
            n = THREE.FontUtils.Triangulate.area(n);
            r = [l[g], l[f], c[h]];
            r = THREE.FontUtils.Triangulate.area(r);
            if (p + m > n + r) {
                h = o;
                g = k;
                h < 0 && (h = h + c.length);
                h = h % c.length;
                g < 0 && (g = g + l.length);
                g = g % l.length;
                e = h - 1 >= 0 ? h - 1 : c.length - 1;
                f = g - 1 >= 0 ? g - 1 : l.length - 1;
            }
            p = c.slice(0, h);
            m = c.slice(h);
            o = l.slice(g);
            k = l.slice(0, g);
            f = [l[g], l[f], c[h]];
            q.push([l[g], c[h], c[e]]);
            q.push(f);
            c = p.concat(o).concat(k).concat(m);
        }
        return {
            shape: c,
            isolatedPts: q,
            allpoints: d
        }
    },
    triangulateShape: function(a, b) {
        var c = THREE.Shape.Utils.removeHoles(a, b),
            d = c.allpoints,
            e = c.isolatedPts,
            c = THREE.FontUtils.Triangulate(c.shape, false),
            f, g, h, j, l = {};
        f = 0;
        for (g = d.length; f < g; f++) {
            j = d[f].x + ":" + d[f].y;
            l[j] !== void 0 && console.log("Duplicate point", j);
            l[j] = f;
        }
        f = 0;
        for (g = c.length; f < g; f++) {
            h = c[f];
            for (d = 0; d < 3; d++) {
                j = h[d].x + ":" + h[d].y;
                j = l[j];
                j !== void 0 && (h[d] = j);
            }
        }
        f = 0;
        for (g = e.length; f < g; f++) {
            h = e[f];
            for (d = 0; d < 3; d++) {
                j = h[d].x + ":" + h[d].y;
                j = l[j];
                j !== void 0 && (h[d] = j);
            }
        }
        return c.concat(e)
    },
    isClockWise: function(a) {
        return THREE.FontUtils.Triangulate.area(a) < 0
    },
    b2p0: function(a, b) {
        var c = 1 - a;
        return c * c * b
    },
    b2p1: function(a, b) {
        return 2 * (1 - a) * a * b
    },
    b2p2: function(a, b) {
        return a * a * b
    },
    b2: function(a, b, c, d) {
        return this.b2p0(a, b) + this.b2p1(a, c) + this.b2p2(a, d)
    },
    b3p0: function(a, b) {
        var c = 1 - a;
        return c * c * c * b
    },
    b3p1: function(a, b) {
        var c = 1 - a;
        return 3 * c * c * a * b
    },
    b3p2: function(a, b) {
        return 3 * (1 - a) * a * a * b
    },
    b3p3: function(a, b) {
        return a * a * a * b
    },
    b3: function(a, b, c, d, e) {
        return this.b3p0(a, b) + this.b3p1(a, c) + this.b3p2(a, d) +
            this.b3p3(a, e)
    }
};
THREE.TextPath = function(a, b) {
    THREE.Path.call(this);
    this.parameters = b || {};
    this.set(a);
};
THREE.TextPath.prototype.set = function(a, b) {
    b = b || this.parameters;
    this.text = a;
    var c = b.curveSegments !== void 0 ? b.curveSegments : 4,
        d = b.font !== void 0 ? b.font : "helvetiker",
        e = b.weight !== void 0 ? b.weight : "normal",
        f = b.style !== void 0 ? b.style : "normal";
    THREE.FontUtils.size = b.size !== void 0 ? b.size : 100;
    THREE.FontUtils.divisions = c;
    THREE.FontUtils.face = d;
    THREE.FontUtils.weight = e;
    THREE.FontUtils.style = f;
};
THREE.TextPath.prototype.toShapes = function() {
    for (var a = THREE.FontUtils.drawText(this.text).paths, b = [], c = 0, d = a.length; c < d; c++) Array.prototype.push.apply(b, a[c].toShapes());
    return b
};
THREE.AnimationHandler = function() {
    var a = [],
        b = {},
        c = {
            update: function(b) {
                for (var c = 0; c < a.length; c++) a[c].update(b);
            },
            addToUpdate: function(b) {
                a.indexOf(b) === -1 && a.push(b);
            },
            removeFromUpdate: function(b) {
                b = a.indexOf(b);
                b !== -1 && a.splice(b, 1);
            },
            add: function(a) {
                b[a.name] !== void 0 && console.log("THREE.AnimationHandler.add: Warning! " + a.name + " already exists in library. Overwriting.");
                b[a.name] = a;
                if (a.initialized !== true) {
                    for (var c = 0; c < a.hierarchy.length; c++) {
                        for (var d = 0; d < a.hierarchy[c].keys.length; d++) {
                            if (a.hierarchy[c].keys[d].time <
                                0) a.hierarchy[c].keys[d].time = 0;
                            if (a.hierarchy[c].keys[d].rot !== void 0 && !(a.hierarchy[c].keys[d].rot instanceof THREE.Quaternion)) {
                                var h = a.hierarchy[c].keys[d].rot;
                                a.hierarchy[c].keys[d].rot = new THREE.Quaternion(h[0], h[1], h[2], h[3]);
                            }
                        }
                        if (a.hierarchy[c].keys.length && a.hierarchy[c].keys[0].morphTargets !== void 0) {
                            h = {};
                            for (d = 0; d < a.hierarchy[c].keys.length; d++)
                                for (var j = 0; j < a.hierarchy[c].keys[d].morphTargets.length; j++) {
                                    var l = a.hierarchy[c].keys[d].morphTargets[j];
                                    h[l] = -1;
                                }
                            a.hierarchy[c].usedMorphTargets =
                                h;
                            for (d = 0; d < a.hierarchy[c].keys.length; d++) {
                                var k = {};
                                for (l in h) {
                                    for (j = 0; j < a.hierarchy[c].keys[d].morphTargets.length; j++)
                                        if (a.hierarchy[c].keys[d].morphTargets[j] === l) {
                                            k[l] = a.hierarchy[c].keys[d].morphTargetsInfluences[j];
                                            break
                                        } j === a.hierarchy[c].keys[d].morphTargets.length && (k[l] = 0);
                                }
                                a.hierarchy[c].keys[d].morphTargetsInfluences = k;
                            }
                        }
                        for (d = 1; d < a.hierarchy[c].keys.length; d++)
                            if (a.hierarchy[c].keys[d].time === a.hierarchy[c].keys[d - 1].time) {
                                a.hierarchy[c].keys.splice(d, 1);
                                d--;
                            } for (d = 0; d < a.hierarchy[c].keys.length; d++) a.hierarchy[c].keys[d].index =
                            d;
                    }
                    d = parseInt(a.length * a.fps, 10);
                    a.JIT = {};
                    a.JIT.hierarchy = [];
                    for (c = 0; c < a.hierarchy.length; c++) a.JIT.hierarchy.push(Array(d));
                    a.initialized = true;
                }
            },
            get: function(a) {
                if (typeof a === "string") {
                    if (b[a]) return b[a];
                    console.log("THREE.AnimationHandler.get: Couldn't find animation " + a);
                    return null
                }
            },
            parse: function(a) {
                var b = [];
                if (a instanceof THREE.SkinnedMesh)
                    for (var c = 0; c < a.bones.length; c++) b.push(a.bones[c]);
                else d(a, b);
                return b
            }
        },
        d = function(a, b) {
            b.push(a);
            for (var c = 0; c < a.children.length; c++) d(a.children[c],
                b);
        };
    c.LINEAR = 0;
    c.CATMULLROM = 1;
    c.CATMULLROM_FORWARD = 2;
    return c
}();
THREE.Animation = function(a, b, c, d) {
    this.root = a;
    this.data = THREE.AnimationHandler.get(b);
    this.hierarchy = THREE.AnimationHandler.parse(a);
    this.currentTime = 0;
    this.timeScale = 1;
    this.isPlaying = false;
    this.loop = this.isPaused = true;
    this.interpolationType = c !== void 0 ? c : THREE.AnimationHandler.LINEAR;
    this.JITCompile = d !== void 0 ? d : true;
    this.points = [];
    this.target = new THREE.Vector3;
};
THREE.Animation.prototype.play = function(a, b) {
    if (!this.isPlaying) {
        this.isPlaying = true;
        this.loop = a !== void 0 ? a : true;
        this.currentTime = b !== void 0 ? b : 0;
        var c, d = this.hierarchy.length,
            e;
        for (c = 0; c < d; c++) {
            e = this.hierarchy[c];
            if (this.interpolationType !== THREE.AnimationHandler.CATMULLROM_FORWARD) e.useQuaternion = true;
            e.matrixAutoUpdate = true;
            if (e.animationCache === void 0) {
                e.animationCache = {};
                e.animationCache.prevKey = {
                    pos: 0,
                    rot: 0,
                    scl: 0
                };
                e.animationCache.nextKey = {
                    pos: 0,
                    rot: 0,
                    scl: 0
                };
                e.animationCache.originalMatrix =
                    e instanceof THREE.Bone ? e.skinMatrix : e.matrix;
            }
            var f = e.animationCache.prevKey;
            e = e.animationCache.nextKey;
            f.pos = this.data.hierarchy[c].keys[0];
            f.rot = this.data.hierarchy[c].keys[0];
            f.scl = this.data.hierarchy[c].keys[0];
            e.pos = this.getNextKeyWith("pos", c, 1);
            e.rot = this.getNextKeyWith("rot", c, 1);
            e.scl = this.getNextKeyWith("scl", c, 1);
        }
        this.update(0);
    }
    this.isPaused = false;
    THREE.AnimationHandler.addToUpdate(this);
};
THREE.Animation.prototype.pause = function() {
    this.isPaused ? THREE.AnimationHandler.addToUpdate(this) : THREE.AnimationHandler.removeFromUpdate(this);
    this.isPaused = !this.isPaused;
};
THREE.Animation.prototype.stop = function() {
    this.isPaused = this.isPlaying = false;
    THREE.AnimationHandler.removeFromUpdate(this);
    for (var a = 0; a < this.hierarchy.length; a++)
        if (this.hierarchy[a].animationCache !== void 0) {
            this.hierarchy[a] instanceof THREE.Bone ? this.hierarchy[a].skinMatrix = this.hierarchy[a].animationCache.originalMatrix : this.hierarchy[a].matrix = this.hierarchy[a].animationCache.originalMatrix;
            delete this.hierarchy[a].animationCache;
        }
};
THREE.Animation.prototype.update = function(a) {
    if (this.isPlaying) {
        var b = ["pos", "rot", "scl"],
            c, d, e, f, g, h, j, l, k = this.data.JIT.hierarchy,
            p, m;
        m = this.currentTime = this.currentTime + a * this.timeScale;
        p = this.currentTime = this.currentTime % this.data.length;
        l = parseInt(Math.min(p * this.data.fps, this.data.length * this.data.fps), 10);
        for (var o = 0, q = this.hierarchy.length; o < q; o++) {
            a = this.hierarchy[o];
            j = a.animationCache;
            if (this.JITCompile && k[o][l] !== void 0)
                if (a instanceof THREE.Bone) {
                    a.skinMatrix = k[o][l];
                    a.matrixAutoUpdate =
                        false;
                    a.matrixWorldNeedsUpdate = false;
                } else {
                    a.matrix = k[o][l];
                    a.matrixAutoUpdate = false;
                    a.matrixWorldNeedsUpdate = true;
                }
            else {
                if (this.JITCompile) a instanceof THREE.Bone ? a.skinMatrix = a.animationCache.originalMatrix : a.matrix = a.animationCache.originalMatrix;
                for (var n = 0; n < 3; n++) {
                    c = b[n];
                    g = j.prevKey[c];
                    h = j.nextKey[c];
                    if (h.time <= m) {
                        if (p < m)
                            if (this.loop) {
                                g = this.data.hierarchy[o].keys[0];
                                for (h = this.getNextKeyWith(c, o, 1); h.time < p;) {
                                    g = h;
                                    h = this.getNextKeyWith(c, o, h.index + 1);
                                }
                            } else {
                                this.stop();
                                return
                            }
                        else {
                            do {
                                g = h;
                                h = this.getNextKeyWith(c,
                                    o, h.index + 1);
                            } while (h.time < p)
                        }
                        j.prevKey[c] = g;
                        j.nextKey[c] = h;
                    }
                    a.matrixAutoUpdate = true;
                    a.matrixWorldNeedsUpdate = true;
                    d = (p - g.time) / (h.time - g.time);
                    e = g[c];
                    f = h[c];
                    if (d < 0 || d > 1) {
                        console.log("THREE.Animation.update: Warning! Scale out of bounds:" + d + " on bone " + o);
                        d = d < 0 ? 0 : 1;
                    }
                    if (c === "pos") {
                        c = a.position;
                        if (this.interpolationType === THREE.AnimationHandler.LINEAR) {
                            c.x = e[0] + (f[0] - e[0]) * d;
                            c.y = e[1] + (f[1] - e[1]) * d;
                            c.z = e[2] + (f[2] - e[2]) * d;
                        } else if (this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType ===
                            THREE.AnimationHandler.CATMULLROM_FORWARD) {
                            this.points[0] = this.getPrevKeyWith("pos", o, g.index - 1).pos;
                            this.points[1] = e;
                            this.points[2] = f;
                            this.points[3] = this.getNextKeyWith("pos", o, h.index + 1).pos;
                            d = d * 0.33 + 0.33;
                            e = this.interpolateCatmullRom(this.points, d);
                            c.x = e[0];
                            c.y = e[1];
                            c.z = e[2];
                            if (this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD) {
                                d = this.interpolateCatmullRom(this.points, d * 1.01);
                                this.target.set(d[0], d[1], d[2]);
                                this.target.subSelf(c);
                                this.target.y = 0;
                                this.target.normalize();
                                d = Math.atan2(this.target.x,
                                    this.target.z);
                                a.rotation.set(0, d, 0);
                            }
                        }
                    } else if (c === "rot") THREE.Quaternion.slerp(e, f, a.quaternion, d);
                    else if (c === "scl") {
                        c = a.scale;
                        c.x = e[0] + (f[0] - e[0]) * d;
                        c.y = e[1] + (f[1] - e[1]) * d;
                        c.z = e[2] + (f[2] - e[2]) * d;
                    }
                }
            }
        }
        if (this.JITCompile && k[0][l] === void 0) {
            this.hierarchy[0].updateMatrixWorld(true);
            for (o = 0; o < this.hierarchy.length; o++) k[o][l] = this.hierarchy[o] instanceof THREE.Bone ? this.hierarchy[o].skinMatrix.clone() : this.hierarchy[o].matrix.clone();
        }
    }
};
THREE.Animation.prototype.interpolateCatmullRom = function(a, b) {
    var c = [],
        d = [],
        e, f, g, h, j, l;
    e = (a.length - 1) * b;
    f = Math.floor(e);
    e = e - f;
    c[0] = f === 0 ? f : f - 1;
    c[1] = f;
    c[2] = f > a.length - 2 ? f : f + 1;
    c[3] = f > a.length - 3 ? f : f + 2;
    f = a[c[0]];
    h = a[c[1]];
    j = a[c[2]];
    l = a[c[3]];
    c = e * e;
    g = e * c;
    d[0] = this.interpolate(f[0], h[0], j[0], l[0], e, c, g);
    d[1] = this.interpolate(f[1], h[1], j[1], l[1], e, c, g);
    d[2] = this.interpolate(f[2], h[2], j[2], l[2], e, c, g);
    return d
};
THREE.Animation.prototype.interpolate = function(a, b, c, d, e, f, g) {
    a = (c - a) * 0.5;
    d = (d - b) * 0.5;
    return (2 * (b - c) + a + d) * g + (-3 * (b - c) - 2 * a - d) * f + a * e + b
};
THREE.Animation.prototype.getNextKeyWith = function(a, b, c) {
    for (var d = this.data.hierarchy[b].keys, c = this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? c < d.length - 1 ? c : d.length - 1 : c % d.length; c < d.length; c++)
        if (d[c][a] !== void 0) return d[c];
    return this.data.hierarchy[b].keys[0]
};
THREE.Animation.prototype.getPrevKeyWith = function(a, b, c) {
    for (var d = this.data.hierarchy[b].keys, c = this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? c > 0 ? c : 0 : c >= 0 ? c : c + d.length; c >= 0; c--)
        if (d[c][a] !== void 0) return d[c];
    return this.data.hierarchy[b].keys[d.length - 1]
};
THREE.KeyFrameAnimation = function(a, b, c) {
    this.root = a;
    this.data = THREE.AnimationHandler.get(b);
    this.hierarchy = THREE.AnimationHandler.parse(a);
    this.currentTime = 0;
    this.timeScale = 0.001;
    this.isPlaying = false;
    this.loop = this.isPaused = true;
    this.JITCompile = c !== void 0 ? c : true;
    a = 0;
    for (b = this.hierarchy.length; a < b; a++) {
        var c = this.data.hierarchy[a].sids,
            d = this.hierarchy[a];
        if (this.data.hierarchy[a].keys.length && c) {
            for (var e = 0; e < c.length; e++) {
                var f = c[e],
                    g = this.getNextKeyWith(f, a, 0);
                g && g.apply(f);
            }
            d.matrixAutoUpdate =
                false;
            this.data.hierarchy[a].node.updateMatrix();
            d.matrixWorldNeedsUpdate = true;
        }
    }
};
THREE.KeyFrameAnimation.prototype.play = function(a, b) {
    if (!this.isPlaying) {
        this.isPlaying = true;
        this.loop = a !== void 0 ? a : true;
        this.currentTime = b !== void 0 ? b : 0;
        this.startTimeMs = b;
        this.startTime = 1E7;
        this.endTime = -this.startTime;
        var c, d = this.hierarchy.length,
            e, f;
        for (c = 0; c < d; c++) {
            e = this.hierarchy[c];
            f = this.data.hierarchy[c];
            e.useQuaternion = true;
            if (f.animationCache === void 0) {
                f.animationCache = {};
                f.animationCache.prevKey = null;
                f.animationCache.nextKey = null;
                f.animationCache.originalMatrix = e instanceof THREE.Bone ?
                    e.skinMatrix : e.matrix;
            }
            e = this.data.hierarchy[c].keys;
            if (e.length) {
                f.animationCache.prevKey = e[0];
                f.animationCache.nextKey = e[1];
                this.startTime = Math.min(e[0].time, this.startTime);
                this.endTime = Math.max(e[e.length - 1].time, this.endTime);
            }
        }
        this.update(0);
    }
    this.isPaused = false;
    THREE.AnimationHandler.addToUpdate(this);
};
THREE.KeyFrameAnimation.prototype.pause = function() {
    this.isPaused ? THREE.AnimationHandler.addToUpdate(this) : THREE.AnimationHandler.removeFromUpdate(this);
    this.isPaused = !this.isPaused;
};
THREE.KeyFrameAnimation.prototype.stop = function() {
    this.isPaused = this.isPlaying = false;
    THREE.AnimationHandler.removeFromUpdate(this);
    for (var a = 0; a < this.data.hierarchy.length; a++) {
        var b = this.hierarchy[a],
            c = this.data.hierarchy[a];
        if (c.animationCache !== void 0) {
            var d = c.animationCache.originalMatrix;
            if (b instanceof THREE.Bone) {
                d.copy(b.skinMatrix);
                b.skinMatrix = d;
            } else {
                d.copy(b.matrix);
                b.matrix = d;
            }
            delete c.animationCache;
        }
    }
};
THREE.KeyFrameAnimation.prototype.update = function(a) {
    if (this.isPlaying) {
        var b, c, d, e, f = this.data.JIT.hierarchy,
            g, h, j;
        h = this.currentTime = this.currentTime + a * this.timeScale;
        g = this.currentTime = this.currentTime % this.data.length;
        if (g < this.startTimeMs) g = this.currentTime = this.startTimeMs + g;
        e = parseInt(Math.min(g * this.data.fps, this.data.length * this.data.fps), 10);
        if ((j = g < h) && !this.loop) {
            for (var a = 0, l = this.hierarchy.length; a < l; a++) {
                var k = this.data.hierarchy[a].keys,
                    f = this.data.hierarchy[a].sids;
                d = k.length - 1;
                e =
                    this.hierarchy[a];
                if (k.length) {
                    for (k = 0; k < f.length; k++) {
                        g = f[k];
                        (h = this.getPrevKeyWith(g, a, d)) && h.apply(g);
                    }
                    this.data.hierarchy[a].node.updateMatrix();
                    e.matrixWorldNeedsUpdate = true;
                }
            }
            this.stop();
        } else if (!(g < this.startTime)) {
            a = 0;
            for (l = this.hierarchy.length; a < l; a++) {
                d = this.hierarchy[a];
                b = this.data.hierarchy[a];
                var k = b.keys,
                    p = b.animationCache;
                if (this.JITCompile && f[a][e] !== void 0)
                    if (d instanceof THREE.Bone) {
                        d.skinMatrix = f[a][e];
                        d.matrixWorldNeedsUpdate = false;
                    } else {
                        d.matrix = f[a][e];
                        d.matrixWorldNeedsUpdate =
                            true;
                    }
                else if (k.length) {
                    if (this.JITCompile && p) d instanceof THREE.Bone ? d.skinMatrix = p.originalMatrix : d.matrix = p.originalMatrix;
                    b = p.prevKey;
                    c = p.nextKey;
                    if (b && c) {
                        if (c.time <= h) {
                            if (j && this.loop) {
                                b = k[0];
                                for (c = k[1]; c.time < g;) {
                                    b = c;
                                    c = k[b.index + 1];
                                }
                            } else if (!j)
                                for (var m = k.length - 1; c.time < g && c.index !== m;) {
                                    b = c;
                                    c = k[b.index + 1];
                                }
                            p.prevKey = b;
                            p.nextKey = c;
                        }
                        c.time >= g ? b.interpolate(c, g) : b.interpolate(c, c.time);
                    }
                    this.data.hierarchy[a].node.updateMatrix();
                    d.matrixWorldNeedsUpdate = true;
                }
            }
            if (this.JITCompile && f[0][e] === void 0) {
                this.hierarchy[0].updateMatrixWorld(true);
                for (a = 0; a < this.hierarchy.length; a++) f[a][e] = this.hierarchy[a] instanceof THREE.Bone ? this.hierarchy[a].skinMatrix.clone() : this.hierarchy[a].matrix.clone();
            }
        }
    }
};
THREE.KeyFrameAnimation.prototype.getNextKeyWith = function(a, b, c) {
    b = this.data.hierarchy[b].keys;
    for (c = c % b.length; c < b.length; c++)
        if (b[c].hasTarget(a)) return b[c];
    return b[0]
};
THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function(a, b, c) {
    b = this.data.hierarchy[b].keys;
    for (c = c >= 0 ? c : c + b.length; c >= 0; c--)
        if (b[c].hasTarget(a)) return b[c];
    return b[b.length - 1]
};
THREE.CubeCamera = function(a, b, c) {
    THREE.Object3D.call(this);
    var d = new THREE.PerspectiveCamera(90, 1, a, b);
    d.up.set(0, -1, 0);
    d.lookAt(new THREE.Vector3(1, 0, 0));
    this.add(d);
    var e = new THREE.PerspectiveCamera(90, 1, a, b);
    e.up.set(0, -1, 0);
    e.lookAt(new THREE.Vector3(-1, 0, 0));
    this.add(e);
    var f = new THREE.PerspectiveCamera(90, 1, a, b);
    f.up.set(0, 0, 1);
    f.lookAt(new THREE.Vector3(0, 1, 0));
    this.add(f);
    var g = new THREE.PerspectiveCamera(90, 1, a, b);
    g.up.set(0, 0, -1);
    g.lookAt(new THREE.Vector3(0, -1, 0));
    this.add(g);
    var h = new THREE.PerspectiveCamera(90,
        1, a, b);
    h.up.set(0, -1, 0);
    h.lookAt(new THREE.Vector3(0, 0, 1));
    this.add(h);
    var j = new THREE.PerspectiveCamera(90, 1, a, b);
    j.up.set(0, -1, 0);
    j.lookAt(new THREE.Vector3(0, 0, -1));
    this.add(j);
    this.renderTarget = new THREE.WebGLRenderTargetCube(c, c, {
        format: THREE.RGBFormat,
        magFilter: THREE.LinearFilter,
        minFilter: THREE.LinearFilter
    });
    this.updateCubeMap = function(a, b) {
        var c = this.renderTarget,
            m = c.generateMipmaps;
        c.generateMipmaps = false;
        c.activeCubeFace = 0;
        a.render(b, d, c);
        c.activeCubeFace = 1;
        a.render(b, e, c);
        c.activeCubeFace =
            2;
        a.render(b, f, c);
        c.activeCubeFace = 3;
        a.render(b, g, c);
        c.activeCubeFace = 4;
        a.render(b, h, c);
        c.generateMipmaps = m;
        c.activeCubeFace = 5;
        a.render(b, j, c);
    };
};
THREE.CubeCamera.prototype = new THREE.Object3D;
THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;
THREE.CombinedCamera = function(a, b, c, d, e, f, g) {
    THREE.Camera.call(this);
    this.fov = c;
    this.left = -a / 2;
    this.right = a / 2;
    this.top = b / 2;
    this.bottom = -b / 2;
    this.cameraO = new THREE.OrthographicCamera(a / -2, a / 2, b / 2, b / -2, f, g);
    this.cameraP = new THREE.PerspectiveCamera(c, a / b, d, e);
    this.zoom = 1;
    this.toPerspective();
};
THREE.CombinedCamera.prototype = new THREE.Camera;
THREE.CombinedCamera.prototype.constructor = THREE.CombinedCamera;
THREE.CombinedCamera.prototype.toPerspective = function() {
    this.near = this.cameraP.near;
    this.far = this.cameraP.far;
    this.cameraP.fov = this.fov / this.zoom;
    this.cameraP.updateProjectionMatrix();
    this.projectionMatrix = this.cameraP.projectionMatrix;
    this.inPersepectiveMode = true;
    this.inOrthographicMode = false;
};
THREE.CombinedCamera.prototype.toOrthographic = function() {
    var a = this.cameraP.aspect,
        b = (this.cameraP.near + this.cameraP.far) / 2,
        b = Math.tan(this.fov / 2) * b,
        a = 2 * b * a / 2,
        b = b / this.zoom,
        a = a / this.zoom;
    this.cameraO.left = -a;
    this.cameraO.right = a;
    this.cameraO.top = b;
    this.cameraO.bottom = -b;
    this.cameraO.updateProjectionMatrix();
    this.near = this.cameraO.near;
    this.far = this.cameraO.far;
    this.projectionMatrix = this.cameraO.projectionMatrix;
    this.inPersepectiveMode = false;
    this.inOrthographicMode = true;
};
THREE.CombinedCamera.prototype.setSize = function(a, b) {
    this.cameraP.aspect = a / b;
    this.left = -a / 2;
    this.right = a / 2;
    this.top = b / 2;
    this.bottom = -b / 2;
};
THREE.CombinedCamera.prototype.setFov = function(a) {
    this.fov = a;
    this.inPersepectiveMode ? this.toPerspective() : this.toOrthographic();
};
THREE.CombinedCamera.prototype.updateProjectionMatrix = function() {
    if (this.inPersepectiveMode) this.toPerspective();
    else {
        this.toPerspective();
        this.toOrthographic();
    }
};
THREE.CombinedCamera.prototype.setLens = function(a, b) {
    var c = 2 * Math.atan((b !== void 0 ? b : 24) / (a * 2)) * (180 / Math.PI);
    this.setFov(c);
    return c
};
THREE.CombinedCamera.prototype.setZoom = function(a) {
    this.zoom = a;
    this.inPersepectiveMode ? this.toPerspective() : this.toOrthographic();
};
THREE.CombinedCamera.prototype.toFrontView = function() {
    this.rotation.x = 0;
    this.rotation.y = 0;
    this.rotation.z = 0;
    this.rotationAutoUpdate = false;
};
THREE.CombinedCamera.prototype.toBackView = function() {
    this.rotation.x = 0;
    this.rotation.y = Math.PI;
    this.rotation.z = 0;
    this.rotationAutoUpdate = false;
};
THREE.CombinedCamera.prototype.toLeftView = function() {
    this.rotation.x = 0;
    this.rotation.y = -Math.PI / 2;
    this.rotation.z = 0;
    this.rotationAutoUpdate = false;
};
THREE.CombinedCamera.prototype.toRightView = function() {
    this.rotation.x = 0;
    this.rotation.y = Math.PI / 2;
    this.rotation.z = 0;
    this.rotationAutoUpdate = false;
};
THREE.CombinedCamera.prototype.toTopView = function() {
    this.rotation.x = -Math.PI / 2;
    this.rotation.y = 0;
    this.rotation.z = 0;
    this.rotationAutoUpdate = false;
};
THREE.CombinedCamera.prototype.toBottomView = function() {
    this.rotation.x = Math.PI / 2;
    this.rotation.y = 0;
    this.rotation.z = 0;
    this.rotationAutoUpdate = false;
};
THREE.FirstPersonControls = function(a, b) {
    function c(a, b) {
        return function() {
            b.apply(a, arguments);
        }
    }
    this.object = a;
    this.target = new THREE.Vector3(0, 0, 0);
    this.domElement = b !== void 0 ? b : document;
    this.movementSpeed = 1;
    this.lookSpeed = 0.005;
    this.noFly = false;
    this.lookVertical = true;
    this.autoForward = false;
    this.activeLook = true;
    this.heightSpeed = false;
    this.heightCoef = 1;
    this.heightMin = 0;
    this.constrainVertical = false;
    this.verticalMin = 0;
    this.verticalMax = Math.PI;
    this.theta = this.phi = this.lon = this.lat = this.mouseY = this.mouseX =
        this.autoSpeedFactor = 0;
    this.mouseDragOn = this.freeze = this.moveRight = this.moveLeft = this.moveBackward = this.moveForward = false;
    if (this.domElement === document) {
        this.viewHalfX = window.innerWidth / 2;
        this.viewHalfY = window.innerHeight / 2;
    } else {
        this.viewHalfX = this.domElement.offsetWidth / 2;
        this.viewHalfY = this.domElement.offsetHeight / 2;
        this.domElement.setAttribute("tabindex", -1);
    }
    this.onMouseDown = function(a) {
        this.domElement !== document && this.domElement.focus();
        a.preventDefault();
        a.stopPropagation();
        if (this.activeLook) switch (a.button) {
            case 0:
                this.moveForward =
                    true;
                break;
            case 2:
                this.moveBackward = true;
        }
        this.mouseDragOn = true;
    };
    this.onMouseUp = function(a) {
        a.preventDefault();
        a.stopPropagation();
        if (this.activeLook) switch (a.button) {
            case 0:
                this.moveForward = false;
                break;
            case 2:
                this.moveBackward = false;
        }
        this.mouseDragOn = false;
    };
    this.onMouseMove = function(a) {
        if (this.domElement === document) {
            this.mouseX = a.pageX - this.viewHalfX;
            this.mouseY = a.pageY - this.viewHalfY;
        } else {
            this.mouseX = a.pageX - this.domElement.offsetLeft - this.viewHalfX;
            this.mouseY = a.pageY - this.domElement.offsetTop - this.viewHalfY;
        }
    };
    this.onKeyDown = function(a) {
        switch (a.keyCode) {
            case 38:
            case 87:
                this.moveForward = true;
                break;
            case 37:
            case 65:
                this.moveLeft = true;
                break;
            case 40:
            case 83:
                this.moveBackward = true;
                break;
            case 39:
            case 68:
                this.moveRight = true;
                break;
            case 82:
                this.moveUp = true;
                break;
            case 70:
                this.moveDown = true;
                break;
            case 81:
                this.freeze = !this.freeze;
        }
    };
    this.onKeyUp = function(a) {
        switch (a.keyCode) {
            case 38:
            case 87:
                this.moveForward = false;
                break;
            case 37:
            case 65:
                this.moveLeft = false;
                break;
            case 40:
            case 83:
                this.moveBackward = false;
                break;
            case 39:
            case 68:
                this.moveRight =
                    false;
                break;
            case 82:
                this.moveUp = false;
                break;
            case 70:
                this.moveDown = false;
        }
    };
    this.update = function(a) {
        var b = 0;
        if (!this.freeze) {
            if (this.heightSpeed) {
                b = THREE.Math.clamp(this.object.position.y, this.heightMin, this.heightMax) - this.heightMin;
                this.autoSpeedFactor = a * b * this.heightCoef;
            } else this.autoSpeedFactor = 0;
            b = a * this.movementSpeed;
            (this.moveForward || this.autoForward && !this.moveBackward) && this.object.translateZ(-(b + this.autoSpeedFactor));
            this.moveBackward && this.object.translateZ(b);
            this.moveLeft && this.object.translateX(-b);
            this.moveRight && this.object.translateX(b);
            this.moveUp && this.object.translateY(b);
            this.moveDown && this.object.translateY(-b);
            a = a * this.lookSpeed;
            this.activeLook || (a = 0);
            this.lon = this.lon + this.mouseX * a;
            if (this.lookVertical) this.lat = this.lat - this.mouseY * a;
            this.lat = Math.max(-85, Math.min(85, this.lat));
            this.phi = (90 - this.lat) * Math.PI / 180;
            this.theta = this.lon * Math.PI / 180;
            var b = this.target,
                c = this.object.position;
            b.x = c.x + 100 * Math.sin(this.phi) * Math.cos(this.theta);
            b.y = c.y + 100 * Math.cos(this.phi);
            b.z = c.z + 100 * Math.sin(this.phi) *
                Math.sin(this.theta);
            b = 1;
            this.constrainVertical && (b = Math.PI / (this.verticalMax - this.verticalMin));
            this.lon = this.lon + this.mouseX * a;
            if (this.lookVertical) this.lat = this.lat - this.mouseY * a * b;
            this.lat = Math.max(-85, Math.min(85, this.lat));
            this.phi = (90 - this.lat) * Math.PI / 180;
            this.theta = this.lon * Math.PI / 180;
            if (this.constrainVertical) this.phi = THREE.Math.mapLinear(this.phi, 0, Math.PI, this.verticalMin, this.verticalMax);
            b = this.target;
            c = this.object.position;
            b.x = c.x + 100 * Math.sin(this.phi) * Math.cos(this.theta);
            b.y = c.y +
                100 * Math.cos(this.phi);
            b.z = c.z + 100 * Math.sin(this.phi) * Math.sin(this.theta);
            this.object.lookAt(b);
        }
    };
    this.domElement.addEventListener("contextmenu", function(a) {
        a.preventDefault();
    }, false);
    this.domElement.addEventListener("mousemove", c(this, this.onMouseMove), false);
    this.domElement.addEventListener("mousedown", c(this, this.onMouseDown), false);
    this.domElement.addEventListener("mouseup", c(this, this.onMouseUp), false);
    this.domElement.addEventListener("keydown", c(this, this.onKeyDown), false);
    this.domElement.addEventListener("keyup",
        c(this, this.onKeyUp), false);
};
THREE.PathControls = function(a, b) {
    function c(a) {
        return (a = a * 2) < 1 ? 0.5 * a * a : -0.5 * (--a * (a - 2) - 1)
    }

    function d(a, b) {
        return function() {
            b.apply(a, arguments);
        }
    }

    function e(a, b, c, d) {
        var e = {
                name: c,
                fps: 0.6,
                length: d,
                hierarchy: []
            },
            f, g = b.getControlPointsArray(),
            h = b.getLength(),
            r = g.length,
            u = 0;
        f = r - 1;
        b = {
            parent: -1,
            keys: []
        };
        b.keys[0] = {
            time: 0,
            pos: g[0],
            rot: [0, 0, 0, 1],
            scl: [1, 1, 1]
        };
        b.keys[f] = {
            time: d,
            pos: g[f],
            rot: [0, 0, 0, 1],
            scl: [1, 1, 1]
        };
        for (f = 1; f < r - 1; f++) {
            u = d * h.chunks[f] / h.total;
            b.keys[f] = {
                time: u,
                pos: g[f]
            };
        }
        e.hierarchy[0] = b;
        THREE.AnimationHandler.add(e);
        return new THREE.Animation(a, c, THREE.AnimationHandler.CATMULLROM_FORWARD, false)
    }

    function f(a, b) {
        var c, d, e = new THREE.Geometry;
        for (c = 0; c < a.points.length * b; c++) {
            d = c / (a.points.length * b);
            d = a.getPoint(d);
            e.vertices[c] = new THREE.Vector3(d.x, d.y, d.z);
        }
        return e
    }
    this.object = a;
    this.domElement = b !== void 0 ? b : document;
    this.id = "PathControls" + THREE.PathControlsIdCounter++;
    this.duration = 1E4;
    this.waypoints = [];
    this.useConstantSpeed = true;
    this.resamplingCoef = 50;
    this.debugPath = new THREE.Object3D;
    this.debugDummy = new THREE.Object3D;
    this.animationParent = new THREE.Object3D;
    this.lookSpeed = 0.005;
    this.lookHorizontal = this.lookVertical = true;
    this.verticalAngleMap = {
        srcRange: [0, 2 * Math.PI],
        dstRange: [0, 2 * Math.PI]
    };
    this.horizontalAngleMap = {
        srcRange: [0, 2 * Math.PI],
        dstRange: [0, 2 * Math.PI]
    };
    this.target = new THREE.Object3D;
    this.theta = this.phi = this.lon = this.lat = this.mouseY = this.mouseX = 0;
    if (this.domElement === document) {
        this.viewHalfX = window.innerWidth / 2;
        this.viewHalfY = window.innerHeight / 2;
    } else {
        this.viewHalfX = this.domElement.offsetWidth / 2;
        this.viewHalfY =
            this.domElement.offsetHeight / 2;
        this.domElement.setAttribute("tabindex", -1);
    }
    var g = Math.PI * 2,
        h = Math.PI / 180;
    this.update = function(a) {
        var b;
        if (this.lookHorizontal) this.lon = this.lon + this.mouseX * this.lookSpeed * a;
        if (this.lookVertical) this.lat = this.lat - this.mouseY * this.lookSpeed * a;
        this.lon = Math.max(0, Math.min(360, this.lon));
        this.lat = Math.max(-85, Math.min(85, this.lat));
        this.phi = (90 - this.lat) * h;
        this.theta = this.lon * h;
        a = this.phi % g;
        this.phi = a >= 0 ? a : a + g;
        b = this.verticalAngleMap.srcRange;
        a = this.verticalAngleMap.dstRange;
        b = THREE.Math.mapLinear(this.phi, b[0], b[1], a[0], a[1]);
        var d = a[1] - a[0];
        this.phi = c((b - a[0]) / d) * d + a[0];
        b = this.horizontalAngleMap.srcRange;
        a = this.horizontalAngleMap.dstRange;
        b = THREE.Math.mapLinear(this.theta, b[0], b[1], a[0], a[1]);
        d = a[1] - a[0];
        this.theta = c((b - a[0]) / d) * d + a[0];
        a = this.target.position;
        a.x = 100 * Math.sin(this.phi) * Math.cos(this.theta);
        a.y = 100 * Math.cos(this.phi);
        a.z = 100 * Math.sin(this.phi) * Math.sin(this.theta);
        this.object.lookAt(this.target.position);
    };
    this.onMouseMove = function(a) {
        if (this.domElement ===
            document) {
            this.mouseX = a.pageX - this.viewHalfX;
            this.mouseY = a.pageY - this.viewHalfY;
        } else {
            this.mouseX = a.pageX - this.domElement.offsetLeft - this.viewHalfX;
            this.mouseY = a.pageY - this.domElement.offsetTop - this.viewHalfY;
        }
    };
    this.init = function() {
        this.spline = new THREE.Spline;
        this.spline.initFromArray(this.waypoints);
        this.useConstantSpeed && this.spline.reparametrizeByArcLength(this.resamplingCoef);
        if (this.createDebugDummy) {
            var a = new THREE.MeshLambertMaterial({
                    color: 30719
                }),
                b = new THREE.MeshLambertMaterial({
                    color: 65280
                }),
                c = new THREE.CubeGeometry(10, 10, 20),
                g = new THREE.CubeGeometry(2, 2, 10);
            this.animationParent = new THREE.Mesh(c, a);
            a = new THREE.Mesh(g, b);
            a.position.set(0, 10, 0);
            this.animation = e(this.animationParent, this.spline, this.id, this.duration);
            this.animationParent.add(this.object);
            this.animationParent.add(this.target);
            this.animationParent.add(a);
        } else {
            this.animation = e(this.animationParent, this.spline, this.id, this.duration);
            this.animationParent.add(this.target);
            this.animationParent.add(this.object);
        }
        if (this.createDebugPath) {
            var a =
                this.debugPath,
                b = this.spline,
                g = f(b, 10),
                c = f(b, 10),
                h = new THREE.LineBasicMaterial({
                    color: 16711680,
                    linewidth: 3
                }),
                g = new THREE.Line(g, h),
                c = new THREE.ParticleSystem(c, new THREE.ParticleBasicMaterial({
                    color: 16755200,
                    size: 3
                }));
            g.scale.set(1, 1, 1);
            a.add(g);
            c.scale.set(1, 1, 1);
            a.add(c);
            for (var g = new THREE.SphereGeometry(1, 16, 8), h = new THREE.MeshBasicMaterial({
                    color: 65280
                }), o = 0; o < b.points.length; o++) {
                c = new THREE.Mesh(g, h);
                c.position.copy(b.points[o]);
                a.add(c);
            }
        }
        this.domElement.addEventListener("mousemove", d(this,
            this.onMouseMove), false);
    };
};
THREE.PathControlsIdCounter = 0;
THREE.FlyControls = function(a, b) {
    function c(a, b) {
        return function() {
            b.apply(a, arguments);
        }
    }
    this.object = a;
    this.domElement = b !== void 0 ? b : document;
    b && this.domElement.setAttribute("tabindex", -1);
    this.movementSpeed = 1;
    this.rollSpeed = 0.005;
    this.autoForward = this.dragToLook = false;
    this.object.useQuaternion = true;
    this.tmpQuaternion = new THREE.Quaternion;
    this.mouseStatus = 0;
    this.moveState = {
        up: 0,
        down: 0,
        left: 0,
        right: 0,
        forward: 0,
        back: 0,
        pitchUp: 0,
        pitchDown: 0,
        yawLeft: 0,
        yawRight: 0,
        rollLeft: 0,
        rollRight: 0
    };
    this.moveVector =
        new THREE.Vector3(0, 0, 0);
    this.rotationVector = new THREE.Vector3(0, 0, 0);
    this.handleEvent = function(a) {
        if (typeof this[a.type] == "function") this[a.type](a);
    };
    this.keydown = function(a) {
        if (!a.altKey) {
            switch (a.keyCode) {
                case 16:
                    this.movementSpeedMultiplier = 0.1;
                    break;
                case 87:
                    this.moveState.forward = 1;
                    break;
                case 83:
                    this.moveState.back = 1;
                    break;
                case 65:
                    this.moveState.left = 1;
                    break;
                case 68:
                    this.moveState.right = 1;
                    break;
                case 82:
                    this.moveState.up = 1;
                    break;
                case 70:
                    this.moveState.down = 1;
                    break;
                case 38:
                    this.moveState.pitchUp =
                        1;
                    break;
                case 40:
                    this.moveState.pitchDown = 1;
                    break;
                case 37:
                    this.moveState.yawLeft = 1;
                    break;
                case 39:
                    this.moveState.yawRight = 1;
                    break;
                case 81:
                    this.moveState.rollLeft = 1;
                    break;
                case 69:
                    this.moveState.rollRight = 1;
            }
            this.updateMovementVector();
            this.updateRotationVector();
        }
    };
    this.keyup = function(a) {
        switch (a.keyCode) {
            case 16:
                this.movementSpeedMultiplier = 1;
                break;
            case 87:
                this.moveState.forward = 0;
                break;
            case 83:
                this.moveState.back = 0;
                break;
            case 65:
                this.moveState.left = 0;
                break;
            case 68:
                this.moveState.right = 0;
                break;
            case 82:
                this.moveState.up =
                    0;
                break;
            case 70:
                this.moveState.down = 0;
                break;
            case 38:
                this.moveState.pitchUp = 0;
                break;
            case 40:
                this.moveState.pitchDown = 0;
                break;
            case 37:
                this.moveState.yawLeft = 0;
                break;
            case 39:
                this.moveState.yawRight = 0;
                break;
            case 81:
                this.moveState.rollLeft = 0;
                break;
            case 69:
                this.moveState.rollRight = 0;
        }
        this.updateMovementVector();
        this.updateRotationVector();
    };
    this.mousedown = function(a) {
        this.domElement !== document && this.domElement.focus();
        a.preventDefault();
        a.stopPropagation();
        if (this.dragToLook) this.mouseStatus++;
        else switch (a.button) {
            case 0:
                this.object.moveForward =
                    true;
                break;
            case 2:
                this.object.moveBackward = true;
        }
    };
    this.mousemove = function(a) {
        if (!this.dragToLook || this.mouseStatus > 0) {
            var b = this.getContainerDimensions(),
                c = b.size[0] / 2,
                g = b.size[1] / 2;
            this.moveState.yawLeft = -(a.pageX - b.offset[0] - c) / c;
            this.moveState.pitchDown = (a.pageY - b.offset[1] - g) / g;
            this.updateRotationVector();
        }
    };
    this.mouseup = function(a) {
        a.preventDefault();
        a.stopPropagation();
        if (this.dragToLook) {
            this.mouseStatus--;
            this.moveState.yawLeft = this.moveState.pitchDown = 0;
        } else switch (a.button) {
            case 0:
                this.moveForward =
                    false;
                break;
            case 2:
                this.moveBackward = false;
        }
        this.updateRotationVector();
    };
    this.update = function(a) {
        var b = a * this.movementSpeed,
            a = a * this.rollSpeed;
        this.object.translateX(this.moveVector.x * b);
        this.object.translateY(this.moveVector.y * b);
        this.object.translateZ(this.moveVector.z * b);
        this.tmpQuaternion.set(this.rotationVector.x * a, this.rotationVector.y * a, this.rotationVector.z * a, 1).normalize();
        this.object.quaternion.multiplySelf(this.tmpQuaternion);
        this.object.matrix.setPosition(this.object.position);
        this.object.matrix.setRotationFromQuaternion(this.object.quaternion);
        this.object.matrixWorldNeedsUpdate = true;
    };
    this.updateMovementVector = function() {
        var a = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0;
        this.moveVector.x = -this.moveState.left + this.moveState.right;
        this.moveVector.y = -this.moveState.down + this.moveState.up;
        this.moveVector.z = -a + this.moveState.back;
    };
    this.updateRotationVector = function() {
        this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp;
        this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft;
        this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft;
    };
    this.getContainerDimensions = function() {
        return this.domElement != document ? {
            size: [this.domElement.offsetWidth, this.domElement.offsetHeight],
            offset: [this.domElement.offsetLeft, this.domElement.offsetTop]
        } : {
            size: [window.innerWidth, window.innerHeight],
            offset: [0, 0]
        }
    };
    this.domElement.addEventListener("mousemove", c(this, this.mousemove), false);
    this.domElement.addEventListener("mousedown", c(this, this.mousedown), false);
    this.domElement.addEventListener("mouseup",
        c(this, this.mouseup), false);
    this.domElement.addEventListener("keydown", c(this, this.keydown), false);
    this.domElement.addEventListener("keyup", c(this, this.keyup), false);
    this.updateMovementVector();
    this.updateRotationVector();
};
THREE.RollControls = function(a, b) {
    this.object = a;
    this.domElement = b !== void 0 ? b : document;
    this.mouseLook = true;
    this.autoForward = false;
    this.rollSpeed = this.movementSpeed = this.lookSpeed = 1;
    this.constrainVertical = [-0.9, 0.9];
    this.object.matrixAutoUpdate = false;
    this.forward = new THREE.Vector3(0, 0, 1);
    this.roll = 0;
    var c = new THREE.Vector3,
        d = new THREE.Vector3,
        e = new THREE.Vector3,
        f = new THREE.Matrix4,
        g = false,
        h = 1,
        j = 0,
        l = 0,
        k = 0,
        p = 0,
        m = 0,
        o = window.innerWidth / 2,
        q = window.innerHeight / 2;
    this.update = function(a) {
        if (this.mouseLook) {
            var b =
                a * this.lookSpeed;
            this.rotateHorizontally(b * p);
            this.rotateVertically(b * m);
        }
        b = a * this.movementSpeed;
        this.object.translateZ(-b * (j > 0 || this.autoForward && !(j < 0) ? 1 : j));
        this.object.translateX(b * l);
        this.object.translateY(b * k);
        if (g) this.roll = this.roll + this.rollSpeed * a * h;
        if (this.forward.y > this.constrainVertical[1]) {
            this.forward.y = this.constrainVertical[1];
            this.forward.normalize();
        } else if (this.forward.y < this.constrainVertical[0]) {
            this.forward.y = this.constrainVertical[0];
            this.forward.normalize();
        }
        e.copy(this.forward);
        d.set(0, 1, 0);
        c.cross(d, e).normalize();
        d.cross(e, c).normalize();
        this.object.matrix.elements[0] = c.x;
        this.object.matrix.elements[4] = d.x;
        this.object.matrix.elements[8] = e.x;
        this.object.matrix.elements[1] = c.y;
        this.object.matrix.elements[5] = d.y;
        this.object.matrix.elements[9] = e.y;
        this.object.matrix.elements[2] = c.z;
        this.object.matrix.elements[6] = d.z;
        this.object.matrix.elements[10] = e.z;
        f.identity();
        f.elements[0] = Math.cos(this.roll);
        f.elements[4] = -Math.sin(this.roll);
        f.elements[1] = Math.sin(this.roll);
        f.elements[5] =
            Math.cos(this.roll);
        this.object.matrix.multiplySelf(f);
        this.object.matrixWorldNeedsUpdate = true;
        this.object.matrix.elements[12] = this.object.position.x;
        this.object.matrix.elements[13] = this.object.position.y;
        this.object.matrix.elements[14] = this.object.position.z;
    };
    this.translateX = function(a) {
        this.object.position.x = this.object.position.x + this.object.matrix.elements[0] * a;
        this.object.position.y = this.object.position.y + this.object.matrix.elements[1] * a;
        this.object.position.z = this.object.position.z + this.object.matrix.elements[2] *
            a;
    };
    this.translateY = function(a) {
        this.object.position.x = this.object.position.x + this.object.matrix.elements[4] * a;
        this.object.position.y = this.object.position.y + this.object.matrix.elements[5] * a;
        this.object.position.z = this.object.position.z + this.object.matrix.elements[6] * a;
    };
    this.translateZ = function(a) {
        this.object.position.x = this.object.position.x - this.object.matrix.elements[8] * a;
        this.object.position.y = this.object.position.y - this.object.matrix.elements[9] * a;
        this.object.position.z = this.object.position.z -
            this.object.matrix.elements[10] * a;
    };
    this.rotateHorizontally = function(a) {
        c.set(this.object.matrix.elements[0], this.object.matrix.elements[1], this.object.matrix.elements[2]);
        c.multiplyScalar(a);
        this.forward.subSelf(c);
        this.forward.normalize();
    };
    this.rotateVertically = function(a) {
        d.set(this.object.matrix.elements[4], this.object.matrix.elements[5], this.object.matrix.elements[6]);
        d.multiplyScalar(a);
        this.forward.addSelf(d);
        this.forward.normalize();
    };
    this.domElement.addEventListener("contextmenu", function(a) {
            a.preventDefault();
        },
        false);
    this.domElement.addEventListener("mousemove", function(a) {
        p = (a.clientX - o) / window.innerWidth;
        m = (a.clientY - q) / window.innerHeight;
    }, false);
    this.domElement.addEventListener("mousedown", function(a) {
        a.preventDefault();
        a.stopPropagation();
        switch (a.button) {
            case 0:
                j = 1;
                break;
            case 2:
                j = -1;
        }
    }, false);
    this.domElement.addEventListener("mouseup", function(a) {
        a.preventDefault();
        a.stopPropagation();
        switch (a.button) {
            case 0:
                j = 0;
                break;
            case 2:
                j = 0;
        }
    }, false);
    this.domElement.addEventListener("keydown", function(a) {
        switch (a.keyCode) {
            case 38:
            case 87:
                j =
                    1;
                break;
            case 37:
            case 65:
                l = -1;
                break;
            case 40:
            case 83:
                j = -1;
                break;
            case 39:
            case 68:
                l = 1;
                break;
            case 81:
                g = true;
                h = 1;
                break;
            case 69:
                g = true;
                h = -1;
                break;
            case 82:
                k = 1;
                break;
            case 70:
                k = -1;
        }
    }, false);
    this.domElement.addEventListener("keyup", function(a) {
        switch (a.keyCode) {
            case 38:
            case 87:
                j = 0;
                break;
            case 37:
            case 65:
                l = 0;
                break;
            case 40:
            case 83:
                j = 0;
                break;
            case 39:
            case 68:
                l = 0;
                break;
            case 81:
                g = false;
                break;
            case 69:
                g = false;
                break;
            case 82:
                k = 0;
                break;
            case 70:
                k = 0;
        }
    }, false);
};
THREE.TrackballControls = function(a, b) {
    THREE.EventTarget.call(this);
    var c = this;
    this.object = a;
    this.domElement = b !== void 0 ? b : document;
    this.enabled = true;
    this.screen = {
        width: window.innerWidth,
        height: window.innerHeight,
        offsetLeft: 0,
        offsetTop: 0
    };
    this.radius = (this.screen.width + this.screen.height) / 4;
    this.rotateSpeed = 1;
    this.zoomSpeed = 1.2;
    this.panSpeed = 0.3;
    this.staticMoving = this.noPan = this.noZoom = this.noRotate = false;
    this.dynamicDampingFactor = 0.2;
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.keys = [65, 83, 68];
    this.target = new THREE.Vector3;
    var d = new THREE.Vector3,
        e = false,
        f = -1,
        g = new THREE.Vector3,
        h = new THREE.Vector3,
        j = new THREE.Vector3,
        l = new THREE.Vector2,
        k = new THREE.Vector2,
        p = new THREE.Vector2,
        m = new THREE.Vector2,
        o = {
            type: "change"
        };
    this.handleEvent = function(a) {
        if (typeof this[a.type] == "function") this[a.type](a);
    };
    this.getMouseOnScreen = function(a, b) {
        return new THREE.Vector2((a - c.screen.offsetLeft) / c.radius * 0.5, (b - c.screen.offsetTop) / c.radius * 0.5)
    };
    this.getMouseProjectionOnBall = function(a, b) {
        var d = new THREE.Vector3((a -
                c.screen.width * 0.5 - c.screen.offsetLeft) / c.radius, (c.screen.height * 0.5 + c.screen.offsetTop - b) / c.radius, 0),
            e = d.length();
        e > 1 ? d.normalize() : d.z = Math.sqrt(1 - e * e);
        g.copy(c.object.position).subSelf(c.target);
        e = c.object.up.clone().setLength(d.y);
        e.addSelf(c.object.up.clone().crossSelf(g).setLength(d.x));
        e.addSelf(g.setLength(d.z));
        return e
    };
    this.rotateCamera = function() {
        var a = Math.acos(h.dot(j) / h.length() / j.length());
        if (a) {
            var b = (new THREE.Vector3).cross(h, j).normalize(),
                d = new THREE.Quaternion,
                a = a * c.rotateSpeed;
            d.setFromAxisAngle(b, -a);
            d.multiplyVector3(g);
            d.multiplyVector3(c.object.up);
            d.multiplyVector3(j);
            if (c.staticMoving) h = j;
            else {
                d.setFromAxisAngle(b, a * (c.dynamicDampingFactor - 1));
                d.multiplyVector3(h);
            }
        }
    };
    this.zoomCamera = function() {
        var a = 1 + (k.y - l.y) * c.zoomSpeed;
        if (a !== 1 && a > 0) {
            g.multiplyScalar(a);
            c.staticMoving ? l = k : l.y = l.y + (k.y - l.y) * this.dynamicDampingFactor;
        }
    };
    this.panCamera = function() {
        var a = m.clone().subSelf(p);
        if (a.lengthSq()) {
            a.multiplyScalar(g.length() * c.panSpeed);
            var b = g.clone().crossSelf(c.object.up).setLength(a.x);
            b.addSelf(c.object.up.clone().setLength(a.y));
            c.object.position.addSelf(b);
            c.target.addSelf(b);
            c.staticMoving ? p = m : p.addSelf(a.sub(m, p).multiplyScalar(c.dynamicDampingFactor));
        }
    };
    this.checkDistances = function() {
        if (!c.noZoom || !c.noPan) {
            c.object.position.lengthSq() > c.maxDistance * c.maxDistance && c.object.position.setLength(c.maxDistance);
            g.lengthSq() < c.minDistance * c.minDistance && c.object.position.add(c.target, g.setLength(c.minDistance));
        }
    };
    this.update = function() {
        g.copy(c.object.position).subSelf(c.target);
        c.noRotate || c.rotateCamera();
        c.noZoom || c.zoomCamera();
        c.noPan || c.panCamera();
        c.object.position.add(c.target, g);
        c.checkDistances();
        c.object.lookAt(c.target);
        if (d.distanceTo(c.object.position) > 0) {
            c.dispatchEvent(o);
            d.copy(c.object.position);
        }
    };
    this.domElement.addEventListener("contextmenu", function(a) {
        a.preventDefault();
    }, false);
    this.domElement.addEventListener("mousemove", function(a) {
        if (c.enabled) {
            if (e) {
                h = j = c.getMouseProjectionOnBall(a.clientX, a.clientY);
                l = k = c.getMouseOnScreen(a.clientX, a.clientY);
                p =
                    m = c.getMouseOnScreen(a.clientX, a.clientY);
                e = false;
            }
            f !== -1 && (f === 0 && !c.noRotate ? j = c.getMouseProjectionOnBall(a.clientX, a.clientY) : f === 1 && !c.noZoom ? k = c.getMouseOnScreen(a.clientX, a.clientY) : f === 2 && !c.noPan && (m = c.getMouseOnScreen(a.clientX, a.clientY)));
        }
    }, false);
    this.domElement.addEventListener("mousedown", function(a) {
        if (c.enabled) {
            a.preventDefault();
            a.stopPropagation();
            if (f === -1) {
                f = a.button;
                f === 0 && !c.noRotate ? h = j = c.getMouseProjectionOnBall(a.clientX, a.clientY) : f === 1 && !c.noZoom ? l = k = c.getMouseOnScreen(a.clientX,
                    a.clientY) : this.noPan || (p = m = c.getMouseOnScreen(a.clientX, a.clientY));
            }
        }
    }, false);
    this.domElement.addEventListener("mouseup", function(a) {
        if (c.enabled) {
            a.preventDefault();
            a.stopPropagation();
            f = -1;
        }
    }, false);
    window.addEventListener("keydown", function(a) {
        if (c.enabled && f === -1) {
            a.keyCode === c.keys[0] && !c.noRotate ? f = 0 : a.keyCode === c.keys[1] && !c.noZoom ? f = 1 : a.keyCode === c.keys[2] && !c.noPan && (f = 2);
            f !== -1 && (e = true);
        }
    }, false);
    window.addEventListener("keyup", function() {
        c.enabled && f !== -1 && (f = -1);
    }, false);
};
THREE.CubeGeometry = function(a, b, c, d, e, f, g, h) {
    function j(a, b, c, g, h, j, k, m) {
        var n, p = d || 1,
            o = e || 1,
            q = h / 2,
            r = j / 2,
            t = l.vertices.length;
        if (a === "x" && b === "y" || a === "y" && b === "x") n = "z";
        else if (a === "x" && b === "z" || a === "z" && b === "x") {
            n = "y";
            o = f || 1;
        } else if (a === "z" && b === "y" || a === "y" && b === "z") {
            n = "x";
            p = f || 1;
        }
        var i = p + 1,
            u = o + 1,
            y = h / p,
            C = j / o,
            Y = new THREE.Vector3;
        Y[n] = k > 0 ? 1 : -1;
        for (h = 0; h < u; h++)
            for (j = 0; j < i; j++) {
                var F = new THREE.Vector3;
                F[a] = (j * y - q) * c;
                F[b] = (h * C - r) * g;
                F[n] = k;
                l.vertices.push(F);
            }
        for (h = 0; h < o; h++)
            for (j = 0; j < p; j++) {
                a = new THREE.Face4(j +
                    i * h + t, j + i * (h + 1) + t, j + 1 + i * (h + 1) + t, j + 1 + i * h + t);
                a.normal.copy(Y);
                a.vertexNormals.push(Y.clone(), Y.clone(), Y.clone(), Y.clone());
                a.materialIndex = m;
                l.faces.push(a);
                l.faceVertexUvs[0].push([new THREE.UV(j / p, h / o), new THREE.UV(j / p, (h + 1) / o), new THREE.UV((j + 1) / p, (h + 1) / o), new THREE.UV((j + 1) / p, h / o)]);
            }
    }
    THREE.Geometry.call(this);
    var l = this,
        k = a / 2,
        p = b / 2,
        m = c / 2,
        o, q, n, r, u, t;
    if (g !== void 0) {
        if (g instanceof Array) this.materials = g;
        else {
            this.materials = [];
            for (o = 0; o < 6; o++) this.materials.push(g);
        }
        o = 0;
        r = 1;
        q = 2;
        u = 3;
        n = 4;
        t = 5;
    } else this.materials = [];
    this.sides = {
        px: true,
        nx: true,
        py: true,
        ny: true,
        pz: true,
        nz: true
    };
    if (h != void 0)
        for (var y in h) this.sides[y] !== void 0 && (this.sides[y] = h[y]);
    this.sides.px && j("z", "y", -1, -1, c, b, k, o);
    this.sides.nx && j("z", "y", 1, -1, c, b, -k, r);
    this.sides.py && j("x", "z", 1, 1, a, c, p, q);
    this.sides.ny && j("x", "z", 1, -1, a, c, -p, u);
    this.sides.pz && j("x", "y", 1, -1, a, b, m, n);
    this.sides.nz && j("x", "y", -1, -1, a, b, -m, t);
    this.computeCentroids();
    this.mergeVertices();
};
THREE.CubeGeometry.prototype = new THREE.Geometry;
THREE.CubeGeometry.prototype.constructor = THREE.CubeGeometry;
THREE.CylinderGeometry = function(a, b, c, d, e, f) {
    THREE.Geometry.call(this);
    var a = a !== void 0 ? a : 20,
        b = b !== void 0 ? b : 20,
        c = c !== void 0 ? c : 100,
        g = c / 2,
        d = d || 8,
        e = e || 1,
        h, j, l = [],
        k = [];
    for (j = 0; j <= e; j++) {
        var p = [],
            m = [],
            o = j / e,
            q = o * (b - a) + a;
        for (h = 0; h <= d; h++) {
            var n = h / d,
                r = new THREE.Vector3;
            r.x = q * Math.sin(n * Math.PI * 2);
            r.y = -o * c + g;
            r.z = q * Math.cos(n * Math.PI * 2);
            this.vertices.push(r);
            p.push(this.vertices.length - 1);
            m.push(new THREE.UV(n, o));
        }
        l.push(p);
        k.push(m);
    }
    c = (b - a) / c;
    for (h = 0; h < d; h++) {
        if (a !== 0) {
            p = this.vertices[l[0][h]].clone();
            m = this.vertices[l[0][h +
                1
            ]].clone();
        } else {
            p = this.vertices[l[1][h]].clone();
            m = this.vertices[l[1][h + 1]].clone();
        }
        p.setY(Math.sqrt(p.x * p.x + p.z * p.z) * c).normalize();
        m.setY(Math.sqrt(m.x * m.x + m.z * m.z) * c).normalize();
        for (j = 0; j < e; j++) {
            var o = l[j][h],
                q = l[j + 1][h],
                n = l[j + 1][h + 1],
                r = l[j][h + 1],
                u = p.clone(),
                t = p.clone(),
                y = m.clone(),
                s = m.clone(),
                w = k[j][h].clone(),
                H = k[j + 1][h].clone(),
                E = k[j + 1][h + 1].clone(),
                z = k[j][h + 1].clone();
            this.faces.push(new THREE.Face4(o, q, n, r, [u, t, y, s]));
            this.faceVertexUvs[0].push([w, H, E, z]);
        }
    }
    if (!f && a > 0) {
        this.vertices.push(new THREE.Vector3(0,
            g, 0));
        for (h = 0; h < d; h++) {
            o = l[0][h];
            q = l[0][h + 1];
            n = this.vertices.length - 1;
            u = new THREE.Vector3(0, 1, 0);
            t = new THREE.Vector3(0, 1, 0);
            y = new THREE.Vector3(0, 1, 0);
            w = k[0][h].clone();
            H = k[0][h + 1].clone();
            E = new THREE.UV(H.u, 0);
            this.faces.push(new THREE.Face3(o, q, n, [u, t, y]));
            this.faceVertexUvs[0].push([w, H, E]);
        }
    }
    if (!f && b > 0) {
        this.vertices.push(new THREE.Vector3(0, -g, 0));
        for (h = 0; h < d; h++) {
            o = l[j][h + 1];
            q = l[j][h];
            n = this.vertices.length - 1;
            u = new THREE.Vector3(0, -1, 0);
            t = new THREE.Vector3(0, -1, 0);
            y = new THREE.Vector3(0, -1, 0);
            w = k[j][h + 1].clone();
            H = k[j][h].clone();
            E = new THREE.UV(H.u, 1);
            this.faces.push(new THREE.Face3(o, q, n, [u, t, y]));
            this.faceVertexUvs[0].push([w, H, E]);
        }
    }
    this.computeCentroids();
    this.computeFaceNormals();
};
THREE.CylinderGeometry.prototype = new THREE.Geometry;
THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;
THREE.ExtrudeGeometry = function(a, b) {
    if (typeof a !== "undefined") {
        THREE.Geometry.call(this);
        a = a instanceof Array ? a : [a];
        this.shapebb = a[a.length - 1].getBoundingBox();
        this.addShapeList(a, b);
        this.computeCentroids();
        this.computeFaceNormals();
    }
};
THREE.ExtrudeGeometry.prototype = new THREE.Geometry;
THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;
THREE.ExtrudeGeometry.prototype.addShapeList = function(a, b) {
    for (var c = a.length, d = 0; d < c; d++) this.addShape(a[d], b);
};
THREE.ExtrudeGeometry.prototype.addShape = function(a, b) {
    function c(a, b, c) {
        b || console.log("die");
        return b.clone().multiplyScalar(c).addSelf(a)
    }

    function d(a, b, c) {
        var d = THREE.ExtrudeGeometry.__v1,
            e = THREE.ExtrudeGeometry.__v2,
            f = THREE.ExtrudeGeometry.__v3,
            g = THREE.ExtrudeGeometry.__v4,
            h = THREE.ExtrudeGeometry.__v5,
            i = THREE.ExtrudeGeometry.__v6;
        d.set(a.x - b.x, a.y - b.y);
        e.set(a.x - c.x, a.y - c.y);
        d = d.normalize();
        e = e.normalize();
        f.set(-d.y, d.x);
        g.set(e.y, -e.x);
        h.copy(a).addSelf(f);
        i.copy(a).addSelf(g);
        if (h.equals(i)) return g.clone();
        h.copy(b).addSelf(f);
        i.copy(c).addSelf(g);
        f = d.dot(g);
        g = i.subSelf(h).dot(g);
        if (f === 0) {
            console.log("Either infinite or no solutions!");
            g === 0 ? console.log("Its finite solutions.") : console.log("Too bad, no solutions.");
        }
        g = g / f;
        if (g < 0) {
            b = Math.atan2(b.y - a.y, b.x - a.x);
            a = Math.atan2(c.y - a.y, c.x - a.x);
            b > a && (a = a + Math.PI * 2);
            c = (b + a) / 2;
            a = -Math.cos(c);
            c = -Math.sin(c);
            return new THREE.Vector2(a, c)
        }
        return d.multiplyScalar(g).addSelf(h).subSelf(a).clone()
    }

    function e(c, d) {
        var e, f;
        for (F = c.length; --F >= 0;) {
            e = F;
            f = F - 1;
            f < 0 && (f =
                c.length - 1);
            for (var g = 0, h = m + k * 2, g = 0; g < h; g++) {
                var i = U * g,
                    j = U * (g + 1),
                    l = d + e + i,
                    i = d + f + i,
                    n = d + f + j,
                    j = d + e + j,
                    p = c,
                    o = g,
                    q = h,
                    l = l + J,
                    i = i + J,
                    n = n + J,
                    j = j + J;
                A.faces.push(new THREE.Face4(l, i, n, j, null, null, t));
                l = O.generateSideWallUV(A, a, p, b, l, i, n, j, o, q);
                A.faceVertexUvs[0].push(l);
            }
        }
    }

    function f(a, b, c) {
        A.vertices.push(new THREE.Vector3(a, b, c));
    }

    function g(c, d, e, f) {
        c = c + J;
        d = d + J;
        e = e + J;
        A.faces.push(new THREE.Face3(c, d, e, null, null, u));
        c = f ? O.generateBottomUV(A, a, b, c, d, e) : O.generateTopUV(A, a, b, c, d, e);
        A.faceVertexUvs[0].push(c);
    }
    var h =
        b.amount !== void 0 ? b.amount : 100,
        j = b.bevelThickness !== void 0 ? b.bevelThickness : 6,
        l = b.bevelSize !== void 0 ? b.bevelSize : j - 2,
        k = b.bevelSegments !== void 0 ? b.bevelSegments : 3,
        p = b.bevelEnabled !== void 0 ? b.bevelEnabled : true,
        m = b.steps !== void 0 ? b.steps : 1,
        o = b.bendPath,
        q = b.extrudePath,
        n, r = false,
        u = b.material,
        t = b.extrudeMaterial,
        y, s, w, H;
    if (q) {
        n = q.getSpacedPoints(m);
        r = true;
        p = false;
        y = new THREE.TubeGeometry.FrenetFrames(q, m, false);
        s = new THREE.Vector3;
        w = new THREE.Vector3;
        H = new THREE.Vector3;
    }
    if (!p) l = j = k = 0;
    var E, z, v, A = this,
        J = this.vertices.length;
    o && a.addWrapPath(o);
    var q = a.extractPoints(),
        o = q.shape,
        K = q.holes;
    if (q = !THREE.Shape.Utils.isClockWise(o)) {
        o = o.reverse();
        z = 0;
        for (v = K.length; z < v; z++) {
            E = K[z];
            THREE.Shape.Utils.isClockWise(E) && (K[z] = E.reverse());
        }
        q = false;
    }
    var R = THREE.Shape.Utils.triangulateShape(o, K),
        P = o;
    z = 0;
    for (v = K.length; z < v; z++) {
        E = K[z];
        o = o.concat(E);
    }
    var D, M, G, i, T, U = o.length,
        C, Y = R.length,
        q = [],
        F = 0;
    G = P.length;
    D = G - 1;
    for (M = F + 1; F < G; F++, D++, M++) {
        D === G && (D = 0);
        M === G && (M = 0);
        q[F] = d(P[F], P[D], P[M]);
    }
    var ea = [],
        fa, ia = q.concat();
    z = 0;
    for (v = K.length; z < v; z++) {
        E = K[z];
        fa = [];
        F = 0;
        G = E.length;
        D = G - 1;
        for (M = F + 1; F < G; F++, D++, M++) {
            D === G && (D = 0);
            M === G && (M = 0);
            fa[F] = d(E[F], E[D], E[M]);
        }
        ea.push(fa);
        ia = ia.concat(fa);
    }
    for (D = 0; D < k; D++) {
        G = D / k;
        i = j * (1 - G);
        M = l * Math.sin(G * Math.PI / 2);
        F = 0;
        for (G = P.length; F < G; F++) {
            T = c(P[F], q[F], M);
            f(T.x, T.y, -i);
        }
        z = 0;
        for (v = K.length; z < v; z++) {
            E = K[z];
            fa = ea[z];
            F = 0;
            for (G = E.length; F < G; F++) {
                T = c(E[F], fa[F], M);
                f(T.x, T.y, -i);
            }
        }
    }
    M = l;
    for (F = 0; F < U; F++) {
        T = p ? c(o[F], ia[F], M) : o[F];
        if (r) {
            w.copy(y.normals[0]).multiplyScalar(T.x);
            s.copy(y.binormals[0]).multiplyScalar(T.y);
            H.copy(n[0]).addSelf(w).addSelf(s);
            f(H.x, H.y, H.z);
        } else f(T.x, T.y, 0);
    }
    for (G = 1; G <= m; G++)
        for (F = 0; F < U; F++) {
            T = p ? c(o[F], ia[F], M) : o[F];
            if (r) {
                w.copy(y.normals[G]).multiplyScalar(T.x);
                s.copy(y.binormals[G]).multiplyScalar(T.y);
                H.copy(n[G]).addSelf(w).addSelf(s);
                f(H.x, H.y, H.z);
            } else f(T.x, T.y, h / m * G);
        }
    for (D = k - 1; D >= 0; D--) {
        G = D / k;
        i = j * (1 - G);
        M = l * Math.sin(G * Math.PI / 2);
        F = 0;
        for (G = P.length; F < G; F++) {
            T = c(P[F], q[F], M);
            f(T.x, T.y, h + i);
        }
        z = 0;
        for (v = K.length; z < v; z++) {
            E = K[z];
            fa = ea[z];
            F = 0;
            for (G = E.length; F < G; F++) {
                T = c(E[F], fa[F], M);
                r ? f(T.x, T.y + n[m - 1].y, n[m - 1].x + i) : f(T.x, T.y, h + i);
            }
        }
    }
    var O = THREE.ExtrudeGeometry.WorldUVGenerator;
    (function() {
        if (p) {
            var a;
            a = U * 0;
            for (F = 0; F < Y; F++) {
                C = R[F];
                g(C[2] + a, C[1] + a, C[0] + a, true);
            }
            a = m + k * 2;
            a = U * a;
            for (F = 0; F < Y; F++) {
                C = R[F];
                g(C[0] + a, C[1] + a, C[2] + a, false);
            }
        } else {
            for (F = 0; F < Y; F++) {
                C = R[F];
                g(C[2], C[1], C[0], true);
            }
            for (F = 0; F < Y; F++) {
                C = R[F];
                g(C[0] + U * m, C[1] + U * m, C[2] + U * m, false);
            }
        }
    })();
    (function() {
        var a = 0;
        e(P, a);
        a = a + P.length;
        z = 0;
        for (v = K.length; z < v; z++) {
            E = K[z];
            e(E, a);
            a = a + E.length;
        }
    })();
};
THREE.ExtrudeGeometry.WorldUVGenerator = {
    generateTopUV: function(a, b, c, d, e, f) {
        b = a.vertices[e].x;
        e = a.vertices[e].y;
        c = a.vertices[f].x;
        f = a.vertices[f].y;
        return [new THREE.UV(a.vertices[d].x, 1 - a.vertices[d].y), new THREE.UV(b, 1 - e), new THREE.UV(c, 1 - f)]
    },
    generateBottomUV: function(a, b, c, d, e, f) {
        return this.generateTopUV(a, b, c, d, e, f)
    },
    generateSideWallUV: function(a, b, c, d, e, f, g, h) {
        var b = a.vertices[e].x,
            c = a.vertices[e].y,
            e = a.vertices[e].z,
            d = a.vertices[f].x,
            j = a.vertices[f].y,
            f = a.vertices[f].z,
            l = a.vertices[g].x,
            k =
            a.vertices[g].y,
            g = a.vertices[g].z,
            p = a.vertices[h].x,
            m = a.vertices[h].y,
            a = a.vertices[h].z;
        return Math.abs(c - j) < 0.01 ? [new THREE.UV(b, e), new THREE.UV(d, f), new THREE.UV(l, g), new THREE.UV(p, a)] : [new THREE.UV(c, e), new THREE.UV(j, f), new THREE.UV(k, g), new THREE.UV(m, a)]
    }
};
THREE.ExtrudeGeometry.__v1 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v2 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v3 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v4 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v5 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v6 = new THREE.Vector2;
THREE.LatheGeometry = function(a, b, c) {
    THREE.Geometry.call(this);
    for (var b = b || 12, c = c || 2 * Math.PI, d = [], e = (new THREE.Matrix4).makeRotationZ(c / b), f = 0; f < a.length; f++) {
        d[f] = a[f].clone();
        this.vertices.push(d[f]);
    }
    for (var g = b + 1, c = 0; c < g; c++)
        for (f = 0; f < d.length; f++) {
            d[f] = e.multiplyVector3(d[f].clone());
            this.vertices.push(d[f]);
        }
    for (c = 0; c < b; c++) {
        d = 0;
        for (e = a.length; d < e - 1; d++) {
            this.faces.push(new THREE.Face4(c * e + d, (c + 1) % g * e + d, (c + 1) % g * e + (d + 1) % e, c * e + (d + 1) % e));
            this.faceVertexUvs[0].push([new THREE.UV(1 - c / b, d / e), new THREE.UV(1 -
                (c + 1) / b, d / e), new THREE.UV(1 - (c + 1) / b, (d + 1) / e), new THREE.UV(1 - c / b, (d + 1) / e)]);
        }
    }
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.LatheGeometry.prototype = new THREE.Geometry;
THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;
THREE.PlaneGeometry = function(a, b, c, d) {
    THREE.Geometry.call(this);
    for (var e = a / 2, f = b / 2, c = c || 1, d = d || 1, g = c + 1, h = d + 1, j = a / c, l = b / d, k = new THREE.Vector3(0, 1, 0), a = 0; a < h; a++)
        for (b = 0; b < g; b++) this.vertices.push(new THREE.Vector3(b * j - e, 0, a * l - f));
    for (a = 0; a < d; a++)
        for (b = 0; b < c; b++) {
            e = new THREE.Face4(b + g * a, b + g * (a + 1), b + 1 + g * (a + 1), b + 1 + g * a);
            e.normal.copy(k);
            e.vertexNormals.push(k.clone(), k.clone(), k.clone(), k.clone());
            this.faces.push(e);
            this.faceVertexUvs[0].push([new THREE.UV(b / c, a / d), new THREE.UV(b / c, (a + 1) / d), new THREE.UV((b +
                1) / c, (a + 1) / d), new THREE.UV((b + 1) / c, a / d)]);
        }
    this.computeCentroids();
};
THREE.PlaneGeometry.prototype = new THREE.Geometry;
THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;
THREE.SphereGeometry = function(a, b, c, d, e, f, g) {
    THREE.Geometry.call(this);
    var a = a || 50,
        d = d !== void 0 ? d : 0,
        e = e !== void 0 ? e : Math.PI * 2,
        f = f !== void 0 ? f : 0,
        g = g !== void 0 ? g : Math.PI,
        b = Math.max(3, Math.floor(b) || 8),
        c = Math.max(2, Math.floor(c) || 6),
        h, j, l = [],
        k = [];
    for (j = 0; j <= c; j++) {
        var p = [],
            m = [];
        for (h = 0; h <= b; h++) {
            var o = h / b,
                q = j / c,
                n = new THREE.Vector3;
            n.x = -a * Math.cos(d + o * e) * Math.sin(f + q * g);
            n.y = a * Math.cos(f + q * g);
            n.z = a * Math.sin(d + o * e) * Math.sin(f + q * g);
            this.vertices.push(n);
            p.push(this.vertices.length - 1);
            m.push(new THREE.UV(o,
                q));
        }
        l.push(p);
        k.push(m);
    }
    for (j = 0; j < c; j++)
        for (h = 0; h < b; h++) {
            var d = l[j][h + 1],
                e = l[j][h],
                f = l[j + 1][h],
                g = l[j + 1][h + 1],
                p = this.vertices[d].clone().normalize(),
                m = this.vertices[e].clone().normalize(),
                o = this.vertices[f].clone().normalize(),
                q = this.vertices[g].clone().normalize(),
                n = k[j][h + 1].clone(),
                r = k[j][h].clone(),
                u = k[j + 1][h].clone(),
                t = k[j + 1][h + 1].clone();
            if (Math.abs(this.vertices[d].y) == a) {
                this.faces.push(new THREE.Face3(d, f, g, [p, o, q]));
                this.faceVertexUvs[0].push([n, u, t]);
            } else if (Math.abs(this.vertices[f].y) ==
                a) {
                this.faces.push(new THREE.Face3(d, e, f, [p, m, o]));
                this.faceVertexUvs[0].push([n, r, u]);
            } else {
                this.faces.push(new THREE.Face4(d, e, f, g, [p, m, o, q]));
                this.faceVertexUvs[0].push([n, r, u, t]);
            }
        }
    this.computeCentroids();
    this.computeFaceNormals();
    this.boundingSphere = {
        radius: a
    };
};
THREE.SphereGeometry.prototype = new THREE.Geometry;
THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;
THREE.TextGeometry = function(a, b) {
    var c = (new THREE.TextPath(a, b)).toShapes();
    b.amount = b.height !== void 0 ? b.height : 50;
    if (b.bevelThickness === void 0) b.bevelThickness = 10;
    if (b.bevelSize === void 0) b.bevelSize = 8;
    if (b.bevelEnabled === void 0) b.bevelEnabled = false;
    if (b.bend) {
        var d = c[c.length - 1].getBoundingBox().maxX;
        b.bendPath = new THREE.QuadraticBezierCurve(new THREE.Vector2(0, 0), new THREE.Vector2(d / 2, 120), new THREE.Vector2(d, 0));
    }
    THREE.ExtrudeGeometry.call(this, c, b);
};
THREE.TextGeometry.prototype = new THREE.ExtrudeGeometry;
THREE.TextGeometry.prototype.constructor = THREE.TextGeometry;
THREE.FontUtils = {
    faces: {},
    face: "helvetiker",
    weight: "normal",
    style: "normal",
    size: 150,
    divisions: 10,
    getFace: function() {
        return this.faces[this.face][this.weight][this.style]
    },
    loadFace: function(a) {
        var b = a.familyName.toLowerCase();
        this.faces[b] = this.faces[b] || {};
        this.faces[b][a.cssFontWeight] = this.faces[b][a.cssFontWeight] || {};
        this.faces[b][a.cssFontWeight][a.cssFontStyle] = a;
        return this.faces[b][a.cssFontWeight][a.cssFontStyle] = a
    },
    drawText: function(a) {
        for (var b = this.getFace(), c = this.size / b.resolution, d =
                0, e = ("" + a).split(""), f = e.length, g = [], a = 0; a < f; a++) {
            var h = new THREE.Path,
                h = this.extractGlyphPoints(e[a], b, c, d, h),
                d = d + h.offset;
            g.push(h.path);
        }
        return {
            paths: g,
            offset: d / 2
        }
    },
    extractGlyphPoints: function(a, b, c, d, e) {
        var f = [],
            g, h, j, l, k, p, m, o, q, n, r, u = b.glyphs[a] || b.glyphs["?"];
        if (u) {
            if (u.o) {
                b = u._cachedOutline || (u._cachedOutline = u.o.split(" "));
                l = b.length;
                for (a = 0; a < l;) {
                    j = b[a++];
                    switch (j) {
                        case "m":
                            j = b[a++] * c + d;
                            k = b[a++] * c;
                            f.push(new THREE.Vector2(j, k));
                            e.moveTo(j, k);
                            break;
                        case "l":
                            j = b[a++] * c + d;
                            k = b[a++] * c;
                            f.push(new THREE.Vector2(j,
                                k));
                            e.lineTo(j, k);
                            break;
                        case "q":
                            j = b[a++] * c + d;
                            k = b[a++] * c;
                            o = b[a++] * c + d;
                            q = b[a++] * c;
                            e.quadraticCurveTo(o, q, j, k);
                            if (g = f[f.length - 1]) {
                                p = g.x;
                                m = g.y;
                                g = 1;
                                for (h = this.divisions; g <= h; g++) {
                                    var t = g / h,
                                        y = THREE.Shape.Utils.b2(t, p, o, j),
                                        t = THREE.Shape.Utils.b2(t, m, q, k);
                                    f.push(new THREE.Vector2(y, t));
                                }
                            }
                            break;
                        case "b":
                            j = b[a++] * c + d;
                            k = b[a++] * c;
                            o = b[a++] * c + d;
                            q = b[a++] * -c;
                            n = b[a++] * c + d;
                            r = b[a++] * -c;
                            e.bezierCurveTo(j, k, o, q, n, r);
                            if (g = f[f.length - 1]) {
                                p = g.x;
                                m = g.y;
                                g = 1;
                                for (h = this.divisions; g <= h; g++) {
                                    t = g / h;
                                    y = THREE.Shape.Utils.b3(t, p, o,
                                        n, j);
                                    t = THREE.Shape.Utils.b3(t, m, q, r, k);
                                    f.push(new THREE.Vector2(y, t));
                                }
                            }
                    }
                }
            }
            return {
                offset: u.ha * c,
                points: f,
                path: e
            }
        }
    }
};
(function(a) {
    var b = function(a) {
        for (var b = a.length, e = 0, f = b - 1, g = 0; g < b; f = g++) e = e + (a[f].x * a[g].y - a[g].x * a[f].y);
        return e * 0.5
    };
    a.Triangulate = function(a, d) {
        var e = a.length;
        if (e < 3) return null;
        var f = [],
            g = [],
            h = [],
            j, l, k;
        if (b(a) > 0)
            for (l = 0; l < e; l++) g[l] = l;
        else
            for (l = 0; l < e; l++) g[l] = e - 1 - l;
        var p = 2 * e;
        for (l = e - 1; e > 2;) {
            if (p-- <= 0) {
                console.log("Warning, unable to triangulate polygon!");
                break
            }
            j = l;
            e <= j && (j = 0);
            l = j + 1;
            e <= l && (l = 0);
            k = l + 1;
            e <= k && (k = 0);
            var m;
            a: {
                m = a;
                var o = j,
                    q = l,
                    n = k,
                    r = e,
                    u = g,
                    t = void 0,
                    y = void 0,
                    s = void 0,
                    w = void 0,
                    H = void 0,
                    E = void 0,
                    z = void 0,
                    v = void 0,
                    A = void 0,
                    y = m[u[o]].x,
                    s = m[u[o]].y,
                    w = m[u[q]].x,
                    H = m[u[q]].y,
                    E = m[u[n]].x,
                    z = m[u[n]].y;
                if (1.0E-10 > (w - y) * (z - s) - (H - s) * (E - y)) m = false;
                else {
                    for (t = 0; t < r; t++)
                        if (!(t == o || t == q || t == n)) {
                            var v = m[u[t]].x,
                                A = m[u[t]].y,
                                J = void 0,
                                K = void 0,
                                R = void 0,
                                P = void 0,
                                D = void 0,
                                M = void 0,
                                G = void 0,
                                i = void 0,
                                T = void 0,
                                U = void 0,
                                C = void 0,
                                Y = void 0,
                                J = R = D = void 0,
                                J = E - w,
                                K = z - H,
                                R = y - E,
                                P = s - z,
                                D = w - y,
                                M = H - s,
                                G = v - y,
                                i = A - s,
                                T = v - w,
                                U = A - H,
                                C = v - E,
                                Y = A - z,
                                J = J * U - K * T,
                                D = D * i - M * G,
                                R = R * Y - P * C;
                            if (J >= 0 && R >= 0 && D >= 0) {
                                m = false;
                                break a
                            }
                        } m = true;
                }
            }
            if (m) {
                f.push([a[g[j]],
                    a[g[l]], a[g[k]]
                ]);
                h.push([g[j], g[l], g[k]]);
                j = l;
                for (k = l + 1; k < e; j++, k++) g[j] = g[k];
                e--;
                p = 2 * e;
            }
        }
        return d ? h : f
    };
    a.Triangulate.area = b;
    return a
})(THREE.FontUtils);
self._typeface_js = {
    faces: THREE.FontUtils.faces,
    loadFace: THREE.FontUtils.loadFace
};
THREE.TorusGeometry = function(a, b, c, d, e) {
    THREE.Geometry.call(this);
    this.radius = a || 100;
    this.tube = b || 40;
    this.segmentsR = c || 8;
    this.segmentsT = d || 6;
    this.arc = e || Math.PI * 2;
    e = new THREE.Vector3;
    a = [];
    b = [];
    for (c = 0; c <= this.segmentsR; c++)
        for (d = 0; d <= this.segmentsT; d++) {
            var f = d / this.segmentsT * this.arc,
                g = c / this.segmentsR * Math.PI * 2;
            e.x = this.radius * Math.cos(f);
            e.y = this.radius * Math.sin(f);
            var h = new THREE.Vector3;
            h.x = (this.radius + this.tube * Math.cos(g)) * Math.cos(f);
            h.y = (this.radius + this.tube * Math.cos(g)) * Math.sin(f);
            h.z =
                this.tube * Math.sin(g);
            this.vertices.push(h);
            a.push(new THREE.UV(d / this.segmentsT, 1 - c / this.segmentsR));
            b.push(h.clone().subSelf(e).normalize());
        }
    for (c = 1; c <= this.segmentsR; c++)
        for (d = 1; d <= this.segmentsT; d++) {
            var e = (this.segmentsT + 1) * c + d - 1,
                f = (this.segmentsT + 1) * (c - 1) + d - 1,
                g = (this.segmentsT + 1) * (c - 1) + d,
                h = (this.segmentsT + 1) * c + d,
                j = new THREE.Face4(e, f, g, h, [b[e], b[f], b[g], b[h]]);
            j.normal.addSelf(b[e]);
            j.normal.addSelf(b[f]);
            j.normal.addSelf(b[g]);
            j.normal.addSelf(b[h]);
            j.normal.normalize();
            this.faces.push(j);
            this.faceVertexUvs[0].push([a[e].clone(), a[f].clone(), a[g].clone(), a[h].clone()]);
        }
    this.computeCentroids();
};
THREE.TorusGeometry.prototype = new THREE.Geometry;
THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;
THREE.TorusKnotGeometry = function(a, b, c, d, e, f, g) {
    function h(a, b, c, d, e, f) {
        var g = Math.cos(a);
        Math.cos(b);
        b = Math.sin(a);
        a = c / d * a;
        c = Math.cos(a);
        g = e * (2 + c) * 0.5 * g;
        b = e * (2 + c) * b * 0.5;
        e = f * e * Math.sin(a) * 0.5;
        return new THREE.Vector3(g, b, e)
    }
    THREE.Geometry.call(this);
    this.radius = a || 200;
    this.tube = b || 40;
    this.segmentsR = c || 64;
    this.segmentsT = d || 8;
    this.p = e || 2;
    this.q = f || 3;
    this.heightScale = g || 1;
    this.grid = Array(this.segmentsR);
    c = new THREE.Vector3;
    d = new THREE.Vector3;
    e = new THREE.Vector3;
    for (a = 0; a < this.segmentsR; ++a) {
        this.grid[a] =
            Array(this.segmentsT);
        for (b = 0; b < this.segmentsT; ++b) {
            var j = a / this.segmentsR * 2 * this.p * Math.PI,
                g = b / this.segmentsT * 2 * Math.PI,
                f = h(j, g, this.q, this.p, this.radius, this.heightScale),
                j = h(j + 0.01, g, this.q, this.p, this.radius, this.heightScale);
            c.sub(j, f);
            d.add(j, f);
            e.cross(c, d);
            d.cross(e, c);
            e.normalize();
            d.normalize();
            j = -this.tube * Math.cos(g);
            g = this.tube * Math.sin(g);
            f.x = f.x + (j * d.x + g * e.x);
            f.y = f.y + (j * d.y + g * e.y);
            f.z = f.z + (j * d.z + g * e.z);
            this.grid[a][b] = this.vertices.push(new THREE.Vector3(f.x, f.y, f.z)) - 1;
        }
    }
    for (a = 0; a <
        this.segmentsR; ++a)
        for (b = 0; b < this.segmentsT; ++b) {
            var e = (a + 1) % this.segmentsR,
                f = (b + 1) % this.segmentsT,
                c = this.grid[a][b],
                d = this.grid[e][b],
                e = this.grid[e][f],
                f = this.grid[a][f],
                g = new THREE.UV(a / this.segmentsR, b / this.segmentsT),
                j = new THREE.UV((a + 1) / this.segmentsR, b / this.segmentsT),
                l = new THREE.UV((a + 1) / this.segmentsR, (b + 1) / this.segmentsT),
                k = new THREE.UV(a / this.segmentsR, (b + 1) / this.segmentsT);
            this.faces.push(new THREE.Face4(c, d, e, f));
            this.faceVertexUvs[0].push([g, j, l, k]);
        }
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.TorusKnotGeometry.prototype = new THREE.Geometry;
THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;
THREE.TubeGeometry = function(a, b, c, d, e, f) {
    THREE.Geometry.call(this);
    this.path = a;
    this.segments = b || 64;
    this.radius = c || 1;
    this.segmentsRadius = d || 8;
    this.closed = e || false;
    if (f) this.debug = new THREE.Object3D;
    this.grid = [];
    var g, h, f = this.segments + 1,
        j, l, k, p = new THREE.Vector3,
        m, o, q, b = new THREE.TubeGeometry.FrenetFrames(a, b, e);
    m = b.tangents;
    o = b.normals;
    q = b.binormals;
    this.tangents = m;
    this.normals = o;
    this.binormals = q;
    for (b = 0; b < f; b++) {
        this.grid[b] = [];
        d = b / (f - 1);
        k = a.getPointAt(d);
        d = m[b];
        g = o[b];
        h = q[b];
        if (this.debug) {
            this.debug.add(new THREE.ArrowHelper(d,
                k, c, 255));
            this.debug.add(new THREE.ArrowHelper(g, k, c, 16711680));
            this.debug.add(new THREE.ArrowHelper(h, k, c, 65280));
        }
        for (d = 0; d < this.segmentsRadius; d++) {
            j = d / this.segmentsRadius * 2 * Math.PI;
            l = -this.radius * Math.cos(j);
            j = this.radius * Math.sin(j);
            p.copy(k);
            p.x = p.x + (l * g.x + j * h.x);
            p.y = p.y + (l * g.y + j * h.y);
            p.z = p.z + (l * g.z + j * h.z);
            this.grid[b][d] = this.vertices.push(new THREE.Vector3(p.x, p.y, p.z)) - 1;
        }
    }
    for (b = 0; b < this.segments; b++)
        for (d = 0; d < this.segmentsRadius; d++) {
            f = e ? (b + 1) % this.segments : b + 1;
            p = (d + 1) % this.segmentsRadius;
            a = this.grid[b][d];
            c = this.grid[f][d];
            f = this.grid[f][p];
            p = this.grid[b][p];
            m = new THREE.UV(b / this.segments, d / this.segmentsRadius);
            o = new THREE.UV((b + 1) / this.segments, d / this.segmentsRadius);
            q = new THREE.UV((b + 1) / this.segments, (d + 1) / this.segmentsRadius);
            g = new THREE.UV(b / this.segments, (d + 1) / this.segmentsRadius);
            this.faces.push(new THREE.Face4(a, c, f, p));
            this.faceVertexUvs[0].push([m, o, q, g]);
        }
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.TubeGeometry.prototype = new THREE.Geometry;
THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;
THREE.TubeGeometry.FrenetFrames = function(a, b, c) {
    new THREE.Vector3;
    var d = new THREE.Vector3;
    new THREE.Vector3;
    var e = [],
        f = [],
        g = [],
        h = new THREE.Vector3,
        j = new THREE.Matrix4,
        b = b + 1,
        l, k, p;
    this.tangents = e;
    this.normals = f;
    this.binormals = g;
    for (l = 0; l < b; l++) {
        k = l / (b - 1);
        e[l] = a.getTangentAt(k);
        e[l].normalize();
    }
    f[0] = new THREE.Vector3;
    g[0] = new THREE.Vector3;
    a = Number.MAX_VALUE;
    l = Math.abs(e[0].x);
    k = Math.abs(e[0].y);
    p = Math.abs(e[0].z);
    if (l <= a) {
        a = l;
        d.set(1, 0, 0);
    }
    if (k <= a) {
        a = k;
        d.set(0, 1, 0);
    }
    p <= a && d.set(0, 0, 1);
    h.cross(e[0], d).normalize();
    f[0].cross(e[0], h);
    g[0].cross(e[0], f[0]);
    for (l = 1; l < b; l++) {
        f[l] = f[l - 1].clone();
        g[l] = g[l - 1].clone();
        h.cross(e[l - 1], e[l]);
        if (h.length() > 1.0E-4) {
            h.normalize();
            d = Math.acos(e[l - 1].dot(e[l]));
            j.makeRotationAxis(h, d).multiplyVector3(f[l]);
        }
        g[l].cross(e[l], f[l]);
    }
    if (c) {
        d = Math.acos(f[0].dot(f[b - 1]));
        d = d / (b - 1);
        e[0].dot(h.cross(f[0], f[b - 1])) > 0 && (d = -d);
        for (l = 1; l < b; l++) {
            j.makeRotationAxis(e[l], d * l).multiplyVector3(f[l]);
            g[l].cross(e[l], f[l]);
        }
    }
};
THREE.PolyhedronGeometry = function(a, b, c, d) {
    function e(a) {
        var b = a.normalize().clone();
        b.index = j.vertices.push(b) - 1;
        var c = Math.atan2(a.z, -a.x) / 2 / Math.PI + 0.5,
            a = Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + 0.5;
        b.uv = new THREE.UV(c, a);
        return b
    }

    function f(a, b, c, d) {
        if (d < 1) {
            d = new THREE.Face3(a.index, b.index, c.index, [a.clone(), b.clone(), c.clone()]);
            d.centroid.addSelf(a).addSelf(b).addSelf(c).divideScalar(3);
            d.normal = d.centroid.clone().normalize();
            j.faces.push(d);
            d = Math.atan2(d.centroid.z, -d.centroid.x);
            j.faceVertexUvs[0].push([h(a.uv, a, d), h(b.uv, b, d), h(c.uv, c, d)]);
        } else {
            d = d - 1;
            f(a, g(a, b), g(a, c), d);
            f(g(a, b), b, g(b, c), d);
            f(g(a, c), g(b, c), c, d);
            f(g(a, b), g(b, c), g(a, c), d);
        }
    }

    function g(a, b) {
        p[a.index] || (p[a.index] = []);
        p[b.index] || (p[b.index] = []);
        var c = p[a.index][b.index];
        c === void 0 && (p[a.index][b.index] = p[b.index][a.index] = c = e((new THREE.Vector3).add(a, b).divideScalar(2)));
        return c
    }

    function h(a, b, c) {
        c < 0 && a.u === 1 && (a = new THREE.UV(a.u - 1, a.v));
        b.x === 0 && b.z === 0 && (a = new THREE.UV(c / 2 / Math.PI + 0.5, a.v));
        return a
    }
    THREE.Geometry.call(this);
    for (var c = c || 1, d = d || 0, j = this, l = 0, k = a.length; l < k; l++) e(new THREE.Vector3(a[l][0], a[l][1], a[l][2]));
    for (var p = [], a = this.vertices, l = 0, k = b.length; l < k; l++) f(a[b[l][0]], a[b[l][1]], a[b[l][2]], d);
    this.mergeVertices();
    l = 0;
    for (k = this.vertices.length; l < k; l++) this.vertices[l].multiplyScalar(c);
    this.computeCentroids();
    this.boundingSphere = {
        radius: c
    };
};
THREE.PolyhedronGeometry.prototype = new THREE.Geometry;
THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;
THREE.IcosahedronGeometry = function(a, b) {
    var c = (1 + Math.sqrt(5)) / 2;
    THREE.PolyhedronGeometry.call(this, [
        [-1, c, 0],
        [1, c, 0],
        [-1, -c, 0],
        [1, -c, 0],
        [0, -1, c],
        [0, 1, c],
        [0, -1, -c],
        [0, 1, -c],
        [c, 0, -1],
        [c, 0, 1],
        [-c, 0, -1],
        [-c, 0, 1]
    ], [
        [0, 11, 5],
        [0, 5, 1],
        [0, 1, 7],
        [0, 7, 10],
        [0, 10, 11],
        [1, 5, 9],
        [5, 11, 4],
        [11, 10, 2],
        [10, 7, 6],
        [7, 1, 8],
        [3, 9, 4],
        [3, 4, 2],
        [3, 2, 6],
        [3, 6, 8],
        [3, 8, 9],
        [4, 9, 5],
        [2, 4, 11],
        [6, 2, 10],
        [8, 6, 7],
        [9, 8, 1]
    ], a, b);
};
THREE.IcosahedronGeometry.prototype = new THREE.Geometry;
THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;
THREE.OctahedronGeometry = function(a, b) {
    THREE.PolyhedronGeometry.call(this, [
        [1, 0, 0],
        [-1, 0, 0],
        [0, 1, 0],
        [0, -1, 0],
        [0, 0, 1],
        [0, 0, -1]
    ], [
        [0, 2, 4],
        [0, 4, 3],
        [0, 3, 5],
        [0, 5, 2],
        [1, 2, 5],
        [1, 5, 3],
        [1, 3, 4],
        [1, 4, 2]
    ], a, b);
};
THREE.OctahedronGeometry.prototype = new THREE.Geometry;
THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;
THREE.TetrahedronGeometry = function(a, b) {
    THREE.PolyhedronGeometry.call(this, [
        [1, 1, 1],
        [-1, -1, 1],
        [-1, 1, -1],
        [1, -1, -1]
    ], [
        [2, 1, 0],
        [0, 3, 2],
        [1, 3, 0],
        [2, 3, 1]
    ], a, b);
};
THREE.TetrahedronGeometry.prototype = new THREE.Geometry;
THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;
THREE.ParametricGeometry = function(a, b, c, d) {
    THREE.Geometry.call(this);
    var e = this.vertices,
        f = this.faces,
        g = this.faceVertexUvs[0],
        d = d === void 0 ? false : d,
        h, j, l, k, p = b + 1;
    for (h = 0; h <= c; h++) {
        k = h / c;
        for (j = 0; j <= b; j++) {
            l = j / b;
            l = a(l, k);
            e.push(l);
        }
    }
    var m, o, q, n;
    for (h = 0; h < c; h++)
        for (j = 0; j < b; j++) {
            a = h * p + j;
            e = h * p + j + 1;
            k = (h + 1) * p + j;
            l = (h + 1) * p + j + 1;
            m = new THREE.UV(h / b, j / c);
            o = new THREE.UV(h / b, (j + 1) / c);
            q = new THREE.UV((h + 1) / b, j / c);
            n = new THREE.UV((h + 1) / b, (j + 1) / c);
            if (d) {
                f.push(new THREE.Face3(a, e, k));
                f.push(new THREE.Face3(e, l, k));
                g.push([m,
                    o, q
                ]);
                g.push([o, n, q]);
            } else {
                f.push(new THREE.Face4(a, e, l, k));
                g.push([m, o, q, n]);
            }
        }
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.ParametricGeometry.prototype = new THREE.Geometry;
THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;
THREE.AxisHelper = function() {
    THREE.Object3D.call(this);
    var a = new THREE.Geometry;
    a.vertices.push(new THREE.Vector3);
    a.vertices.push(new THREE.Vector3(0, 100, 0));
    var b = new THREE.CylinderGeometry(0, 5, 25, 5, 1),
        c;
    c = new THREE.Line(a, new THREE.LineBasicMaterial({
        color: 16711680
    }));
    c.rotation.z = -Math.PI / 2;
    this.add(c);
    c = new THREE.Mesh(b, new THREE.MeshBasicMaterial({
        color: 16711680
    }));
    c.position.x = 100;
    c.rotation.z = -Math.PI / 2;
    this.add(c);
    c = new THREE.Line(a, new THREE.LineBasicMaterial({
        color: 65280
    }));
    this.add(c);
    c = new THREE.Mesh(b, new THREE.MeshBasicMaterial({
        color: 65280
    }));
    c.position.y = 100;
    this.add(c);
    c = new THREE.Line(a, new THREE.LineBasicMaterial({
        color: 255
    }));
    c.rotation.x = Math.PI / 2;
    this.add(c);
    c = new THREE.Mesh(b, new THREE.MeshBasicMaterial({
        color: 255
    }));
    c.position.z = 100;
    c.rotation.x = Math.PI / 2;
    this.add(c);
};
THREE.AxisHelper.prototype = new THREE.Object3D;
THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;
THREE.ArrowHelper = function(a, b, c, d) {
    THREE.Object3D.call(this);
    d === void 0 && (d = 16776960);
    c === void 0 && (c = 20);
    var e = new THREE.Geometry;
    e.vertices.push(new THREE.Vector3(0, 0, 0));
    e.vertices.push(new THREE.Vector3(0, 1, 0));
    this.line = new THREE.Line(e, new THREE.LineBasicMaterial({
        color: d
    }));
    this.add(this.line);
    e = new THREE.CylinderGeometry(0, 0.05, 0.25, 5, 1);
    this.cone = new THREE.Mesh(e, new THREE.MeshBasicMaterial({
        color: d
    }));
    this.cone.position.set(0, 1, 0);
    this.add(this.cone);
    if (b instanceof THREE.Vector3) this.position =
        b;
    this.setDirection(a);
    this.setLength(c);
};
THREE.ArrowHelper.prototype = new THREE.Object3D;
THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;
THREE.ArrowHelper.prototype.setDirection = function(a) {
    var b = (new THREE.Vector3(0, 1, 0)).crossSelf(a),
        a = Math.acos((new THREE.Vector3(0, 1, 0)).dot(a.clone().normalize()));
    this.matrix = (new THREE.Matrix4).makeRotationAxis(b.normalize(), a);
    this.rotation.getRotationFromMatrix(this.matrix, this.scale);
};
THREE.ArrowHelper.prototype.setLength = function(a) {
    this.scale.set(a, a, a);
};
THREE.ArrowHelper.prototype.setColor = function(a) {
    this.line.material.color.setHex(a);
    this.cone.material.color.setHex(a);
};
THREE.CameraHelper = function(a) {
    function b(a, b, d) {
        c(a, d);
        c(b, d);
    }

    function c(a, b) {
        d.lineGeometry.vertices.push(new THREE.Vector3);
        d.lineGeometry.colors.push(new THREE.Color(b));
        d.pointMap[a] === void 0 && (d.pointMap[a] = []);
        d.pointMap[a].push(d.lineGeometry.vertices.length - 1);
    }
    THREE.Object3D.call(this);
    var d = this;
    this.lineGeometry = new THREE.Geometry;
    this.lineMaterial = new THREE.LineBasicMaterial({
        color: 16777215,
        vertexColors: THREE.FaceColors
    });
    this.pointMap = {};
    b("n1", "n2", 16755200);
    b("n2", "n4", 16755200);
    b("n4",
        "n3", 16755200);
    b("n3", "n1", 16755200);
    b("f1", "f2", 16755200);
    b("f2", "f4", 16755200);
    b("f4", "f3", 16755200);
    b("f3", "f1", 16755200);
    b("n1", "f1", 16755200);
    b("n2", "f2", 16755200);
    b("n3", "f3", 16755200);
    b("n4", "f4", 16755200);
    b("p", "n1", 16711680);
    b("p", "n2", 16711680);
    b("p", "n3", 16711680);
    b("p", "n4", 16711680);
    b("u1", "u2", 43775);
    b("u2", "u3", 43775);
    b("u3", "u1", 43775);
    b("c", "t", 16777215);
    b("p", "c", 3355443);
    b("cn1", "cn2", 3355443);
    b("cn3", "cn4", 3355443);
    b("cf1", "cf2", 3355443);
    b("cf3", "cf4", 3355443);
    this.camera = a;
    this.update(a);
    this.lines = new THREE.Line(this.lineGeometry, this.lineMaterial, THREE.LinePieces);
    this.add(this.lines);
};
THREE.CameraHelper.prototype = new THREE.Object3D;
THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;
THREE.CameraHelper.prototype.update = function() {
    function a(a, d, e, f) {
        THREE.CameraHelper.__v.set(d, e, f);
        THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v, THREE.CameraHelper.__c);
        a = b.pointMap[a];
        if (a !== void 0) {
            d = 0;
            for (e = a.length; d < e; d++) b.lineGeometry.vertices[a[d]].copy(THREE.CameraHelper.__v);
        }
    }
    var b = this;
    THREE.CameraHelper.__c.projectionMatrix.copy(this.camera.projectionMatrix);
    a("c", 0, 0, -1);
    a("t", 0, 0, 1);
    a("n1", -1, -1, -1);
    a("n2", 1, -1, -1);
    a("n3", -1, 1, -1);
    a("n4", 1, 1, -1);
    a("f1", -1, -1,
        1);
    a("f2", 1, -1, 1);
    a("f3", -1, 1, 1);
    a("f4", 1, 1, 1);
    a("u1", 0.7, 1.1, -1);
    a("u2", -0.7, 1.1, -1);
    a("u3", 0, 2, -1);
    a("cf1", -1, 0, 1);
    a("cf2", 1, 0, 1);
    a("cf3", 0, -1, 1);
    a("cf4", 0, 1, 1);
    a("cn1", -1, 0, -1);
    a("cn2", 1, 0, -1);
    a("cn3", 0, -1, -1);
    a("cn4", 0, 1, -1);
    this.lineGeometry.verticesNeedUpdate = true;
};
THREE.CameraHelper.__projector = new THREE.Projector;
THREE.CameraHelper.__v = new THREE.Vector3;
THREE.CameraHelper.__c = new THREE.Camera;
THREE.SubdivisionModifier = function(a) {
    this.subdivisions = a === void 0 ? 1 : a;
    this.useOldVertexColors = false;
    this.supportUVs = true;
    this.debug = false;
};
THREE.SubdivisionModifier.prototype.constructor = THREE.SubdivisionModifier;
THREE.SubdivisionModifier.prototype.modify = function(a) {
    for (var b = this.subdivisions; b-- > 0;) this.smooth(a);
};
THREE.SubdivisionModifier.prototype.smooth = function(a) {
    function b() {
        m.debug && console.log.apply(console, arguments);
    }

    function c() {
        console && console.log.apply(console, arguments);
    }

    function d(a, c, d, e, g, h, i) {
        var j = new THREE.Face4(a, c, d, e, null, g.color, g.material);
        if (m.useOldVertexColors) {
            j.vertexColors = [];
            for (var l, n, o, q = 0; q < 4; q++) {
                o = h[q];
                l = new THREE.Color;
                l.setRGB(0, 0, 0);
                for (var r = 0; r < o.length; r++) {
                    n = g.vertexColors[o[r] - 1];
                    l.r = l.r + n.r;
                    l.g = l.g + n.g;
                    l.b = l.b + n.b;
                }
                l.r = l.r / o.length;
                l.g = l.g / o.length;
                l.b = l.b / o.length;
                j.vertexColors[q] = l;
            }
        }
        k.push(j);
        if (m.supportUVs) {
            g = [f(a, ""), f(c, i), f(d, i), f(e, i)];
            g[0] ? g[1] ? g[2] ? g[3] ? p.push(g) : b("d :( ", e + ":" + i) : b("c :( ", d + ":" + i) : b("b :( ", c + ":" + i) : b("a :( ", a + ":" + i);
        }
    }

    function e(a, b) {
        return Math.min(a, b) + "_" + Math.max(a, b)
    }

    function f(a, d) {
        var e = a + ":" + d,
            f = t[e];
        if (!f) {
            a >= y && a < y + q.length ? b("face pt") : b("edge pt");
            c("warning, UV not found for", e);
            return null
        }
        return f
    }

    function g(a, b, d) {
        var e = a + ":" + b;
        e in t ? c("dup vertexNo", a, "oldFaceNo", b, "value", d, "key", e, t[e]) : t[e] = d;
    }

    function h(a,
        b) {
        R[a] === void 0 && (R[a] = []);
        R[a].push(b);
    }

    function j(a, b, c) {
        P[a] === void 0 && (P[a] = {});
        P[a][b] = c;
    }
    var l = [],
        k = [],
        p = [],
        m = this,
        o = a.vertices,
        q = a.faces,
        l = o.concat(),
        n = [],
        r = {},
        u = {},
        t = {},
        y = o.length,
        s, w, H, E, z, v = a.faceVertexUvs[0],
        A;
    b("originalFaces, uvs, originalVerticesLength", q.length, v.length, y);
    if (m.supportUVs) {
        s = 0;
        for (w = v.length; s < w; s++) {
            H = 0;
            for (E = v[s].length; H < E; H++) {
                A = q[s]["abcd".charAt(H)];
                g(A, s, v[s][H]);
            }
        }
    }
    if (v.length == 0) m.supportUVs = false;
    s = 0;
    for (z in t) s++;
    if (!s) {
        m.supportUVs = false;
        b("no uvs");
    }
    b("-- Original Faces + Vertices UVs completed",
        t, "vs", v.length);
    s = 0;
    for (w = q.length; s < w; s++) {
        z = q[s];
        n.push(z.centroid);
        l.push(z.centroid);
        if (m.supportUVs) {
            v = new THREE.UV;
            if (z instanceof THREE.Face3) {
                v.u = f(z.a, s).u + f(z.b, s).u + f(z.c, s).u;
                v.v = f(z.a, s).v + f(z.b, s).v + f(z.c, s).v;
                v.u = v.u / 3;
                v.v = v.v / 3;
            } else if (z instanceof THREE.Face4) {
                v.u = f(z.a, s).u + f(z.b, s).u + f(z.c, s).u + f(z.d, s).u;
                v.v = f(z.a, s).v + f(z.b, s).v + f(z.c, s).v + f(z.d, s).v;
                v.u = v.u / 4;
                v.v = v.v / 4;
            }
            g(y + s, "", v);
        }
    }
    b("-- added UVs for new Faces", t);
    w = function(a) {
        function b(a, c) {
            h[a] === void 0 && (h[a] = []);
            h[a].push(c);
        }
        var c, d, f, g, h = {};
        c = 0;
        for (d = a.faces.length; c < d; c++) {
            f = a.faces[c];
            if (f instanceof THREE.Face3) {
                g = e(f.a, f.b);
                b(g, c);
                g = e(f.b, f.c);
                b(g, c);
                g = e(f.c, f.a);
                b(g, c);
            } else if (f instanceof THREE.Face4) {
                g = e(f.a, f.b);
                b(g, c);
                g = e(f.b, f.c);
                b(g, c);
                g = e(f.c, f.d);
                b(g, c);
                g = e(f.d, f.a);
                b(g, c);
            }
        }
        return h
    }(a);
    A = 0;
    var J, K, R = {},
        P = {};
    for (s in w) {
        v = w[s];
        J = s.split("_");
        K = J[0];
        J = J[1];
        h(K, [K, J]);
        h(J, [K, J]);
        H = 0;
        for (E = v.length; H < E; H++) {
            z = v[H];
            j(K, z, s);
            j(J, z, s);
        }
        v.length < 2 && (u[s] = true);
    }
    b("vertexEdgeMap", R, "vertexFaceMap", P);
    for (s in w) {
        v =
            w[s];
        z = v[0];
        E = v[1];
        J = s.split("_");
        K = J[0];
        J = J[1];
        v = new THREE.Vector3;
        if (u[s]) {
            v.addSelf(o[K]);
            v.addSelf(o[J]);
            v.multiplyScalar(0.5);
        } else {
            v.addSelf(n[z]);
            v.addSelf(n[E]);
            v.addSelf(o[K]);
            v.addSelf(o[J]);
            v.multiplyScalar(0.25);
        }
        r[s] = y + q.length + A;
        l.push(v);
        A++;
        if (m.supportUVs) {
            v = new THREE.UV;
            v.u = f(K, z).u + f(J, z).u;
            v.v = f(K, z).v + f(J, z).v;
            v.u = v.u / 2;
            v.v = v.v / 2;
            g(r[s], z, v);
            if (!u[s]) {
                v = new THREE.UV;
                v.u = f(K, E).u + f(J, E).u;
                v.v = f(K, E).v + f(J, E).v;
                v.u = v.u / 2;
                v.v = v.v / 2;
                g(r[s], E, v);
            }
        }
    }
    b("-- Step 2 done");
    var D, M;
    E = ["123",
        "12", "2", "23"
    ];
    J = ["123", "23", "3", "31"];
    var G = ["123", "31", "1", "12"],
        i = ["1234", "12", "2", "23"],
        T = ["1234", "23", "3", "34"],
        U = ["1234", "34", "4", "41"],
        C = ["1234", "41", "1", "12"];
    s = 0;
    for (w = n.length; s < w; s++) {
        z = q[s];
        v = y + s;
        if (z instanceof THREE.Face3) {
            A = e(z.a, z.b);
            K = e(z.b, z.c);
            D = e(z.c, z.a);
            d(v, r[A], z.b, r[K], z, E, s);
            d(v, r[K], z.c, r[D], z, J, s);
            d(v, r[D], z.a, r[A], z, G, s);
        } else if (z instanceof THREE.Face4) {
            A = e(z.a, z.b);
            K = e(z.b, z.c);
            D = e(z.c, z.d);
            M = e(z.d, z.a);
            d(v, r[A], z.b, r[K], z, i, s);
            d(v, r[K], z.c, r[D], z, T, s);
            d(v, r[D], z.d, r[M],
                z, U, s);
            d(v, r[M], z.a, r[A], z, C, s);
        } else b("face should be a face!", z);
    }
    r = new THREE.Vector3;
    z = new THREE.Vector3;
    s = 0;
    for (w = o.length; s < w; s++)
        if (R[s] !== void 0) {
            r.set(0, 0, 0);
            z.set(0, 0, 0);
            K = new THREE.Vector3(0, 0, 0);
            v = 0;
            for (H in P[s]) {
                r.addSelf(n[H]);
                v++;
            }
            E = 0;
            A = R[s].length;
            for (H = 0; H < A; H++) u[e(R[s][H][0], R[s][H][1])] && E++;
            if (E != 2) {
                r.divideScalar(v);
                for (H = 0; H < A; H++) {
                    v = R[s][H];
                    v = o[v[0]].clone().addSelf(o[v[1]]).divideScalar(2);
                    z.addSelf(v);
                }
                z.divideScalar(A);
                K.addSelf(o[s]);
                K.multiplyScalar(A - 3);
                K.addSelf(r);
                K.addSelf(z.multiplyScalar(2));
                K.divideScalar(A);
                l[s] = K;
            }
        } a.vertices = l;
    a.faces = k;
    a.faceVertexUvs[0] = p;
    delete a.__tmpVertices;
    a.computeCentroids();
    a.computeFaceNormals();
    a.computeVertexNormals();
};
THREE.ImmediateRenderObject = function() {
    THREE.Object3D.call(this);
    this.render = function() {};
};
THREE.ImmediateRenderObject.prototype = new THREE.Object3D;
THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;
THREE.LensFlare = function(a, b, c, d, e) {
    THREE.Object3D.call(this);
    this.lensFlares = [];
    this.positionScreen = new THREE.Vector3;
    this.customUpdateCallback = void 0;
    a !== void 0 && this.add(a, b, c, d, e);
};
THREE.LensFlare.prototype = new THREE.Object3D;
THREE.LensFlare.prototype.constructor = THREE.LensFlare;
THREE.LensFlare.prototype.supr = THREE.Object3D.prototype;
THREE.LensFlare.prototype.add = function(a, b, c, d, e, f) {
    b === void 0 && (b = -1);
    c === void 0 && (c = 0);
    f === void 0 && (f = 1);
    e === void 0 && (e = new THREE.Color(16777215));
    if (d === void 0) d = THREE.NormalBlending;
    c = Math.min(c, Math.max(0, c));
    this.lensFlares.push({
        texture: a,
        size: b,
        distance: c,
        x: 0,
        y: 0,
        z: 0,
        scale: 1,
        rotation: 1,
        opacity: f,
        color: e,
        blending: d
    });
};
THREE.LensFlare.prototype.updateLensFlares = function() {
    var a, b = this.lensFlares.length,
        c, d = -this.positionScreen.x * 2,
        e = -this.positionScreen.y * 2;
    for (a = 0; a < b; a++) {
        c = this.lensFlares[a];
        c.x = this.positionScreen.x + d * c.distance;
        c.y = this.positionScreen.y + e * c.distance;
        c.wantedRotation = c.x * Math.PI * 0.25;
        c.rotation = c.rotation + (c.wantedRotation - c.rotation) * 0.25;
    }
};
THREE.MorphBlendMesh = function(a, b) {
    THREE.Mesh.call(this, a, b);
    this.animationsMap = {};
    this.animationsList = [];
    var c = this.geometry.morphTargets.length;
    this.createAnimation("__default", 0, c - 1, c / 1);
    this.setAnimationWeight("__default", 1);
};
THREE.MorphBlendMesh.prototype = new THREE.Mesh;
THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;
THREE.MorphBlendMesh.prototype.createAnimation = function(a, b, c, d) {
    b = {
        startFrame: b,
        endFrame: c,
        length: c - b + 1,
        fps: d,
        duration: (c - b) / d,
        lastFrame: 0,
        currentFrame: 0,
        active: false,
        time: 0,
        direction: 1,
        weight: 1,
        directionBackwards: false,
        mirroredLoop: false
    };
    this.animationsMap[a] = b;
    this.animationsList.push(b);
};
THREE.MorphBlendMesh.prototype.autoCreateAnimations = function(a) {
    for (var b = /([a-z]+)(\d+)/, c, d = {}, e = this.geometry, f = 0, g = e.morphTargets.length; f < g; f++) {
        var h = e.morphTargets[f].name.match(b);
        if (h && h.length > 1) {
            var j = h[1];
            d[j] || (d[j] = {
                start: Infinity,
                end: -Infinity
            });
            h = d[j];
            if (f < h.start) h.start = f;
            if (f > h.end) h.end = f;
            c || (c = j);
        }
    }
    for (j in d) {
        h = d[j];
        this.createAnimation(j, h.start, h.end, a);
    }
    this.firstAnimation = c;
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function(a) {
    if (a = this.animationsMap[a]) {
        a.direction = 1;
        a.directionBackwards = false;
    }
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function(a) {
    if (a = this.animationsMap[a]) {
        a.direction = -1;
        a.directionBackwards = true;
    }
};
THREE.MorphBlendMesh.prototype.setAnimationFPS = function(a, b) {
    var c = this.animationsMap[a];
    if (c) {
        c.fps = b;
        c.duration = (c.end - c.start) / c.fps;
    }
};
THREE.MorphBlendMesh.prototype.setAnimationDuration = function(a, b) {
    var c = this.animationsMap[a];
    if (c) {
        c.duration = b;
        c.fps = (c.end - c.start) / c.duration;
    }
};
THREE.MorphBlendMesh.prototype.setAnimationWeight = function(a, b) {
    var c = this.animationsMap[a];
    if (c) c.weight = b;
};
THREE.MorphBlendMesh.prototype.setAnimationTime = function(a, b) {
    var c = this.animationsMap[a];
    if (c) c.time = b;
};
THREE.MorphBlendMesh.prototype.getAnimationTime = function(a) {
    var b = 0;
    if (a = this.animationsMap[a]) b = a.time;
    return b
};
THREE.MorphBlendMesh.prototype.getAnimationDuration = function(a) {
    var b = -1;
    if (a = this.animationsMap[a]) b = a.duration;
    return b
};
THREE.MorphBlendMesh.prototype.playAnimation = function(a) {
    var b = this.animationsMap[a];
    if (b) {
        b.time = 0;
        b.active = true;
    } else console.warn("animation[" + a + "] undefined");
};
THREE.MorphBlendMesh.prototype.stopAnimation = function(a) {
    if (a = this.animationsMap[a]) a.active = false;
};
THREE.MorphBlendMesh.prototype.update = function(a) {
    for (var b = 0, c = this.animationsList.length; b < c; b++) {
        var d = this.animationsList[b];
        if (d.active) {
            var e = d.duration / d.length;
            d.time = d.time + d.direction * a;
            if (d.mirroredLoop) {
                if (d.time > d.duration || d.time < 0) {
                    d.direction = d.direction * -1;
                    if (d.time > d.duration) {
                        d.time = d.duration;
                        d.directionBackwards = true;
                    }
                    if (d.time < 0) {
                        d.time = 0;
                        d.directionBackwards = false;
                    }
                }
            } else {
                d.time = d.time % d.duration;
                if (d.time < 0) d.time = d.time + d.duration;
            }
            var f = d.startFrame + THREE.Math.clamp(Math.floor(d.time /
                    e), 0, d.length - 1),
                g = d.weight;
            if (f !== d.currentFrame) {
                this.morphTargetInfluences[d.lastFrame] = 0;
                this.morphTargetInfluences[d.currentFrame] = 1 * g;
                this.morphTargetInfluences[f] = 0;
                d.lastFrame = d.currentFrame;
                d.currentFrame = f;
            }
            e = d.time % e / e;
            d.directionBackwards && (e = 1 - e);
            this.morphTargetInfluences[d.currentFrame] = e * g;
            this.morphTargetInfluences[d.lastFrame] = (1 - e) * g;
        }
    }
};
THREE.LensFlarePlugin = function() {
    function a(a) {
        var c = b.createProgram(),
            d = b.createShader(b.FRAGMENT_SHADER),
            e = b.createShader(b.VERTEX_SHADER);
        b.shaderSource(d, a.fragmentShader);
        b.shaderSource(e, a.vertexShader);
        b.compileShader(d);
        b.compileShader(e);
        b.attachShader(c, d);
        b.attachShader(c, e);
        b.linkProgram(c);
        return c
    }
    var b, c, d, e, f, g, h, j, l, k, p, m, o;
    this.init = function(q) {
        b = q.context;
        c = q;
        d = new Float32Array(16);
        e = new Uint16Array(6);
        q = 0;
        d[q++] = -1;
        d[q++] = -1;
        d[q++] = 0;
        d[q++] = 0;
        d[q++] = 1;
        d[q++] = -1;
        d[q++] = 1;
        d[q++] =
            0;
        d[q++] = 1;
        d[q++] = 1;
        d[q++] = 1;
        d[q++] = 1;
        d[q++] = -1;
        d[q++] = 1;
        d[q++] = 0;
        d[q++] = 1;
        q = 0;
        e[q++] = 0;
        e[q++] = 1;
        e[q++] = 2;
        e[q++] = 0;
        e[q++] = 2;
        e[q++] = 3;
        f = b.createBuffer();
        g = b.createBuffer();
        b.bindBuffer(b.ARRAY_BUFFER, f);
        b.bufferData(b.ARRAY_BUFFER, d, b.STATIC_DRAW);
        b.bindBuffer(b.ELEMENT_ARRAY_BUFFER, g);
        b.bufferData(b.ELEMENT_ARRAY_BUFFER, e, b.STATIC_DRAW);
        h = b.createTexture();
        j = b.createTexture();
        b.bindTexture(b.TEXTURE_2D, h);
        b.texImage2D(b.TEXTURE_2D, 0, b.RGB, 16, 16, 0, b.RGB, b.UNSIGNED_BYTE, null);
        b.texParameteri(b.TEXTURE_2D,
            b.TEXTURE_WRAP_S, b.CLAMP_TO_EDGE);
        b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_T, b.CLAMP_TO_EDGE);
        b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MAG_FILTER, b.NEAREST);
        b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.NEAREST);
        b.bindTexture(b.TEXTURE_2D, j);
        b.texImage2D(b.TEXTURE_2D, 0, b.RGBA, 16, 16, 0, b.RGBA, b.UNSIGNED_BYTE, null);
        b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_S, b.CLAMP_TO_EDGE);
        b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_T, b.CLAMP_TO_EDGE);
        b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MAG_FILTER, b.NEAREST);
        b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.NEAREST);
        if (b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS) <= 0) {
            l = false;
            k = a(THREE.ShaderFlares.lensFlare);
        } else {
            l = true;
            k = a(THREE.ShaderFlares.lensFlareVertexTexture);
        }
        p = {};
        m = {};
        p.vertex = b.getAttribLocation(k, "position");
        p.uv = b.getAttribLocation(k, "uv");
        m.renderType = b.getUniformLocation(k, "renderType");
        m.map = b.getUniformLocation(k, "map");
        m.occlusionMap = b.getUniformLocation(k, "occlusionMap");
        m.opacity = b.getUniformLocation(k, "opacity");
        m.color = b.getUniformLocation(k,
            "color");
        m.scale = b.getUniformLocation(k, "scale");
        m.rotation = b.getUniformLocation(k, "rotation");
        m.screenPosition = b.getUniformLocation(k, "screenPosition");
        o = false;
    };
    this.render = function(a, d, e, u) {
        var a = a.__webglFlares,
            t = a.length;
        if (t) {
            var y = new THREE.Vector3,
                s = u / e,
                w = e * 0.5,
                H = u * 0.5,
                E = 16 / u,
                z = new THREE.Vector2(E * s, E),
                v = new THREE.Vector3(1, 1, 0),
                A = new THREE.Vector2(1, 1),
                J = m,
                E = p;
            b.useProgram(k);
            if (!o) {
                b.enableVertexAttribArray(p.vertex);
                b.enableVertexAttribArray(p.uv);
                o = true;
            }
            b.uniform1i(J.occlusionMap, 0);
            b.uniform1i(J.map,
                1);
            b.bindBuffer(b.ARRAY_BUFFER, f);
            b.vertexAttribPointer(E.vertex, 2, b.FLOAT, false, 16, 0);
            b.vertexAttribPointer(E.uv, 2, b.FLOAT, false, 16, 8);
            b.bindBuffer(b.ELEMENT_ARRAY_BUFFER, g);
            b.disable(b.CULL_FACE);
            b.depthMask(false);
            var K, R, P, D, M;
            for (K = 0; K < t; K++) {
                E = 16 / u;
                z.set(E * s, E);
                D = a[K];
                y.set(D.matrixWorld.elements[12], D.matrixWorld.elements[13], D.matrixWorld.elements[14]);
                d.matrixWorldInverse.multiplyVector3(y);
                d.projectionMatrix.multiplyVector3(y);
                v.copy(y);
                A.x = v.x * w + w;
                A.y = v.y * H + H;
                if (l || A.x > 0 && A.x < e && A.y > 0 &&
                    A.y < u) {
                    b.activeTexture(b.TEXTURE1);
                    b.bindTexture(b.TEXTURE_2D, h);
                    b.copyTexImage2D(b.TEXTURE_2D, 0, b.RGB, A.x - 8, A.y - 8, 16, 16, 0);
                    b.uniform1i(J.renderType, 0);
                    b.uniform2f(J.scale, z.x, z.y);
                    b.uniform3f(J.screenPosition, v.x, v.y, v.z);
                    b.disable(b.BLEND);
                    b.enable(b.DEPTH_TEST);
                    b.drawElements(b.TRIANGLES, 6, b.UNSIGNED_SHORT, 0);
                    b.activeTexture(b.TEXTURE0);
                    b.bindTexture(b.TEXTURE_2D, j);
                    b.copyTexImage2D(b.TEXTURE_2D, 0, b.RGBA, A.x - 8, A.y - 8, 16, 16, 0);
                    b.uniform1i(J.renderType, 1);
                    b.disable(b.DEPTH_TEST);
                    b.activeTexture(b.TEXTURE1);
                    b.bindTexture(b.TEXTURE_2D, h);
                    b.drawElements(b.TRIANGLES, 6, b.UNSIGNED_SHORT, 0);
                    D.positionScreen.copy(v);
                    D.customUpdateCallback ? D.customUpdateCallback(D) : D.updateLensFlares();
                    b.uniform1i(J.renderType, 2);
                    b.enable(b.BLEND);
                    R = 0;
                    for (P = D.lensFlares.length; R < P; R++) {
                        M = D.lensFlares[R];
                        if (M.opacity > 0.001 && M.scale > 0.001) {
                            v.x = M.x;
                            v.y = M.y;
                            v.z = M.z;
                            E = M.size * M.scale / u;
                            z.x = E * s;
                            z.y = E;
                            b.uniform3f(J.screenPosition, v.x, v.y, v.z);
                            b.uniform2f(J.scale, z.x, z.y);
                            b.uniform1f(J.rotation, M.rotation);
                            b.uniform1f(J.opacity, M.opacity);
                            b.uniform3f(J.color, M.color.r, M.color.g, M.color.b);
                            c.setBlending(M.blending, M.blendEquation, M.blendSrc, M.blendDst);
                            c.setTexture(M.texture, 1);
                            b.drawElements(b.TRIANGLES, 6, b.UNSIGNED_SHORT, 0);
                        }
                    }
                }
            }
            b.enable(b.CULL_FACE);
            b.enable(b.DEPTH_TEST);
            b.depthMask(true);
        }
    };
};
THREE.ShadowMapPlugin = function() {
    var a, b, c, d, e = new THREE.Frustum,
        f = new THREE.Matrix4,
        g = new THREE.Vector3,
        h = new THREE.Vector3;
    this.init = function(e) {
        a = e.context;
        b = e;
        var e = THREE.ShaderLib.depthRGBA,
            f = THREE.UniformsUtils.clone(e.uniforms);
        c = new THREE.ShaderMaterial({
            fragmentShader: e.fragmentShader,
            vertexShader: e.vertexShader,
            uniforms: f
        });
        d = new THREE.ShaderMaterial({
            fragmentShader: e.fragmentShader,
            vertexShader: e.vertexShader,
            uniforms: f,
            morphTargets: true
        });
        c._shadowPass = true;
        d._shadowPass = true;
    };
    this.render =
        function(a, c) {
            b.shadowMapEnabled && b.shadowMapAutoUpdate && this.update(a, c);
        };
    this.update = function(j, l) {
        var k, p, m, o, q, n, r, u, t, y = [];
        o = 0;
        a.clearColor(1, 1, 1, 1);
        a.disable(a.BLEND);
        a.enable(a.CULL_FACE);
        b.shadowMapCullFrontFaces ? a.cullFace(a.FRONT) : a.cullFace(a.BACK);
        b.setDepthTest(true);
        k = 0;
        for (p = j.__lights.length; k < p; k++) {
            m = j.__lights[k];
            if (m.castShadow)
                if (m instanceof THREE.DirectionalLight && m.shadowCascade)
                    for (q = 0; q < m.shadowCascadeCount; q++) {
                        var s;
                        if (m.shadowCascadeArray[q]) s = m.shadowCascadeArray[q];
                        else {
                            t = m;
                            r = q;
                            s = new THREE.DirectionalLight;
                            s.isVirtual = true;
                            s.onlyShadow = true;
                            s.castShadow = true;
                            s.shadowCameraNear = t.shadowCameraNear;
                            s.shadowCameraFar = t.shadowCameraFar;
                            s.shadowCameraLeft = t.shadowCameraLeft;
                            s.shadowCameraRight = t.shadowCameraRight;
                            s.shadowCameraBottom = t.shadowCameraBottom;
                            s.shadowCameraTop = t.shadowCameraTop;
                            s.shadowCameraVisible = t.shadowCameraVisible;
                            s.shadowDarkness = t.shadowDarkness;
                            s.shadowBias = t.shadowCascadeBias[r];
                            s.shadowMapWidth = t.shadowCascadeWidth[r];
                            s.shadowMapHeight = t.shadowCascadeHeight[r];
                            s.pointsWorld = [];
                            s.pointsFrustum = [];
                            u = s.pointsWorld;
                            n = s.pointsFrustum;
                            for (var w = 0; w < 8; w++) {
                                u[w] = new THREE.Vector3;
                                n[w] = new THREE.Vector3;
                            }
                            u = t.shadowCascadeNearZ[r];
                            t = t.shadowCascadeFarZ[r];
                            n[0].set(-1, -1, u);
                            n[1].set(1, -1, u);
                            n[2].set(-1, 1, u);
                            n[3].set(1, 1, u);
                            n[4].set(-1, -1, t);
                            n[5].set(1, -1, t);
                            n[6].set(-1, 1, t);
                            n[7].set(1, 1, t);
                            s.originalCamera = l;
                            n = new THREE.Gyroscope;
                            n.position = m.shadowCascadeOffset;
                            n.add(s);
                            n.add(s.target);
                            l.add(n);
                            m.shadowCascadeArray[q] = s;
                            console.log("Created virtualLight", s);
                        }
                        r = m;
                        u =
                            q;
                        t = r.shadowCascadeArray[u];
                        t.position.copy(r.position);
                        t.target.position.copy(r.target.position);
                        t.lookAt(t.target);
                        t.shadowCameraVisible = r.shadowCameraVisible;
                        t.shadowDarkness = r.shadowDarkness;
                        t.shadowBias = r.shadowCascadeBias[u];
                        n = r.shadowCascadeNearZ[u];
                        r = r.shadowCascadeFarZ[u];
                        t = t.pointsFrustum;
                        t[0].z = n;
                        t[1].z = n;
                        t[2].z = n;
                        t[3].z = n;
                        t[4].z = r;
                        t[5].z = r;
                        t[6].z = r;
                        t[7].z = r;
                        y[o] = s;
                        o++;
                    } else {
                        y[o] = m;
                        o++;
                    }
        }
        k = 0;
        for (p = y.length; k < p; k++) {
            m = y[k];
            if (!m.shadowMap) {
                m.shadowMap = new THREE.WebGLRenderTarget(m.shadowMapWidth,
                    m.shadowMapHeight, {
                        minFilter: THREE.LinearFilter,
                        magFilter: THREE.LinearFilter,
                        format: THREE.RGBAFormat
                    });
                m.shadowMapSize = new THREE.Vector2(m.shadowMapWidth, m.shadowMapHeight);
                m.shadowMatrix = new THREE.Matrix4;
            }
            if (!m.shadowCamera) {
                if (m instanceof THREE.SpotLight) m.shadowCamera = new THREE.PerspectiveCamera(m.shadowCameraFov, m.shadowMapWidth / m.shadowMapHeight, m.shadowCameraNear, m.shadowCameraFar);
                else if (m instanceof THREE.DirectionalLight) m.shadowCamera = new THREE.OrthographicCamera(m.shadowCameraLeft, m.shadowCameraRight,
                    m.shadowCameraTop, m.shadowCameraBottom, m.shadowCameraNear, m.shadowCameraFar);
                else {
                    console.error("Unsupported light type for shadow");
                    continue
                }
                j.add(m.shadowCamera);
                b.autoUpdateScene && j.updateMatrixWorld();
            }
            if (m.shadowCameraVisible && !m.cameraHelper) {
                m.cameraHelper = new THREE.CameraHelper(m.shadowCamera);
                m.shadowCamera.add(m.cameraHelper);
            }
            if (m.isVirtual && s.originalCamera == l) {
                q = l;
                o = m.shadowCamera;
                n = m.pointsFrustum;
                t = m.pointsWorld;
                g.set(Infinity, Infinity, Infinity);
                h.set(-Infinity, -Infinity, -Infinity);
                for (r =
                    0; r < 8; r++) {
                    u = t[r];
                    u.copy(n[r]);
                    THREE.ShadowMapPlugin.__projector.unprojectVector(u, q);
                    o.matrixWorldInverse.multiplyVector3(u);
                    if (u.x < g.x) g.x = u.x;
                    if (u.x > h.x) h.x = u.x;
                    if (u.y < g.y) g.y = u.y;
                    if (u.y > h.y) h.y = u.y;
                    if (u.z < g.z) g.z = u.z;
                    if (u.z > h.z) h.z = u.z;
                }
                o.left = g.x;
                o.right = h.x;
                o.top = h.y;
                o.bottom = g.y;
                o.updateProjectionMatrix();
            }
            o = m.shadowMap;
            n = m.shadowMatrix;
            q = m.shadowCamera;
            q.position.copy(m.matrixWorld.getPosition());
            q.lookAt(m.target.matrixWorld.getPosition());
            q.updateMatrixWorld();
            q.matrixWorldInverse.getInverse(q.matrixWorld);
            if (m.cameraHelper) m.cameraHelper.lines.visible = m.shadowCameraVisible;
            m.shadowCameraVisible && m.cameraHelper.update();
            n.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            n.multiplySelf(q.projectionMatrix);
            n.multiplySelf(q.matrixWorldInverse);
            if (!q._viewMatrixArray) q._viewMatrixArray = new Float32Array(16);
            if (!q._projectionMatrixArray) q._projectionMatrixArray = new Float32Array(16);
            q.matrixWorldInverse.flattenToArray(q._viewMatrixArray);
            q.projectionMatrix.flattenToArray(q._projectionMatrixArray);
            f.multiply(q.projectionMatrix,
                q.matrixWorldInverse);
            e.setFromMatrix(f);
            b.setRenderTarget(o);
            b.clear();
            t = j.__webglObjects;
            m = 0;
            for (o = t.length; m < o; m++) {
                r = t[m];
                n = r.object;
                r.render = false;
                if (n.visible && n.castShadow && (!(n instanceof THREE.Mesh) || !n.frustumCulled || e.contains(n))) {
                    n._modelViewMatrix.multiply(q.matrixWorldInverse, n.matrixWorld);
                    r.render = true;
                }
            }
            m = 0;
            for (o = t.length; m < o; m++) {
                r = t[m];
                if (r.render) {
                    n = r.object;
                    r = r.buffer;
                    u = n.customDepthMaterial ? n.customDepthMaterial : n.geometry.morphTargets.length ? d : c;
                    r instanceof THREE.BufferGeometry ?
                        b.renderBufferDirect(q, j.__lights, null, u, r, n) : b.renderBuffer(q, j.__lights, null, u, r, n);
                }
            }
            t = j.__webglObjectsImmediate;
            m = 0;
            for (o = t.length; m < o; m++) {
                r = t[m];
                n = r.object;
                if (n.visible && n.castShadow) {
                    n._modelViewMatrix.multiply(q.matrixWorldInverse, n.matrixWorld);
                    b.renderImmediateObject(q, j.__lights, null, c, n);
                }
            }
        }
        k = b.getClearColor();
        p = b.getClearAlpha();
        a.clearColor(k.r, k.g, k.b, p);
        a.enable(a.BLEND);
        b.shadowMapCullFrontFaces && a.cullFace(a.BACK);
    };
};
THREE.ShadowMapPlugin.__projector = new THREE.Projector;
THREE.SpritePlugin = function() {
    function a(a, b) {
        return b.z - a.z
    }
    var b, c, d, e, f, g, h, j, l, k;
    this.init = function(a) {
        b = a.context;
        c = a;
        d = new Float32Array(16);
        e = new Uint16Array(6);
        a = 0;
        d[a++] = -1;
        d[a++] = -1;
        d[a++] = 0;
        d[a++] = 1;
        d[a++] = 1;
        d[a++] = -1;
        d[a++] = 1;
        d[a++] = 1;
        d[a++] = 1;
        d[a++] = 1;
        d[a++] = 1;
        d[a++] = 0;
        d[a++] = -1;
        d[a++] = 1;
        d[a++] = 0;
        a = d[a++] = 0;
        e[a++] = 0;
        e[a++] = 1;
        e[a++] = 2;
        e[a++] = 0;
        e[a++] = 2;
        e[a++] = 3;
        f = b.createBuffer();
        g = b.createBuffer();
        b.bindBuffer(b.ARRAY_BUFFER, f);
        b.bufferData(b.ARRAY_BUFFER, d, b.STATIC_DRAW);
        b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,
            g);
        b.bufferData(b.ELEMENT_ARRAY_BUFFER, e, b.STATIC_DRAW);
        var a = THREE.ShaderSprite.sprite,
            m = b.createProgram(),
            o = b.createShader(b.FRAGMENT_SHADER),
            q = b.createShader(b.VERTEX_SHADER);
        b.shaderSource(o, a.fragmentShader);
        b.shaderSource(q, a.vertexShader);
        b.compileShader(o);
        b.compileShader(q);
        b.attachShader(m, o);
        b.attachShader(m, q);
        b.linkProgram(m);
        h = m;
        j = {};
        l = {};
        j.position = b.getAttribLocation(h, "position");
        j.uv = b.getAttribLocation(h, "uv");
        l.uvOffset = b.getUniformLocation(h, "uvOffset");
        l.uvScale = b.getUniformLocation(h,
            "uvScale");
        l.rotation = b.getUniformLocation(h, "rotation");
        l.scale = b.getUniformLocation(h, "scale");
        l.alignment = b.getUniformLocation(h, "alignment");
        l.color = b.getUniformLocation(h, "color");
        l.map = b.getUniformLocation(h, "map");
        l.opacity = b.getUniformLocation(h, "opacity");
        l.useScreenCoordinates = b.getUniformLocation(h, "useScreenCoordinates");
        l.affectedByDistance = b.getUniformLocation(h, "affectedByDistance");
        l.screenPosition = b.getUniformLocation(h, "screenPosition");
        l.modelViewMatrix = b.getUniformLocation(h, "modelViewMatrix");
        l.projectionMatrix = b.getUniformLocation(h, "projectionMatrix");
        k = false;
    };
    this.render = function(d, e, o, q) {
        var d = d.__webglSprites,
            n = d.length;
        if (n) {
            var r = j,
                u = l,
                t = q / o,
                o = o * 0.5,
                y = q * 0.5,
                s = true;
            b.useProgram(h);
            if (!k) {
                b.enableVertexAttribArray(r.position);
                b.enableVertexAttribArray(r.uv);
                k = true;
            }
            b.disable(b.CULL_FACE);
            b.enable(b.BLEND);
            b.depthMask(true);
            b.bindBuffer(b.ARRAY_BUFFER, f);
            b.vertexAttribPointer(r.position, 2, b.FLOAT, false, 16, 0);
            b.vertexAttribPointer(r.uv, 2, b.FLOAT, false, 16, 8);
            b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,
                g);
            b.uniformMatrix4fv(u.projectionMatrix, false, e._projectionMatrixArray);
            b.activeTexture(b.TEXTURE0);
            b.uniform1i(u.map, 0);
            for (var w, H = [], r = 0; r < n; r++) {
                w = d[r];
                if (w.visible && w.opacity !== 0)
                    if (w.useScreenCoordinates) w.z = -w.position.z;
                    else {
                        w._modelViewMatrix.multiply(e.matrixWorldInverse, w.matrixWorld);
                        w.z = -w._modelViewMatrix.elements[14];
                    }
            }
            d.sort(a);
            for (r = 0; r < n; r++) {
                w = d[r];
                if (w.visible && w.opacity !== 0 && w.map && w.map.image && w.map.image.width) {
                    if (w.useScreenCoordinates) {
                        b.uniform1i(u.useScreenCoordinates, 1);
                        b.uniform3f(u.screenPosition, (w.position.x - o) / o, (y - w.position.y) / y, Math.max(0, Math.min(1, w.position.z)));
                    } else {
                        b.uniform1i(u.useScreenCoordinates, 0);
                        b.uniform1i(u.affectedByDistance, w.affectedByDistance ? 1 : 0);
                        b.uniformMatrix4fv(u.modelViewMatrix, false, w._modelViewMatrix.elements);
                    }
                    e = w.map.image.width / (w.scaleByViewport ? q : 1);
                    H[0] = e * t * w.scale.x;
                    H[1] = e * w.scale.y;
                    b.uniform2f(u.uvScale, w.uvScale.x, w.uvScale.y);
                    b.uniform2f(u.uvOffset, w.uvOffset.x, w.uvOffset.y);
                    b.uniform2f(u.alignment, w.alignment.x, w.alignment.y);
                    b.uniform1f(u.opacity, w.opacity);
                    b.uniform3f(u.color, w.color.r, w.color.g, w.color.b);
                    b.uniform1f(u.rotation, w.rotation);
                    b.uniform2fv(u.scale, H);
                    if (w.mergeWith3D && !s) {
                        b.enable(b.DEPTH_TEST);
                        s = true;
                    } else if (!w.mergeWith3D && s) {
                        b.disable(b.DEPTH_TEST);
                        s = false;
                    }
                    c.setBlending(w.blending, w.blendEquation, w.blendSrc, w.blendDst);
                    c.setTexture(w.map, 0);
                    b.drawElements(b.TRIANGLES, 6, b.UNSIGNED_SHORT, 0);
                }
            }
            b.enable(b.CULL_FACE);
            b.enable(b.DEPTH_TEST);
            b.depthMask(true);
        }
    };
};
THREE.DepthPassPlugin = function() {
    this.enabled = false;
    this.renderTarget = null;
    var a, b, c, d, e = new THREE.Frustum,
        f = new THREE.Matrix4;
    this.init = function(e) {
        a = e.context;
        b = e;
        var e = THREE.ShaderLib.depthRGBA,
            f = THREE.UniformsUtils.clone(e.uniforms);
        c = new THREE.ShaderMaterial({
            fragmentShader: e.fragmentShader,
            vertexShader: e.vertexShader,
            uniforms: f
        });
        d = new THREE.ShaderMaterial({
            fragmentShader: e.fragmentShader,
            vertexShader: e.vertexShader,
            uniforms: f,
            morphTargets: true
        });
        c._shadowPass = true;
        d._shadowPass = true;
    };
    this.render =
        function(a, b) {
            this.enabled && this.update(a, b);
        };
    this.update = function(g, h) {
        var j, l, k, p, m, o;
        a.clearColor(1, 1, 1, 1);
        a.disable(a.BLEND);
        b.setDepthTest(true);
        b.autoUpdateScene && g.updateMatrixWorld();
        if (!h._viewMatrixArray) h._viewMatrixArray = new Float32Array(16);
        if (!h._projectionMatrixArray) h._projectionMatrixArray = new Float32Array(16);
        h.matrixWorldInverse.getInverse(h.matrixWorld);
        h.matrixWorldInverse.flattenToArray(h._viewMatrixArray);
        h.projectionMatrix.flattenToArray(h._projectionMatrixArray);
        f.multiply(h.projectionMatrix,
            h.matrixWorldInverse);
        e.setFromMatrix(f);
        b.setRenderTarget(this.renderTarget);
        b.clear();
        o = g.__webglObjects;
        j = 0;
        for (l = o.length; j < l; j++) {
            k = o[j];
            m = k.object;
            k.render = false;
            if (m.visible && (!(m instanceof THREE.Mesh) || !m.frustumCulled || e.contains(m))) {
                m._modelViewMatrix.multiply(h.matrixWorldInverse, m.matrixWorld);
                k.render = true;
            }
        }
        j = 0;
        for (l = o.length; j < l; j++) {
            k = o[j];
            if (k.render) {
                m = k.object;
                k = k.buffer;
                b.setObjectFaces(m);
                p = m.customDepthMaterial ? m.customDepthMaterial : m.geometry.morphTargets.length ? d : c;
                k instanceof
                THREE.BufferGeometry ? b.renderBufferDirect(h, g.__lights, null, p, k, m) : b.renderBuffer(h, g.__lights, null, p, k, m);
            }
        }
        o = g.__webglObjectsImmediate;
        j = 0;
        for (l = o.length; j < l; j++) {
            k = o[j];
            m = k.object;
            if (m.visible && m.castShadow) {
                m._modelViewMatrix.multiply(h.matrixWorldInverse, m.matrixWorld);
                b.renderImmediateObject(h, g.__lights, null, c, m);
            }
        }
        j = b.getClearColor();
        l = b.getClearAlpha();
        a.clearColor(j.r, j.g, j.b, l);
        a.enable(a.BLEND);
    };
};
THREE.ShaderFlares = {
    lensFlareVertexTexture: {
        vertexShader: "uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
        fragmentShader: "precision mediump float;\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"
    },
    lensFlare: {
        vertexShader: "uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
        fragmentShader: "precision mediump float;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"
    }
};
THREE.ShaderSprite = {
    sprite: {
        vertexShader: "uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
        fragmentShader: "precision mediump float;\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\n}"
    }
};

module.exports = {
	Maze,
	Box2D,
	Stats,
	THREE
};
